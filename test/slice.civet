{testCase} from ./helper.civet

describe "slice", ->
  testCase """
    slice range
    ---
    x[0...10]
    ---
    x.slice(0, 10)
  """

  testCase """
    slice end omitted
    ---
    x[0...]
    ---
    x.slice(0)
  """

  testCase """
    slice begin omitted
    ---
    x[...10]
    ---
    x.slice(0, 10)
  """

  testCase """
    slice both omitted
    ---
    x[..]
    x[...]
    ---
    x.slice(0)
    x.slice(0)
  """

  testCase """
    slice inclusive number end
    ---
    x[0..10]
    ---
    x.slice(0, 1 + 10 || 1/0)
  """

  testCase """
    slice inclusive variable end
    ---
    x[0..b]
    ---
    x.slice(0, 1 + b || 1/0)
  """

  testCase """
    optional slice
    ---
    x?[0...10]
    ---
    x?.slice(0, 10)
  """

  testCase """
    with expression
    ---
    x[lineNum - 2 .. lineNum + 2]
    ---
    x.slice(lineNum - 2 , 1 +  lineNum + 2 || 1/0)
  """

  describe "assignment", ->
    testCase """
      everything
      ---
      x[..] = [a, b, c]
      x[...] = [a, b, c]
      ---
      x.splice(0, 1/0, ...[a, b, c])
      x.splice(0, 1/0, ...[a, b, c])
    """

    testCase """
      no upper bound
      ---
      x[0...] = [a, b, c]
      ---
      x.splice(0, 1/0, ...[a, b, c])
    """

    testCase """
      with upper bound
      ---
      x[0...10] = [a, b, c]
      ---
      x.splice(0, 10 - 0, ...[a, b, c])
    """

    testCase """
      with inclusive upper bound
      ---
      x[0..10] = [a, b, c]
      ---
      x.splice(0, 1 + 10 - 0, ...[a, b, c])
    """
