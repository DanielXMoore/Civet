{evalsTo, testCase, throws} from ./helper.civet

describe "slice", ->
  testCase """
    slice range
    ---
    x[0...10]
    ---
    x.slice(0, 10)
  """

  testCase """
    slice end omitted
    ---
    x[0...]
    ---
    x.slice(0)
  """

  testCase """
    slice begin omitted
    ---
    x[...10]
    ---
    x.slice(0, 10)
  """

  testCase """
    slice both omitted
    ---
    x[..]
    x[...]
    ---
    x.slice(0)
    x.slice(0)
  """

  testCase """
    slice inclusive number end
    ---
    x[0..10]
    ---
    x.slice(0, 10 + 1 || 1/0)
  """

  testCase """
    slice inclusive variable end
    ---
    x[0..b]
    ---
    x.slice(0, b + 1 || 1/0)
  """

  testCase """
    optional slice
    ---
    x?[0...10]
    ---
    x?.slice(0, 10)
  """

  testCase """
    with expression
    ---
    x[lineNum - 2 .. lineNum + 2]
    ---
    x.slice(lineNum - 2 ,  (lineNum + 2) + 1 || 1/0)
  """

  // #1330
  testCase """
    precedence
    ---
    x[0..x|y]
    ---
    x.slice(0, (x|y) + 1 || 1/0)
  """

  describe "inequalities on range", ->
    testCase """
      ..<
      ---
      x[a..<b]
      x[a..<]
      x[..<b]
      x[..<]
      ---
      x.slice(a, b)
      x.slice(a, -1)
      x.slice(0, b)
      x.slice(0, -1)
    """

    testCase """
      ..<=
      ---
      x[a..<=b]
      x[a..<=]
      x[..<=b]
      x[..<=]
      ---
      x.slice(a, b + 1 || 1/0)
      x.slice(a)
      x.slice(0, b + 1 || 1/0)
      x.slice(0)
    """

    testCase """
      <..
      ---
      x[a<..b]
      x[<..b]
      x[a<..]
      x[<..]
      ---
      x.slice(a + 1, b + 1 || 1/0)
      x.slice(0 + 1, b + 1 || 1/0)
      x.slice(a + 1)
      x.slice(0 + 1)
    """

    testCase """
      <..<
      ---
      x[a<..<b]
      x[<..<b]
      x[a<..<]
      x[<..<]
      ---
      x.slice(a + 1, b)
      x.slice(0 + 1, b)
      x.slice(a + 1, -1)
      x.slice(0 + 1, -1)
    """

    throws """
      <..>
      ---
      x[a<..>b]
      ---
      ParseErrors: unknown:1:5 <..> uses inconsistent < vs. >
    """

    testCase """
      decreasing
      ---
      x[a..>=b]
      x[a..>b]
      x[a>..b]
      x[a>..>b]
      x[0].x[..>=][..>=][0].x
      ---
      type RSliceable<R> = string | {length: number; slice(start: number, end: number): {reverse(): R}}
      var rslice: <R, T extends string | RSliceable<R>>(a: T, start?: number, end?: number) => T extends string ? string : T extends RSliceable<infer R> ? R : never = ((a, start = -1, end = -1) => {
        const l = a.length
        if (start < 0) start += l
        if (++end < 0) end += l
        if (typeof a === 'string') {
          let r = ""
          if (start > l-1) start = l-1
          if (end < 0) end = 0
          for (let i = start; i >= end; --i) r += a[i]
          return r as any
        } else {
          return a.slice(end, start + 1).reverse()
        }
      });
      rslice(x, a, b - 1)
      rslice(x, a, b)
      rslice(x, a - 1, b - 1)
      rslice(x, a - 1, b)
      rslice(rslice(x[0].x, -1, 0 - 1), -1, 0 - 1)[0].x
    """

    testCase.js """
      decreasing JS
      ---
      x[a..>=b]
      ---
      var rslice = ((a, start = -1, end = -1) => {
        const l = a.length
        if (start < 0) start += l
        if (++end < 0) end += l
        if (typeof a === 'string') {
          let r = ""
          if (start > l-1) start = l-1
          if (end < 0) end = 0
          for (let i = start; i >= end; --i) r += a[i]
          return r
        } else {
          return a.slice(end, start + 1).reverse()
        }
      });
      rslice(x, a, b - 1)
    """

    it "decreasing examples", =>
      evalsTo """
        . "civet"[..>=]
        . "civet"[..>=0]
        . "civet"[-1..>=]
        . "civet"[-1..>=0]
        . "civet"[..>]
        . "civet"[..>0]
        . "civet"[-1..>]
        . "civet"[-1..>0]
        . "civet"[>..]
        . "civet"[>..0]
        . "civet"[-1>..]
        . "civet"[-1>..0]
        . "civet"[>..>]
        . "civet"[>..>0]
        . "civet"[-1>..>]
        . "civet"[-1>..>0]
        . "civet"[3..>=1]
        . [1,2,3,4,5][3..>=1]
        . "civet"[..>=-17]
        . "civet"[17>=..]
        . "civet"[..>=17]
        . "civet"[-17>=..]
      """,
        . "tevic"
        . "tevic"
        . "tevic"
        . "tevic"
        . "tevi"
        . "tevi"
        . "tevi"
        . "tevi"
        . "evic"
        . "evic"
        . "evic"
        . "evic"
        . "evi"
        . "evi"
        . "evi"
        . "evi"
        . "evi"
        . [4,3,2]
        . "tevic"
        . "tevic"
        . ""
        . ""

    throws """
      ..> assignment
      ---
      x[a..>b] = c
      ---
      ParseErrors: unknown:16:8 Call expression ending with Call is not a valid left-hand side
      unknown:1:9 Slice range cannot be decreasing in assignment
    """

  describe "inequality without ..", ->
    testCase """
      simple
      ---
      x[>=a]
      x[≥a]
      x[>a]
      x[<=b]
      x[≤b]
      x[<b]
      ---
      x.slice(a)
      x.slice(a)
      x.slice(a + 1)
      x.slice(0, b + 1)
      x.slice(0, b + 1)
      x.slice(0, b)
    """

    testCase """
      complex
      ---
      x[>=a ?? a0]
      x[≥a ?? a0]
      x[>a ?? a0]
      x[<=b ?? b0]
      x[≤b ?? b0]
      x[<b ?? b0]
      ---
      x.slice(a ?? a0)
      x.slice(a ?? a0)
      x.slice((a ?? a0) + 1)
      x.slice(0, (b ?? b0) + 1)
      x.slice(0, (b ?? b0) + 1)
      x.slice(0, b ?? b0)
    """

  describe "assignment", ->
    testCase """
      everything
      ---
      x[..] = [a, b, c]
      x[...] = [a, b, c]
      ---
      x.splice(0, 1/0, ...[a, b, c])
      x.splice(0, 1/0, ...[a, b, c])
    """

    testCase """
      no upper bound
      ---
      x[0...] = [a, b, c]
      ---
      x.splice(0, 1/0, ...[a, b, c])
    """

    testCase """
      with upper bound
      ---
      x[0...10] = [a, b, c]
      ---
      x.splice(0, 10 - 0, ...[a, b, c])
    """

    testCase """
      with inclusive upper bound
      ---
      x[0..10] = [a, b, c]
      ---
      x.splice(0, 10 + 1 - 0, ...[a, b, c])
    """
