{testCase, throws} from ./helper.civet

describe "slice", ->
  testCase """
    slice range
    ---
    x[0...10]
    ---
    x.slice(0, 10)
  """

  testCase """
    slice end omitted
    ---
    x[0...]
    ---
    x.slice(0)
  """

  testCase """
    slice begin omitted
    ---
    x[...10]
    ---
    x.slice(0, 10)
  """

  testCase """
    slice both omitted
    ---
    x[..]
    x[...]
    ---
    x.slice(0)
    x.slice(0)
  """

  testCase """
    slice inclusive number end
    ---
    x[0..10]
    ---
    x.slice(0, 1 + 10 || 1/0)
  """

  testCase """
    slice inclusive variable end
    ---
    x[0..b]
    ---
    x.slice(0, 1 + b || 1/0)
  """

  testCase """
    optional slice
    ---
    x?[0...10]
    ---
    x?.slice(0, 10)
  """

  testCase """
    with expression
    ---
    x[lineNum - 2 .. lineNum + 2]
    ---
    x.slice(lineNum - 2 ,  1 + (lineNum + 2) || 1/0)
  """

  // #1330
  testCase """
    precedence
    ---
    x[0..x|y]
    ---
    x.slice(0, 1 + (x|y) || 1/0)
  """

  describe "inequalities on range", ->
    testCase """
      ..<
      ---
      x[a..<b]
      ---
      x.slice(a, b)
    """

    testCase """
      ..<=
      ---
      x[a..<=b]
      ---
      x.slice(a, 1 + b || 1/0)
    """

    testCase """
      <..
      ---
      x[a<..b]
      ---
      x.slice(1 + a, 1 + b || 1/0)
    """

    testCase """
      <..<
      ---
      x[a<..<b]
      ---
      x.slice(1 + a, b)
    """

    throws """
      ..>
      ---
      x[a..>b]
      ---
      ParseErrors: unknown:1:4 Slice range cannot be decreasing
    """

    throws """
      <..>
      ---
      x[a<..>b]
      ---
      ParseErrors: unknown:1:5 <..> uses inconsistent < vs. >
    """

  describe "assignment", ->
    testCase """
      everything
      ---
      x[..] = [a, b, c]
      x[...] = [a, b, c]
      ---
      x.splice(0, 1/0, ...[a, b, c])
      x.splice(0, 1/0, ...[a, b, c])
    """

    testCase """
      no upper bound
      ---
      x[0...] = [a, b, c]
      ---
      x.splice(0, 1/0, ...[a, b, c])
    """

    testCase """
      with upper bound
      ---
      x[0...10] = [a, b, c]
      ---
      x.splice(0, 10 - 0, ...[a, b, c])
    """

    testCase """
      with inclusive upper bound
      ---
      x[0..10] = [a, b, c]
      ---
      x.splice(0, 1 + 10 - 0, ...[a, b, c])
    """
