{testCase, throws} from ./helper.civet

describe "array", ->
  testCase """
    empty literal
    ---
    []
    ---
    []
  """

  testCase """
    optional commas
    ---
    [
      a
      b,
      c
    ]
    ---
    [
      a,
      b,
      c
    ]
  """

  testCase """
    indentation mid-array
    ---
    [a
     b
     c,
     d
    ]
    ---
    [a,
     b,
     c,
     d
    ]
  """

  testCase """
    indentation mid-array with object literal
    ---
    [a
     b: c
     d: e
    ]
    ---
    [a,
     {b: c,
     d: e}
    ]
  """

  testCase """
    compact rows
    ---
    bitlist := [
      1, 0, 1
      0, 0, 1
      1, 1, 0
    ]
    ---
    const bitlist = [
      1, 0, 1,
      0, 0, 1,
      1, 1, 0
    ]
  """

  testCase """
    compact rows with commas
    ---
    bitlist := [
      1, 0, 1,
      0, 0, 1,
      1, 1, 0,
    ]
    ---
    const bitlist = [
      1, 0, 1,
      0, 0, 1,
      1, 1, 0,
    ]
  """

  testCase """
    compact rows with indentation mid-array
    ---
    bitlist :=
      [1, 0, 1
       0, 0, 1
       1, 1, 0]
    ---
    const bitlist =
      [1, 0, 1,
       0, 0, 1,
       1, 1, 0]
  """

  testCase """
    compact rows with indentation mid-array and commas
    ---
    bitlist :=
      [1, 0, 1,
       0, 0, 1,
       1, 1, 0]
    ---
    const bitlist =
      [1, 0, 1,
       0, 0, 1,
       1, 1, 0]
  """

  testCase """
    indentation checks
    ---
    functions := [
      (x) =>
      y
      z: 1
      o(b, () => y)
    ,
      (x) =>
      y
    ]
    ---
    const functions = [
      (x) => {},
      y,
      {z: 1},
      o(b, () => y)
    ,
      (x) => {},
      y
    ]
  """

  testCase """
    indentation checks with indentation mid-array
    ---
    functions := [(x) => x
      (x) =>
      y
      z: 1
    ,
      (x) =>
      y
    ]
    ---
    const functions = [(x) => x,
      (x) => {},
      y,
      {z: 1}
    ,
      (x) => {},
      y
    ]
  """

  testCase """
    indentation checks with indentation mid-array and comma
    ---
    functions := [(x) => x,
      (x) =>
      y
      z: 1
    ,
      (x) =>
      y
    ]
    ---
    const functions = [(x) => x,
      (x) => {},
      y,
      {z: 1}
    ,
      (x) => {},
      y
    ]
  """

  testCase """
    spread
    ---
    y = [...x]
    ---
    y = [...x]
  """

  testCase """
    postfix spread
    ---
    y = [x...]
    ---
    y = [...x]
  """

  throws """
    empty spread
    ---
    y = [...]
  """

  testCase """
    compact spread
    ---
    bitlist := [
      ...a, ...b, ...c
      ...d, ...e, ...f
      ...g, ...h, ...i
    ]
    ---
    const bitlist = [
      ...a, ...b, ...c,
      ...d, ...e, ...f,
      ...g, ...h, ...i
    ]
  """

  testCase """
    elision
    ---
    [ , , , ,,, ,,, ,, ,]
    ---
    [ , , , ,,, ,,, ,, ,]
  """

  testCase """
    elision keeps comments
    ---
    [ , ,/*  ea*/ , ,,, ,/**/,, ,, ,]
    ---
    [ , ,/*  ea*/ , ,,, ,/**/,, ,, ,]
  """

  testCase """
    inline assignment
    ---
    [x=y]
    ---
    [x=y]
  """

  testCase """
    postfix if second
    ---
    [
      1
      1 if x
    ]
    ---
    [
      1,
      (x?1:void 0)
    ]
  """

  testCase """
    postfix if first
    ---
    [
      1 if x
      a
    ]
    ---
    [
      (x?1:void 0),
      a
    ]
  """

  testCase """
    postfix if with splat
    ---
    [
      ...a if x
    ]
    ---
    [
      ...(x?a:void 0)
    ]
  """

  testCase """
    postfix while
    ---
    [
      ...x += 1 while x < 10
    ]
    ---
    [
      ...(()=>{const results=[];while (x < 10) { results.push(x += 1) }return results})()
    ]
  """

  testCase """
    kitchen sink
    ---
    [ , ,/*  ea*/ , ,x=y,...z, ,/**/,, ,, ,]
    ---
    [ , ,/*  ea*/ , ,x=y,...z, ,/**/,, ,, ,]
  """

  testCase """
    multi-objects
    ---
    const data = [
    {
        key: 1,
        value: "Some label"

        },
        {
        key: 2,
        value: "Another label"
        },
    ]
    ---
    const data = [
    {
        key: 1,
        value: "Some label"

        },
        {
        key: 2,
        value: "Another label"
        },
    ]
  """

  testCase """
    array of objects with trailing commas
    ---
    data := [
      { key: 1, value: "Some label" },
      { key: 2, value: "Another label" },
    ]
    ---
    const data = [
      { key: 1, value: "Some label" },
      { key: 2, value: "Another label" },
    ]
  """

  testCase """
    array of numbers with trailing commas
    ---
    data := [
      1,
      2,
      3,
    ]
    ---
    const data = [
      1,
      2,
      3,
    ]
  """

  testCase """
    array with varying numbers of trailing commas
    ---
    data := [
      1,,,,,
      2
      3,,
    ]
    ---
    const data = [
      1,,,,,
      2,
      3,,
    ]
  """

  describe "nested implicit object literals", ->
    testCase """
      nested implicit object literal
      ---
      x := [
        a: 10
        b: 20
      ]
      ---
      const x = [
        {a: 10,
        b: 20}
      ]
    """

    testCase """
      nested implicit object literal with function calls
      ---
      x := [
        a: f 10
        b: f 20
      ]
      ---
      const x = [
        {a: f(10),
        b: f(20)}
      ]
    """

    // CoffeeScript allows this but it is weird
    testCase """
      multiple nested implicit object literals
      ---
      x := [
        a: 1
        b: 2
      ,
        a: 1
        b: 2
      ,
        a: 1
        b: 2
      ]
      ---
      const x = [
        {a: 1,
        b: 2}
      ,
        {a: 1,
        b: 2}
      ,
        {a: 1,
        b: 2}
      ]
    """

    testCase """
      nested implicit object literals and other things
      ---
      x := [
        a: 1
        b: 2
      ,
        f
          a: 1
          b: 2
      ,
        3
      ]
      ---
      const x = [
        {a: 1,
        b: 2}
      ,
        f({
          a: 1,
          b: 2,
        })
      ,
        3
      ]
    """

    testCase """
      literal mixed with nested implicit object literal
      ---
      [
        1
        x: 1
        y: 2
      ]
      ---
      [
        1,
        {x: 1,
        y: 2}
      ]
    """

    testCase """
      literals mixed with nested implicit object literal
      ---
      [
        1
        2
        x: 1
        y: 2
      ]
      ---
      [
        1,
        2,
        {x: 1,
        y: 2}
      ]
    """
