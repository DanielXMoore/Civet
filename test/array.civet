{testCase} from ./helper.civet

describe "array", ->
  testCase """
    empty literal
    ---
    []
    ---
    []
  """

  testCase """
    optional commas
    ---
    [
      a
      b,
      c
    ]
    ---
    [
      a,
      b,
      c
    ]
  """

  testCase """
    indentation mid-array
    ---
    [a
     b
     c,
     d
    ]
    ---
    [a,
     b,
     c,
     d
    ]
  """

  testCase """
    compact rows
    ---
    bitlist := [
      1, 0, 1
      0, 0, 1
      1, 1, 0
    ]
    ---
    const bitlist = [
      1, 0, 1,
      0, 0, 1,
      1, 1, 0
    ]
  """

  testCase """
    compact rows with indentation mid-array
    ---
    bitlist :=
      [1, 0, 1
       0, 0, 1
       1, 1, 0]
    ---
    const bitlist =
      [1, 0, 1,
       0, 0, 1,
       1, 1, 0]
  """

  testCase """
    spread
    ---
    y = [...x]
    ---
    y = [...x]
  """

  testCase """
    postfix spread
    ---
    y = [x...]
    ---
    y = [...x]
  """

  testCase """
    compact spread
    ---
    bitlist := [
      ...a, ...b, ...c
      ...d, ...e, ...f
      ...g, ...h, ...i
    ]
    ---
    const bitlist = [
      ...a, ...b, ...c,
      ...d, ...e, ...f,
      ...g, ...h, ...i
    ]
  """

  testCase """
    elision
    ---
    [ , , , ,,, ,,, ,, ,]
    ---
    [ , , , ,,, ,,, ,, ,]
  """

  testCase """
    elision keeps comments
    ---
    [ , ,/*  ea*/ , ,,, ,/**/,, ,, ,]
    ---
    [ , ,/*  ea*/ , ,,, ,/**/,, ,, ,]
  """

  testCase """
    inline assignment
    ---
    [x=y]
    ---
    [x=y]
  """

  testCase """
    kitchen sink
    ---
    [ , ,/*  ea*/ , ,x=y,...z, ,/**/,, ,, ,]
    ---
    [ , ,/*  ea*/ , ,x=y,...z, ,/**/,, ,, ,]
  """

  testCase """
    multi-objects
    ---
    const data = [
    {
        key: 1,
        value: "Some label"

        },
        {
        key: 2,
        value: "Another label"
        },
    ]
    ---
    const data = [
    {
        key: 1,
        value: "Some label"

        },
        {
        key: 2,
        value: "Another label"
        },
    ]
  """

  testCase """
    array of objects with trailing commas
    ---
    data := [
      { key: 1, value: "Some label" },
      { key: 2, value: "Another label" },
    ]
    ---
    const data = [
      { key: 1, value: "Some label" },
      { key: 2, value: "Another label" },
    ]
  """

  testCase """
    array of numbers with trailing commas
    ---
    data := [
      1,
      2,
      3,
    ]
    ---
    const data = [
      1,
      2,
      3,
    ]
  """

  testCase """
    array with varying numbers of trailing commas
    ---
    data := [
      1,,,,,
      2
      3,,
    ]
    ---
    const data = [
      1,,,,,
      2,
      3,,
    ]
  """

  describe.skip "maybe later", ->
    // CoffeeScript allows this but it is weird
    testCase """
      weird array
      ---
      x := [
        a: 1
        b: 2
      ,
        a: 1
        b: 2
      ]
      ---
      const x = [
        {
          a: 1,
          b: 2
        },
        {
          a: 1,
          b: 2
        }
      ]
    """
