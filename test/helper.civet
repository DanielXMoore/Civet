{ compile } from ../source/main.coffee

assert from assert
cache := true

compare := (src: string, result: string, filename: string) ->
  compileResult := compile(src, {
    noCache: !cache
    filename
  })

  assert.equal compileResult, result, """
    #{filename}
    --- Source   ---
    #{src}

    --- Expected ---
    #{result}

    --- Got      ---
    #{compileResult}

  """

testCase := (text: string, opt?: "only" | "skip") ->
  [desc, src, result] := text.split("\n---\n")

  let fn
  if opt
    fn = it[opt]
  else
    fn = it

  fn desc, ->
    compare src, result, desc

testCase.only = (text: string) ->
  testCase(text, "only")

testCase.skip = (text: string) ->
  testCase(text, "skip")

throws := (text: string) ->
  assert.throws ->
    compile text, {
      cache
    }

export {
  compare
  testCase
  throws
}
