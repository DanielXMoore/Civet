{ compile, type CompilerOptions } from ../source/main.civet
esbuild from esbuild
assert from assert

let wrappers: string[] = []

type CompilerOptionsWithWrapper = CompilerOptions & {wrapper?: string}

compare := (src: string, result: string, compilerOpts: CompilerOptionsWithWrapper) ->
  { filename } := compilerOpts
  compileResult := await compile(src, {
    ...compilerOpts
  })

  assert.equal compileResult, result, """
    #{filename}
    --- Source   ---
    #{src}

    --- Expected ---
    #{result}

    --- Got      ---
    #{compileResult}

  """

  jsCode .= compileResult
  wrapper := compilerOpts.wrapper ?? wrappers.-1
  if wrapper?
    // Empty string means "don't check with esbuild"
    return unless wrapper
    jsCode = wrapper.replace /([ \t]*)CODE/g, (_, indent) =>
      jsCode.replace /^/gm, indent

  try
    esbuild.transformSync jsCode,
      loader: if compilerOpts.js then 'jsx' else 'tsx'
      jsx: 'preserve'
  catch e
    assert.fail """
      Failed to parse #{if compilerOpts.js then 'JavaScript' else 'TypeScript'}

      --- Code ---
      #{jsCode}

      --- Error    ---
      #{e}
    """

/**
 * Pass a string with the following format:
 * ```
 * description
 * ---
 * source
 * ---
 * result
 * ```
 * The source will be compiled and compared to the result.
 * The description will be used as the test description.
 * You can also do testCase.only and testCase.skip to only run or skip this test.
 */
testCase := (text: string, compilerOpts: CompilerOptionsWithWrapper = {}, opt?: "only" | "skip") ->
  [desc, src, result] := text.split /\n---(?:\n|$)/

  fn := opt ? it[opt] : it

  fn desc, ->
    await compare src, result, {
      filename: desc
      ...compilerOpts
    }

testCase.only = (text: string, compilerOpts?: CompilerOptionsWithWrapper) -> testCase text, compilerOpts, "only"
testCase.skip = (text: string, compilerOpts?: CompilerOptionsWithWrapper) -> testCase text, compilerOpts, "skip"

testCase.js = (text: string) ->
  testCase text, js: true

/**
 * Pass a string with the following format:
 * ```
 * description
 * ---
 * source
 * ---
 * error
 * ```
 * The source will be compiled and checked that it throws an error.
 * The description will be used as the test description.
 * The error part is optional, and can specify:
 *  - just the name of the error (e.g. ParseError)
 *  - the stringified error (of the form `type: message`),
 *    sans the Expected/Found part of ParseErrors
 */
throws := (text: string, compilerOpts?: CompilerOptions, opt?: "only" | "skip") ->
  [desc, src, error] := text.split /\n---(?:\n|$)/
  throw new Error "Missing code block" unless src

  fn := opt ? it[opt] : it

  fn desc, ->
    let e: unknown, result: string
    try
      result = await compile src, compilerOpts
    catch caught
      e = caught
    // First confirm throw
    assert.throws
      => e && throw e
      undefined as any
      """

        --- Source   ---
        #{src}

        --- Got      ---
        #{result!}

        """
    // Then check against desired error message
    if error
      {name} := e! as {name: string}
      let s
      if error.includes ':' // name: message
        s = e!.toString()
        { name } := (e! as {name: string})
        if name is "ParseError"
          s = s.replace /\nExpected:[^]*$/, ''
      else // just name
        s = name
      assert.equal s, error, """

        --- Source         ---
        #{src}

        --- Expected Error ---
        #{error}

        --- Got Error      ---
        #{e!.toString()}

      """

throws.only = (text: string, compilerOpts?: CompilerOptions) -> throws text, compilerOpts, "only"
throws.skip = (text: string, compilerOpts?: CompilerOptions) -> throws text, compilerOpts, "skip"

evalsTo := (src: string, value: any) ->
  result := eval compile src, {
    js: true
    sync: true  // TODO: consider wrapping in `it` so we can use async API
  }
  assert.deepEqual result, value, """

    --- Source   ---
    #{src}

    --- Expected ---
    #{value}

    --- Got      ---
    #{result}

  """

wrapper := (wrap: string) ->
  beforeAll => wrappers.push wrap
  afterAll => wrappers.pop()

export {
  compare
  evalsTo
  testCase
  throws
  wrapper
}
