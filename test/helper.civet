{ compile, type CompilerOptions } from ../source/main.civet
esbuild from esbuild

assert from assert

compare := (src: string, result: string, compilerOpts: CompilerOptions) ->
  { filename } := compilerOpts
  compileResult := compile(src, {
    ...compilerOpts
  })

  assert.equal compileResult, result, """
    #{filename}
    --- Source   ---
    #{src}

    --- Expected ---
    #{result}

    --- Got      ---
    #{compileResult}

  """

  try
    esbuild.transformSync compileResult,
      loader: if compilerOpts.js then 'js' else 'ts'
      jsx: 'preserve'
  catch e
    assert.fail """
      Failed to parse #{if compilerOpts.js then 'JavaScript' else 'TypeScript'}

      --- Code ---
      #{compileResult}

      --- Error    ---
      #{e}
    """

/**
 * Pass a string with the following format:
 * ```
 * description
 * ---
 * source
 * ---
 * result
 * ```
 * The source will be compiled and compared to the result.
 * The description will be used as the test description.
 * You can also do testCase.only and testCase.skip to only run or skip this test.
 */
testCase := (text: string, opt?: "only" | "skip", compilerOpts: CompilerOptions={}) ->
  [desc, src, result] := text.split("\n---\n")

  fn := opt ? it[opt] : it

  fn desc, ->
    compare src, result, {
      filename: desc
      ...compilerOpts
    }

testCase.only = (text: string, compilerOpts?: CompilerOptions) -> testCase text, "only", compilerOpts
testCase.skip = (text: string, compilerOpts?: CompilerOptions) -> testCase text, "skip", compilerOpts

testCase.js = (text: string) ->
  testCase(text, undefined, {
    js: true
  })

throws := (text: string, opt?: "only" | "skip", compilerOpts?: CompilerOptions) ->
  let [desc, src] = text.split("\n---\n")
  throw new Error "Missing code block" unless src

  fn := opt ? it[opt] : it

  fn desc, ->
    let e: unknown, result: string
    try
      result = compile src, compilerOpts
    catch caught
      e = caught
    assert.throws => e && throw e, (undefined as any), """

      --- Source   ---
      #{src}

      --- Got      ---
      #{result!}

    """

throws.only = (text: string, compilerOpts?: CompilerOptions) -> throws text, "only", compilerOpts
throws.skip = (text: string, compilerOpts?: CompilerOptions) -> throws text, "skip", compilerOpts

evalsTo := (src: string, value: any) ->
  result := eval compile src, {
    js: true
  }
  assert.equal result, value, """

    --- Source   ---
    #{src}

    --- Expected ---
    #{value}

    --- Got      ---
    #{result}

  """

export {
  compare
  evalsTo
  testCase
  throws
}
