{ compile, type CompilerOptions } from ../source/main.civet
{ before, after } from mocha
esbuild from esbuild
assert from assert

let wrappers: string[] = []

type CompilerOptionsWithWrapper = CompilerOptions & {wrapper?: string}

compare := (src: string, result: string, compilerOpts: CompilerOptionsWithWrapper) ->
  { filename } := compilerOpts
  compileResult := compile(src, {
    ...compilerOpts
  })

  assert.equal compileResult, result, """
    #{filename}
    --- Source   ---
    #{src}

    --- Expected ---
    #{result}

    --- Got      ---
    #{compileResult}

  """

  jsCode .= compileResult
  wrapper := compilerOpts.wrapper ?? wrappers.-1
  if wrapper?
    // Empty string means "don't check with esbuild"
    return unless wrapper
    jsCode = wrapper.replace /([ \t]*)CODE/g, (_, indent) =>
      jsCode.replace /^/gm, indent

  try
    esbuild.transformSync jsCode,
      loader: if compilerOpts.js then 'jsx' else 'tsx'
      jsx: 'preserve'
  catch e
    assert.fail """
      Failed to parse #{if compilerOpts.js then 'JavaScript' else 'TypeScript'}

      --- Code ---
      #{jsCode}

      --- Error    ---
      #{e}
    """

/**
 * Pass a string with the following format:
 * ```
 * description
 * ---
 * source
 * ---
 * result
 * ```
 * The source will be compiled and compared to the result.
 * The description will be used as the test description.
 * You can also do testCase.only and testCase.skip to only run or skip this test.
 */
testCase := (text: string, compilerOpts: CompilerOptionsWithWrapper = {}, opt?: "only" | "skip") ->
  [desc, src, result] := text.split("\n---\n")

  fn := opt ? it[opt] : it

  fn desc, ->
    compare src, result, {
      filename: desc
      ...compilerOpts
    }

testCase.only = (text: string, compilerOpts?: CompilerOptionsWithWrapper) -> testCase text, compilerOpts, "only"
testCase.skip = (text: string, compilerOpts?: CompilerOptionsWithWrapper) -> testCase text, compilerOpts, "skip"

testCase.js = (text: string) ->
  testCase text, js: true

throws := (text: string, compilerOpts?: CompilerOptions, opt?: "only" | "skip") ->
  let [desc, src] = text.split("\n---\n")
  throw new Error "Missing code block" unless src

  fn := opt ? it[opt] : it

  fn desc, ->
    let e: unknown, result: string
    try
      result = compile src, compilerOpts
    catch caught
      e = caught
    assert.throws => e && throw e, (undefined as any), """

      --- Source   ---
      #{src}

      --- Got      ---
      #{result!}

    """

throws.only = (text: string, compilerOpts?: CompilerOptions) -> throws text, compilerOpts, "only"
throws.skip = (text: string, compilerOpts?: CompilerOptions) -> throws text, compilerOpts, "skip"

evalsTo := (src: string, value: any) ->
  result := eval compile src, {
    js: true
  }
  assert.deepEqual result, value, """

    --- Source   ---
    #{src}

    --- Expected ---
    #{value}

    --- Got      ---
    #{result}

  """

wrapper := (wrap: string) ->
  before => wrappers.push wrap
  after => wrappers.pop()

export {
  compare
  evalsTo
  testCase
  throws
  wrapper
}
