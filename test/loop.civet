{testCase, wrapper} from ./helper.civet

describe "loop", ->
  testCase """
    basic
    ---
    loop
      x++
      break
    ---
    while(true) {
      x++
      break
    }
  """

  testCase """
    postfix
    ---
    run() loop
    ---
    while(true) { run() }
  """

  testCase """
    empty
    ---
    loop
    ---
    while(true);
  """

  // TODO: remove extra semicolon
  testCase.skip """
    empty no ASI
    ---
    loop
    ++x
    ---
    while(true);
    ++x
  """

  describe "loop*", ->
    wrapper """
      function* wrapper() {
        CODE
      }
    """

    testCase """
      loop generator
      ---
      loop*
        1
      ---
      while(true) {
        yield 1
      }
    """

    testCase """
      loop generator in expression context
      ---
      f loop*
        1
      ---
      f((function*(){while(true) {
        yield 1
      }})())
    """, wrapper: ""

    testCase """
      one-line loop generator
      ---
      loop* 1
      ---
      while(true) yield 1
    """

    testCase """
      postfix loop generator
      ---
      infinite := 1 loop*
      ---
      const infinite =(function*(){while(true) { yield  1 }})()
    """

  testCase """
    break with
    ---
    =>
      loop
        if special()
          break with 'done'
        break if finished()
    ---
    () => {
      let results;results=[];while(true) {
        if (special()) {
          results = 'done';break
        }
        if (finished()) { break } else {results.push(void 0)}
      };return results;
    }
  """

  testCase """
    break with only
    ---
    =>
      loop
        if finished()
          break with 'done'
    ---
    () => {
      let results;while(true) {
        if (finished()) {
          results = 'done';break
        }
      };return results;
    }
  """
