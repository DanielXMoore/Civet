{testCase, throws} from ../helper.civet

describe "Indentation-based JSX", ->
  testCase """
    no children
    ---
    return
      <div>
    console.log 'unreachable'
    ---
    return (
      <div />
    )
    console.log('unreachable')
  """

  testCase """
    mixture of indentation and same line
    ---
    return
      <div>Hello
        world, it's {today}!
    console.log 'unreachable'
    ---
    return (
      <div>Hello
        world, it's {today}!
      </div>
    )
    console.log('unreachable')
  """

  testCase """
    full tag on same line
    ---
    return
      <div><h1>Hello world</h1> It's
        <b>{today}
        !
    console.log 'unreachable'
    ---
    return (
      <div><h1>Hello world</h1> It's
        <b>{today}
        </b>
        !
      </div>
    )
    console.log('unreachable')
  """

  testCase """
    another start tag on same line
    ---
    return
      <div><h1>Hello
        world, it's {today}!
    console.log 'unreachable'
    ---
    return (
      <div><h1>Hello
        world, it's {today}!
      </h1>
      </div>
    )
    console.log('unreachable')
  """

  testCase """
    indentation for every tag
    ---
    return
      <div>
        <b>
          Bold
        <i>
          Italic
    console.log 'unreachable'
    ---
    return (
      <div>
        <b>
          Bold
        </b>
        <i>
          Italic
        </i>
      </div>
    )
    console.log('unreachable')
  """

  testCase """
    not actually indentation
    ---
    return
      <div>
    console.log 'unreachable'
      </div>
    ---
    return (
      <div>
    console.log 'unreachable'
      </div>
    )
  """

  testCase """
    indented fragments
    ---
    return
      <>
        <b>
          Bold
        <i>
          Italic
    console.log 'unreachable'
    ---
    return (
      <>
        <b>
          Bold
        </b>
        <i>
          Italic
        </i>
      </>
    )
    console.log('unreachable')
  """

  testCase """
    outer indentation, inner closed tags
    ---
    return
      <div>
        <b>Bold</b>
        <i>Italic</i>
    console.log 'unreachable'
    ---
    return (
      <div>
        <b>Bold</b>
        <i>Italic</i>
      </div>
    )
    console.log('unreachable')
  """

  testCase """
    inner indentation, outer closed tags
    ---
    return
      <div>
        <b>
          Bold
        <i>
          Italic
      </div>
    console.log 'unreachable'
    ---
    return (
      <div>
        <b>
          Bold
      </b>
        <i>
          Italic
      </i>
      </div>
    )
    console.log('unreachable')
  """

  testCase """
    fragment of same-level tags
    ---
    <>
      <div>
      <b>
      <i>
    ---
    <>
      <div />
      <b />
      <i />
    </>
  """

  testCase """
    array of same-level tags
    ---
    [
      <div>
      <b>
      <i>
    ]
    ---
    [
      <div />,
      <b />,
      <i />
    ]
  """

  testCase """
    array of same-level tags with one closing
    ---
    [
      <div>
      <div>
      </div>
      <b>
    ]
    ---
    [
      <div />,
      <div>
      </div>,
      <b />
    ]
  """

  testCase """
    array with indented tags
    ---
    [
      <div>
        <b>Bold
        <i>Bold
      <div>
    ]
    ---
    [
      <div>
        <b>Bold
        </b>
        <i>Bold
        </i>
      </div>,
      <div />
    ]
  """

  testCase """
    content on same line as open tag
    ---
    <div>Hello
      world
      <b>Bold
        text
      <>Fragment
        text
    ---
    <div>Hello
      world
      <b>Bold
        text
      </b>
      <>Fragment
        text
      </>
    </div>
  """

  testCase """
    array with indented closed tags
    ---
    [
      <div>
        <b>Bold</b>
        <i>Bold</i>
      <div>
    ]
    ---
    [
      <div>
        <b>Bold</b>
        <i>Bold</i>
      </div>,
      <div />
    ]
  """

  testCase """
    SolidJS example from https://playground.solidjs.com/
    ---
    function Counter()
      [count, setCount] := createSignal 1
      increment := -> setCount count() + 1
      <button type="button" onClick={increment}>
        {count()}
    ---
    function Counter() {
      const [count, setCount] = createSignal(1)
      function increment () { return setCount(count() + 1) }
      return <button type="button" onClick={increment}>
        {count()}
      </button>
    }
  """

  testCase """
    SolidJS example from https://www.solidjs.com/tutorial/introduction_jsx
    ---
    return
      <>
        <div>
          Hello {name}!
        {svg}
    ---
    return (
      <>
        <div>
          Hello {name}!
        </div>
        {svg}
      </>
    )
  """

  testCase """
    indentation elements as attributes
    ---
    <Component sub=<div>
      Hello
    no-children=<div>
    frag=<>...
    >
      child
    ---
    <Component sub=<div>
      Hello
    </div>
    no-children=<div />
    frag=<>...
    </>
    >
      child
    </Component>
  """
