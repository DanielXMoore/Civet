{testCase, throws} from ../helper.civet

describe "Indentation-based JSX", ->
  testCase """
    no children
    ---
    return
      <div>
    console.log 'unreachable'
    ---
    return (
      <div />
    )
    console.log('unreachable')
  """

  testCase """
    mixture of indentation and same line
    ---
    return
      <div>Hello
        world, it's {today}!
    console.log 'unreachable'
    ---
    return (
      <div>Hello
        world, it's {today}!
      </div>
    )
    console.log('unreachable')
  """

  testCase """
    full tag on same line
    ---
    return
      <div><h1>Hello world</h1> It's
        <b>{today}
        !
    console.log 'unreachable'
    ---
    return (
      <div><h1>Hello world</h1> It's
        <b>{today}
        </b>
        !
      </div>
    )
    console.log('unreachable')
  """

  testCase """
    another start tag on same line
    ---
    return
      <div><h1>Hello
        world, it's {today}!
    console.log 'unreachable'
    ---
    return (
      <div><h1>Hello
        world, it's {today}!
      </h1>
      </div>
    )
    console.log('unreachable')
  """

  testCase """
    indentation for every tag
    ---
    return
      <div>
        <b>
          Bold
        <i>
          Italic
    console.log 'unreachable'
    ---
    return (
      <div>
        <b>
          Bold
        </b>
        <i>
          Italic
        </i>
      </div>
    )
    console.log('unreachable')
  """

  testCase """
    improperly indented children
    ---
    "civet coffeeJSX"
    return
      <div>
    console.log 'unreachable'
      </div>
    ---
    return (
      <div>
    console.log 'unreachable'
      </div>
    )
  """

  throws """
    improperly indented children fails
    ---
    return
      <div>
    console.log 'unreachable'
      </div>
    ---
    ParseError
  """

  testCase """
    indented fragments
    ---
    return
      <>
        <b>
          Bold
        <i>
          Italic
    console.log 'unreachable'
    ---
    return (
      <>
        <b>
          Bold
        </b>
        <i>
          Italic
        </i>
      </>
    )
    console.log('unreachable')
  """

  testCase """
    outer indentation, inner closed tags
    ---
    return
      <div>
        <b>Bold</b>
        <i>Italic</i>
    console.log 'unreachable'
    ---
    return (
      <div>
        <b>Bold</b>
        <i>Italic</i>
      </div>
    )
    console.log('unreachable')
  """

  testCase """
    inner indentation, outer closed tags
    ---
    return
      <div>
        <b>
          Bold
        <i>
          Italic
      </div>
    console.log 'unreachable'
    ---
    return (
      <div>
        <b>
          Bold
        </b>
        <i>
          Italic
        </i>
      </div>
    )
    console.log('unreachable')
  """

  testCase """
    fragment of same-level tags
    ---
    <>
      <div>
      <b>
      <i>
    ---
    <>
      <div />
      <b />
      <i />
    </>
  """

  testCase """
    array of same-level tags and data
    ---
    [
      <div>
      5
      <div>
    ]
    ---
    [
      <div />,
      5,
      <div />
    ]
  """

  testCase """
    array of same-level tags
    ---
    [
      <div>
      <b>
      <i>
    ]
    ---
    [
      <div />,
      <b />,
      <i />
    ]
  """

  testCase """
    some commas in array
    ---
    [
      <header>
      <body>
    ,
      <footer>
    ]
    ---
    [
      <header />,
      <body />
    ,
      <footer />
    ]
  """

  testCase """
    array of same-level tags with one closing
    ---
    [
      <div>
      <div>
      </div>
      <b>
    ]
    ---
    [
      <div />,
      <div>
      </div>,
      <b />
    ]
  """

  testCase """
    array with indented tags
    ---
    [
      <div>
        <b>Bold
        <i>Bold
      <div>
    ]
    ---
    [
      <div>
        <b>Bold
        </b>
        <i>Bold
        </i>
      </div>,
      <div />
    ]
  """

  testCase """
    content on same line as open tag
    ---
    <div>Hello
      world
      <b>Bold
        text
      <>Fragment
        text
    ---
    <div>Hello
      world
      <b>Bold
        text
      </b>
      <>Fragment
        text
      </>
    </div>
  """

  testCase """
    array with indented closed tags
    ---
    [
      <div>
        <b>Bold</b>
        <i>Bold</i>
    ,
      <div>
    ]
    ---
    [
      <div>
        <b>Bold</b>
        <i>Bold</i>
      </div>
    ,
      <div />
    ]
  """

  testCase """
    SolidJS example from https://playground.solidjs.com/
    ---
    function Counter()
      [count, setCount] := createSignal 1
      increment := -> setCount count() + 1
      <button type="button" onClick={increment}>
        {count()}
    ---
    function Counter() {
      const [count, setCount] = createSignal(1)
      const increment = function() { return setCount(count() + 1) }
      return <button type="button" onClick={increment}>
        {count()}
      </button>
    }
  """

  testCase """
    SolidJS example from https://www.solidjs.com/tutorial/introduction_jsx
    ---
    return
      <>
        <div>
          Hello {name}!
        {svg}
    ---
    return (
      <>
        <div>
          Hello {name}!
        </div>
        {svg}
      </>
    )
  """

  testCase """
    indentation elements as attributes
    ---
    <Component sub=<div>
      Hello
    no-children=<div>
    frag=<>...
    >
      child
    ---
    <Component sub=<div>
      Hello
    </div>
    no-children=<div />
    frag=<>...
    </>
    >
      child
    </Component>
  """

  testCase """
    attribute with arrow function with single-line JSX
    ---
    <Show fallback={=> <div>Loading...}>Content
    ---
    <Show fallback={() => <div>Loading...
    </div>}>Content
    </Show>
  """

  testCase """
    attribute with arrow function with indented JSX
    ---
    <Show fallback={=>
      <div>
        Loading...
    }>Content
    ---
    <Show fallback={() => {
      return <div>
        Loading...
      </div>
    }
    }>Content
    </Show>
  """

describe "Unbraced function children in JSX", ->
  testCase """
    same line, thin, no arguments
    ---
    <For each={items}>-> 'item'
    ---
    <For each={items}>{function() { return 'item' }}
    </For>
  """

  testCase """
    same line, thick, no arguments
    ---
    <For each={items}>=> 'item'
    ---
    <For each={items}>{() => 'item'}
    </For>
  """

  testCase """
    same line, thick, whitespace, no arguments
    ---
    <For each={items}> => 'item'
    ---
    <For each={items}>{() => 'item'}
    </For>
  """

  testCase """
    same line, indent, thick, no arguments
    ---
    <For each={items}>=>
      'item'
    ---
    <For each={items}>{() => {
      return 'item'
    }}
    </For>
  """

  testCase """
    same line, indent, thick, whitespace, no arguments
    ---
    <For each={items}> =>
      'item'
    ---
    <For each={items}>{() => {
      return 'item'
    }}
    </For>
  """

  testCase """
    multi-line, thick, argument
    ---
    <For each={items}>(item) =>
      {priority, text} := item
      `[${priority}] ${item}`
    ---
    <For each={items}>{(item) => {
      const {priority, text} = item
      return `[${priority}] ${item}`
    }}
    </For>
  """

  testCase """
    next line, thick, argument, JSX
    ---
    <For each={items}>
      (item) => <li>{item}
    ---
    <For each={items}>
      {(item) => <li>{item}
      </li>}
    </For>
  """

  testCase """
    next line, thin, argument, JSX
    ---
    <For each={items}>
      (item) -> <li>{item}
    ---
    <For each={items}>
      {function(item) { return <li>{item}
      </li> }}
    </For>
  """

  testCase """
    next line, indent, thick, argument, JSX
    ---
    <For each={items}>
      (item) =>
        <li>{item}
    ---
    <For each={items}>
      {(item) => {
        return <li>{item}
        </li>
      }}
    </For>
  """

  testCase """
    next line, indent, thin, argument, JSX
    ---
    <For each={items}>
      (item) ->
        <li>{item}
    ---
    <For each={items}>
      {function(item) {
        return <li>{item}
        </li>
      }}
    </For>
  """

  testCase """
    line after text
    ---
    <For each={items}>
      Hello
      (item) => <li>{item}
    ---
    <For each={items}>
      Hello
      {(item) => <li>{item}
      </li>}
    </For>
  """

  testCase """
    simple function next line
    ---
    <div>
      => x
    ---
    <div>
      {() => x}
    </div>
  """

  throws """
    doesn't work on same line as text
    ---
    "civet coffeeJSX"
    <For each={items}> Hello (item) => <li>{item}
    ---
    ParseError
  """

  testCase """
    with if expression
    ---
    <>
      {
        if loggedIn
          <LogoutButton />
        else
          <LoginButton />
      }
    ---
    <>
      {
        (loggedIn?
          <LogoutButton />
        :
          <LoginButton />)
      }
    </>
  """

describe "Implicit JSX fragments", ->
  testCase """
    two closed tags
    ---
    <header/>
    <footer/>
    ---
    <>
    <header/>
    <footer/>
    </>
  """

  testCase """
    two open tags
    ---
    <header>
    <footer>
    ---
    <>
    <header />
    <footer />
    </>
  """

  testCase """
    two open tags with text
    ---
    <header>Hello
    <footer>World
    ---
    <>
    <header>Hello
    </header>
    <footer>World
    </footer>
    </>
  """

  testCase """
    function within array
    ---
    [
      =>
        <header>Hello
        <footer>World
    ]
    ---
    [
      () => {
        return <>
        <header>Hello
        </header>
        <footer>World
        </footer>
        </>
      }
    ]
  """

  testCase """
    no implicit fragment in function call
    ---
    =>
      f <foo>
      <bar>
    ---
    () => {
      f(<foo />)
      return <bar />
    }
  """

  testCase """
    no implicit fragment in assignment
    ---
    =>
      x = <foo>
      <bar>
    ---
    () => {
      x = <foo />
      return <bar />
    }
  """

  testCase """
    no implicit fragment in declaration
    ---
    =>
      x := <foo>
      <bar>
    ---
    () => {
      const x = <foo />
      return <bar />
    }
  """

  testCase """
    no implicit fragment in if declaration
    ---
    =>
      if x := <foo>
      <bar>
    ---
    () => {
      let ref;if ((ref = <foo />)) {const x = ref;}
      return <bar />
    }
  """

  testCase """
    no implicit fragment in if statement
    ---
    =>
      if <foo>
      <bar>
    ---
    () => {
      if (<foo />) {}
      return <bar />
    }
  """

  testCase """
    no implicit fragment in > child
    ---
    <foo>
      > <first>
      <second>
    ---
    <foo>
      { <first />}
      <second />
    </foo>
  """

  testCase """
    no implicit fragment after binary
    ---
    =>
      x + <foo>
      <bar>
    ---
    () => {
      x + <foo />
      return <bar />
    }
  """

describe "> children instead of braces", ->
  testCase """
    single line
    ---
    <div>
      >'Hello '
      > name |> .first
    ---
    <div>
      {'Hello '}
      { name.first}
    </div>
  """

  testCase """
    single-line if/else
    ---
    <div>
      >if greeting
        'Hello'
      else
        'Goodbye'
    ---
    <div>
      {(greeting?
        'Hello'
      :
        'Goodbye')}
    </div>
  """

  testCase """
    indented
    ---
    <div>
      Hello
      >
        {first, last} := name()
        ` ${first} ${last}`
      !
    ---
    <div>
      Hello
      {(()=>{ {
        const {first, last} = name()
        return ` ${first} ${last}`
      }})()}
      !
    </div>
  """

  testCase """
    indented from opening tag
    ---
    <div>>
      {first, last} := name()
      `Hello ${first} ${last}`
    ---
    <div>{(()=>{ {
      const {first, last} = name()
      return `Hello ${first} ${last}`
    }})()}
    </div>
  """

  testCase """
    implicit fragment
    ---
    <node>
    > if cond
      <sibling>
    ---
    <>
    <node />
    { (cond?
      <sibling />:void 0)}
    </>
  """
