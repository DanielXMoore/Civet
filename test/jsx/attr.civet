{testCase, throws} from ../helper.civet

describe "braced JSX attributes", ->
  testCase """
    regular strings are not braced
    ---
    <div class='foo bar' />
    ---
    <div class='foo bar' />
  """

  testCase """
    non-interpolated strings are not braced
    ---
    "civet coffeeInterpolation"
    <div class="foo bar" />
    ---
    <div class="foo bar" />
  """

  testCase '''
    interpolated strings are braced
    ---
    "civet coffeeInterpolation"
    <div class="foo #{bar}" />
    ---
    <div class={`foo ${bar}`} />
  '''

  testCase """
    triple-quoted strings are braced
    ---
    <div class='''hello 'world'.''' />
    ---
    <div class={`hello 'world'.`} />
  """

  testCase """
    backtick string interpolation is braced
    ---
    <div class=`foo ${bar}` />
    ---
    <div class={`foo ${bar}`} />
  """

  testCase """
    all PrimaryExpression types
    ---
    <Component n=null u=undefined t=true f=false i=100 bi=1_000_000n
     a=[1, 2, 3] o={a, b} id=foo r=/[a-zA-Z]+/
     t={`string ${interpolation}`} p=(if cond then 1 else 2) />
    ---
    <Component n={null} u={undefined} t={true} f={false} i={100} bi={1_000_000n}
     a={[1, 2, 3]} o={{a, b}} id={foo} r={/[a-zA-Z]+/}
     t={`string ${interpolation}`} p={((cond)? 1 : 2)} />
  """

  it "if expressions", ->
    throws """
      <Component c=if cond then 1 else 2 />
    """

  testCase """
    function calls
    ---
    <Component count=count() result=f(a, b, c) />
    ---
    <Component count={count()} result={f(a, b, c)} />
  """

  testCase """
    attribute access
    ---
    <Component x=a.b.c()?.d[e]?() />
    ---
    <Component x={a.b.c()?.d[e]?.()} />
  """

  testCase """
    ++ and --
    ---
    <Component post=foo++ pre=++foo />
    ---
    <Component post={foo++} pre={++foo} />
  """

  testCase """
    unary expressions
    ---
    <Component pos=+1 neg=-1 not=!true />
    ---
    <Component pos={+1} neg={-1} not={!true} />
  """

  testCase """
    binary expressions
    ---
    <Component sum=1+2+x calls=f()+g() />
    ---
    <Component sum={1+2+x} calls={f()+g()} />
  """

  it "binary expressions with spaces", ->
    throws """
      <Component sum=1 + 2 />
    """

describe "JSX computed attribute names", ->
  testCase """
    name and value
    ---
    <Component [x+y]=bar />
    ---
    <Component {...{[x+y]: bar}} />
  """

  testCase """
    just name
    ---
    <Component [x+y] />
    ---
    <Component {...{[x+y]: true}} />
  """
