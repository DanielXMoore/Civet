{testCase, throws} from ../helper.civet

describe "braced JSX attributes", ->
  testCase """
    regular strings are not braced
    ---
    <div class='foo bar' />
    ---
    <div class='foo bar' />
  """

  testCase """
    newlines in strings are preserved
    ---
    <div class='foo

    bar' />
    ---
    <div class='foo

    bar' />
  """

  testCase """
    non-interpolated strings are not braced
    ---
    "civet coffeeInterpolation"
    <div class="foo bar" />
    ---
    <div class="foo bar" />
  """

  testCase '''
    interpolated strings are braced
    ---
    "civet coffeeInterpolation"
    <div class="foo #{bar}" />
    ---
    <div class={`foo ${bar}`} />
  '''

  testCase """
    triple-quoted strings are braced
    ---
    <div class='''hello 'world'.''' />
    ---
    <div class={`hello 'world'.`} />
  """

  testCase """
    backtick string interpolation is braced
    ---
    <div class=`foo ${bar}` />
    ---
    <div class={`foo ${bar}`} />
  """

  testCase """
    all PrimaryExpression types
    ---
    <Component n=null u=undefined t=true f=false i=100 bi=1_000_000n
     a=[1, 2, 3] o={a, b} id=foo r=/[a-zA-Z]+/
     t={`string ${interpolation}`} p=(if cond then 1 else 2) />
    ---
    <Component n={null} u={undefined} t={true} f={false} i={100} bi={1_000_000n}
     a={[1, 2, 3]} o={{a, b}} id={foo} r={/[a-zA-Z]+/}
     t={`string ${interpolation}`} p={((cond? 1 : 2))} />
  """

  throws """
    if expressions
    ---
    <Component c=if cond then 1 else 2 />
    ---
    ParseError
  """

  testCase """
    function calls
    ---
    <Component count=count() result=f(a, b, c) />
    ---
    <Component count={count()} result={f(a, b, c)} />
  """

  testCase """
    attribute access
    ---
    <Component x=a.b.c()?.d[e]?() />
    ---
    <Component x={a.b.c()?.d[e]?.()} />
  """

  testCase """
    dynamic import attribute access
    ---
    <Component x=import('x').y />
    ---
    <Component x={import('x').y} />
  """

  testCase """
    glob
    ---
    <Component x=a{b, c} />
    ---
    <Component x={{b:a.b, c:a.c}} />
  """

  testCase """
    glob with complex left-hand side
    ---
    <Component {f()?.{nx,ny}}>
    ---
    let ref;<Component {...{nx:(ref = f())?.nx,ny:ref?.ny}} />
  """

  testCase """
    glob with complex left-hand side and more
    ---
    <Component {a, f()?.{nx,ny}, b}>
    ---
    let ref;<Component a={a} b={b} {...{ nx:(ref = f())?.nx,ny:ref?.ny,}} />
  """

  testCase """
    bind shorthand
    ---
    <Component x=a@b />
    ---
    <Component x={a.b.bind(a)} />
  """

  testCase """
    ++ and --
    ---
    <Component post=foo++ pre=++foo />
    ---
    <Component post={foo++} pre={++foo} />
  """

  testCase """
    unary expressions
    ---
    <Component pos=+1 neg=-1 not=!true />
    ---
    <Component pos={+1} neg={-1} not={!true} />
  """

  testCase """
    binary expressions
    ---
    <Component sum=1+2+x calls=f()+g() />
    ---
    <Component sum={1+2+x} calls={f()+g()} />
  """

  throws """
    binary expressions with spaces
    ---
    <Component sum=1 + 2 />
    ---
    ParseError
  """

  testCase """
    ...foo shorthand
    ---
    <Component ...foo ...bar />
    ---
    <Component {...foo} {...bar} />
  """

  testCase """
    value with whitespace / on its own line
    ---
    <Show keyed = true fallback =
      <div>Loading...
    >
    ---
    <Show keyed = {true} fallback ={
      <div>Loading...
      </div>}
     />
  """

  testCase """
    value with whitespace / on its own line, without indentation rule
    ---
    "civet coffeeJSX"
    <Show keyed = true fallback =
      <div>Loading...</div>
    />
    ---
    <Show keyed = {true} fallback =
      <div>Loading...</div>
    />
  """

describe "JSX computed attribute names", ->
  testCase """
    name and value
    ---
    <Component [x+y]=bar />
    ---
    <Component {...{[x+y]: bar}} />
  """

  testCase """
    just name
    ---
    <Component [x+y] />
    ---
    <Component {...{[x+y]: true}} />
  """

  testCase """
    template literal and value
    ---
    <Component `x${y}z`=bar />
    ---
    <Component {...{[`x${y}z`]: bar}} />
  """

  testCase """
    just template literal
    ---
    <Component `x${y}z` />
    ---
    <Component {...{[`x${y}z`]: true}} />
  """

describe "JSX @ attribute names", ->
  testCase """
    @name
    ---
    <Component @name />
    ---
    <Component name={this.name} />
  """

  testCase """
    @method
    ---
    <Component @method() />
    ---
    <Component method={this.method()} />
  """

  testCase """
    @.name
    ---
    <Component @.name />
    ---
    <Component name={this.name} />
  """

  testCase """
    @[computed]
    ---
    <Component @[computed] />
    ---
    <Component {...{[computed]: this[computed]}} />
  """

  testCase """
    complex @name
    ---
    <Component @method()?.value />
    ---
    <Component value={this.method()?.value} />
  """

  testCase """
    @@ bind
    ---
    <Component @@onClick />
    ---
    <Component onClick={this.onClick.bind(this)} />
  """

describe "JSX call expressions", ->
  testCase """
    call
    ---
    <Component foo() />
    ---
    <Component foo={foo()} />
  """

  testCase """
    access
    ---
    <Component foo.bar />
    ---
    <Component bar={foo.bar} />
  """

  testCase """
    bracket
    ---
    <Component foo[bar] />
    ---
    <Component {...{[bar]: foo[bar]}} />
  """

  testCase """
    bind
    ---
    <Component foo@bar />
    ---
    <Component bar={foo.bar.bind(foo)} />
  """

  testCase """
    complex
    ---
    <Component x!.y()?.z?() />
    ---
    <Component z={x!.y()?.z?.()} />
  """

  testCase """
    glob
    ---
    <Component props{a,b} />
    ---
    <Component a={props.a} b={props.b} />
  """

describe "JSX id shorthand", ->
  testCase """
    without space
    ---
    <div#foo/>
    ---
    <div id="foo"/>
  """

  testCase """
    with space
    ---
    <div #foo />
    ---
    <div id="foo" />
  """

  testCase """
    quoted string
    ---
    <div #'foo bar' />
    ---
    <div id='foo bar' />
  """

  testCase """
    triple quoted string
    ---
    <div #'''foo bar''' />
    ---
    <div id={`foo bar`} />
  """

  testCase """
    template literal
    ---
    <div #`foo ${bar}` />
    ---
    <div id={`foo ${bar}`} />
  """

  testCase '''
    braced expression
    ---
    <div #{foo bar} />
    ---
    <div id={foo(bar)} />
  '''

describe "JSX class shorthand", ->
  testCase """
    without space
    ---
    <div.foo/>
    ---
    <div.foo/>
  """

  testCase """
    with space
    ---
    <div .foo/>
    ---
    <div class="foo"/>
  """

  testCase """
    two classes without space
    ---
    <div .foo.bar/>
    ---
    <div class="foo bar"/>
  """

  testCase """
    two classes with space
    ---
    <div .foo .bar/>
    ---
    <div class="foo bar"/>
  """

  testCase """
    two classes, one single quoted
    ---
    <div .foo .'b"r'/>
    ---
    <div class='foo b"r'/>
  """

  testCase """
    two classes, both quoted
    ---
    <div ."f'o" .'b"r'/>
    ---
    <div class={"f'o b\\"r"}/>
  """

  testCase """
    short and long class
    ---
    <div .foo class={bar()} />
    ---
    <div class={["foo", bar()].filter(Boolean).join(" ")} />
  """

  testCase """
    short and long className
    ---
    <div .foo className={bar()} />
    ---
    <div className={["foo", bar()].filter(Boolean).join(" ")} />
  """

  testCase """
    react
    ---
    "civet react"
    <div .foo/>
    ---
    <div className="foo"/>
  """

  testCase """
    single dynamic class doesn't get wrapped in array
    ---
    <div .{myClass()} />
    ---
    <div class={(myClass()) || ""} />
  """

  testCase """
    single template class doesn't get ||
    ---
    <div .`w-${width}` />
    ---
    <div class={`w-${width}`} />
  """

  testCase """
    single braced template class doesn't get ||
    ---
    <div .{`w-${width}`} />
    ---
    <div class={`w-${width}`} />
  """

  testCase """
    mix #id and .class
    ---
    <div#id.foo/>
    ---
    <div class="foo" id="id"/>
  """

  testCase """
    big example
    ---
    <div#id.class1.class2.t-[5px].{myClass()} class={anotherClass}/>
    ---
    <div class={["class1 class2 t-[5px]", myClass(), anotherClass].filter(Boolean).join(" ")} id="id"/>
  """

  testCase """
    space between attribute and class shorthand
    ---
    <div x .y>
    ---
    <div class="y" x />
  """

  throws """
    requires space between attribute and class shorthand
    ---
    <div +x.y>
    ---
    ParseError
  """

describe "JSX LiveScript-like toggles", ->
  testCase """
    single toggle
    ---
    <div +draggable/>
    ---
    <div draggable={true}/>
  """

  testCase """
    multiple toggles
    ---
    <Component +draggable +enabled -visible !hidden/>
    ---
    <Component draggable={true} enabled={true} visible={false} hidden={false}/>
  """

describe "JSX object literal shorthand", ->
  testCase """
    props access
    ---
    <Component {props.name} />
    ---
    <Component name={props.name} />
  """

  testCase """
    signal access
    ---
    <Component {name()} />
    ---
    <Component name={name()} />
  """

  testCase """
    complex access
    ---
    <Component {x!.y()?.z?()} />
    ---
    <Component z={x!.y()?.z?.()} />
  """

  testCase """
    named property
    ---
    <Component {props[key]} />
    ---
    <Component {...{[key]: props[key]}} />
  """

  describe "indented attribute values", ->
    testCase """
      simple
      ---
      <div class=
        ['foo', 'bar'].join ' '
      style =
        stringify
          color: 'red'
          fontSize: '12px'
      >
        Hello
      ---
      <div class={
        ['foo', 'bar'].join(' ')}
      style ={
        stringify({
          color: 'red',
          fontSize: '12px',
        })}
      >
        Hello
      </div>
    """

    testCase """
      implicit fragment
      ---
      <Show
        when=
          if testing
            timer() > 10
          else
            loading()
        fallback =
          <img src="loading.gif">
          <div>Loading...</div>
      >
      ---
      <Show
        when={
          (testing?
            (timer() > 10)
          :
            loading())}
        fallback ={
          <>
          <img src="loading.gif" />
          <div>Loading...</div>
          </>}
       />
    """

    testCase """
      multiline literals
      ---
      <For each=
        . 1
        . 2
        . 3
      >
        <div style=
          background: "white"
          color: "black"
        >
      ---
      <For each={[
          1,
          2,
          3]}
      >
        <div style={{
          background: "white",
          color: "black",
        }}
         />
      </For>
    """
