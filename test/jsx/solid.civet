{testCase, throws} from ../helper.civet

describe "JSX for Solid", ->
  testCase """
    intrinsic tag
    ---
    "civet solid"
    <div />
    <a href="https://civet.dev/">Civet</a>
    ---
    import type { JSX as JSX } from 'solid-js';
    type IntrinsicElements<K extends keyof JSX.IntrinsicElements> =
      JSX.IntrinsicElements[K] extends JSX.DOMAttributes<infer T> ? T : unknown;
    (<div /> as any as IntrinsicElements<"div">)
    (<a href="https://civet.dev/">Civet</a> as any as IntrinsicElements<"a">)
  """

  testCase """
    client-only intrinsic tag
    ---
    "civet solid client"
    <div />
    <a href="https://civet.dev/">Civet</a>
    ---
    import type { JSX as JSX } from 'solid-js';
    type IntrinsicElements<K extends keyof JSX.IntrinsicElements> =
      JSX.IntrinsicElements[K] extends JSX.DOMAttributes<infer T> ? T : unknown;
    (<div /> as any as IntrinsicElements<"div">)
    (<a href="https://civet.dev/">Civet</a> as any as IntrinsicElements<"a">)
  """

  testCase """
    server-only intrinsic tag
    ---
    "civet solid server"
    <div />
    <a href="https://civet.dev/">Civet</a>
    ---
    (<div /> as any as string)
    (<a href="https://civet.dev/">Civet</a> as any as string)
  """

  testCase """
    client/server intrinsic tag
    ---
    "civet solid client server"
    <div />
    <a href="https://civet.dev/">Civet</a>
    ---
    import type { JSX as JSX } from 'solid-js';
    type IntrinsicElements<K extends keyof JSX.IntrinsicElements> =
      JSX.IntrinsicElements[K] extends JSX.DOMAttributes<infer T> ? T : unknown;
    (<div /> as any as string | IntrinsicElements<"div">)
    (<a href="https://civet.dev/">Civet</a> as any as string | IntrinsicElements<"a">)
  """

  testCase """
    component
    ---
    "civet solid"
    <Foo />
    <Foo.use />
    ---
    (<Foo /> as any as ReturnType<typeof Foo>)
    (<Foo.use /> as any as ReturnType<typeof Foo.use>)
  """

  testCase """
    empty fragment
    ---
    "civet solid"
    <></>
    ---
    (<></> as any as [])
  """

  testCase """
    whitespace fragment
    ---
    "civet solid"
    <>  </>
    ---
    (<>  </> as any as string)
  """

  testCase """
    empty expression fragment
    ---
    "civet solid"
    <>{}</>
    ---
    (<>{}</> as any as [])
  """

  testCase """
    whitespace expression fragment
    ---
    "civet solid"
    <>{  }</>
    ---
    (<>{  }</> as any as [])
  """

  testCase """
    expression fragment
    ---
    "civet solid"
    <>{foo.bar}</>
    ---
    (<>{foo.bar}</> as any as typeof foo.bar)
  """

  testCase """
    multiple strings
    ---
    "civet solid"
    <>hello
      world</>
    ---
    (<>hello
      world</> as any as string)
  """

  testCase """
    multiple tags
    ---
    "civet solid"
    <>
      <div/>
      <a href="https://civet.dev/">Civet</a>
    </>
    ---
    import type { JSX as JSX } from 'solid-js';
    type IntrinsicElements<K extends keyof JSX.IntrinsicElements> =
      JSX.IntrinsicElements[K] extends JSX.DOMAttributes<infer T> ? T : unknown;
    (<>
      <div/>
      <a href="https://civet.dev/">Civet</a>
    </> as any as [IntrinsicElements<"div">, IntrinsicElements<"a">])
  """

  testCase """
    multiple tags with whitespace
    ---
    "civet solid"
    <><div/> <a href="https://civet.dev/">Civet</a></>
    ---
    import type { JSX as JSX } from 'solid-js';
    type IntrinsicElements<K extends keyof JSX.IntrinsicElements> =
      JSX.IntrinsicElements[K] extends JSX.DOMAttributes<infer T> ? T : unknown;
    (<><div/> <a href="https://civet.dev/">Civet</a></> as any as [IntrinsicElements<"div">, string, IntrinsicElements<"a">])
  """

  testCase """
    everything
    ---
    "civet solid"
    <>
      <div/> {foo.bar} is <Component/>
    </>
    ---
    import type { JSX as JSX } from 'solid-js';
    type IntrinsicElements<K extends keyof JSX.IntrinsicElements> =
      JSX.IntrinsicElements[K] extends JSX.DOMAttributes<infer T> ? T : unknown;
    (<>
      <div/> {foo.bar} is <Component/>
    </> as any as [IntrinsicElements<"div">, string, typeof foo.bar, string, ReturnType<typeof Component>])
  """
