{testCase, throws} from ../helper.civet

describe "JSX", ->
  testCase """
    simple element
    ---
    <a href="https://danielx.net">DanielX.net</a>
    ---
    <a href="https://danielx.net">DanielX.net</a>
  """

  testCase """
    nested tags
    ---
    <p>
      <a href="https://www.reactjs.org"> link </a>
      <img src={user.avatarUrl}></img>
    </p>
    ---
    <p>
      <a href="https://www.reactjs.org"> link </a>
      <img src={user.avatarUrl}></img>
    </p>
  """

  testCase """
    self closing
    ---
    <a />
    ---
    <a />
  """

  testCase """
    fragment
    ---
    <>Hi</>
    ---
    <>Hi</>
  """

  testCase """
    multi-line fragment
    ---
    <>
      Hi {name}
      how are you?
    </>
    ---
    <>
      Hi {name}
      how are you?
    </>
  """

  testCase """
    expression
    ---
    <h1>{text}</h1>
    ---
    <h1>{text}</h1>
  """

  testCase """
    more complex expression
    ---
    <h1>{(x) < 10 ? "Hello" : "Goodbye"}</h1>
    ---
    <h1>{(x) < 10 ? "Hello" : "Goodbye"}</h1>
  """

  testCase """
    extended expressions
    ---
    <h1>{if x < 10 then "Hello" else "Goodbye"}</h1>
    ---
    <h1>{(x < 10)? "Hello" : "Goodbye"}</h1>
  """

  testCase """
    postfixed expressions
    ---
    <h1>{"Hello" if x < 10}</h1>
    ---
    <h1>{(x < 10)?"Hello":void 0}</h1>
  """

  testCase """
    extended expression attributes
    ---
    <h1 title={if x < 10 then "Hello" else "Goodbye"}/>
    ---
    <h1 title={(x < 10)? "Hello" : "Goodbye"}/>
  """

  testCase """
    postfixed expression attributes
    ---
    <h1 title={"Hello" if x < 10}/>
    ---
    <h1 title={(x < 10)?"Hello":void 0}/>
  """

  throws """
    throws with mismatched tags
    ---
    <h1>{text}</h2>
  """

  testCase """
    elements as attributes
    ---
    <Component sub=<div>Hello</div> self-close=<div/> frag=<>...</>/>
    ---
    <Component sub=<div>Hello</div> self-close=<div/> frag=<>...</>/>
  """

  testCase """
    type parameters
    ---
    <Component<number>><Child<string>/></Component>
    ---
    <Component<number>><Child<string>/></Component>
  """

  testCase """
    JS comments in braces
    ---
    <div>
      {/* This is a comment */}
      {// Another comment
      }
    </div>
    ---
    <div>
      {/* This is a comment */}
      {// Another comment
      }
    </div>
  """

  testCase """
    JS comments ignored outside braces
    ---
    <div>
      /* This is a comment
      // </div>
    ---
    <div>
      /* This is a comment
      // </div>
    """

  testCase """
    JS comments ignored outside braces, Coffee JSX mode
    ---
    "civet coffeeJSX"
    <div>
      /* This is a comment
      // </div>
    ---
    <div>
      /* This is a comment
      // </div>
    """

describe "JSX XML comments", ->
  testCase """
    basic usage
    ---
    <div>
      <!-- This is a comment -->
    </div>
    ---
    <div>
      {/* This is a comment */}
    </div>
  """

  testCase """
    escaping
    ---
    <div>
      <!-- This is a /* comment */ -->
    </div>
    ---
    <div>
      {/* This is a /* comment * / */}
    </div>
  """

  testCase """
    nested function body
    ---
    <For each=characters>
      (character) =>
        []
        .filter Boolean
        .join ' '
    ---
    <For each={characters}>
      {(character) => {
        return []
        .filter(Boolean)
        .join(' ')
      }}
    </For>
  """

  testCase """
    nested function body with function
    ---
    <For each=characters>
      (character) =>
        function transform
          []
          .filter Boolean
          .join ' '
    ---
    <For each={characters}>
      {(character) => {
        return function transform() {
          return []
          .filter(Boolean)
          .join(' ')
        }
      }}
    </For>
  """

  testCase """
    implicit div
    ---
    <.app>
    ---
    <div class="app" />
  """

  testCase """
    config implicit default element
    ---
    "civet defaultElement=span"
    <.app>
    ---
    <span class="app" />
  """
