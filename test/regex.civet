{testCase, throws} from ./helper.civet

describe "regexp", ->
  testCase """
    flags
    ---
    /abc/suy
    ---
    /abc/suy
  """

  testCase """
    escapes
    ---
    /\\u200C/
    ---
    /\\u200C/
  """

  testCase """
    classes
    ---
    /[ab]/
    ---
    /[ab]/
  """

  testCase """
    space plus
    ---
    / +/
    ---
    / +/
  """

  testCase """
    escapes
    ---
    /\\\\/g
    ---
    /\\\\/g
  """

  testCase """
    examples
    ---
    /(?:\\p{ID_Continue}|[\\u200C\\u200D$])*/
    ---
    /(?:\\p{ID_Continue}|[\\u200C\\u200D$])*/
  """

  it "throws when regexp is actually unclosed comment", ->
    throws """
      /*/
    """

  describe "don't parse as implicit function arguments", ->
    testCase """
      implicit function arguments
      ---
      Math.floor x / y / 2
      Math.floor (x / y) / 2
      Math.floor x / y // comment
      ---
      Math.floor(x / y / 2)
      Math.floor((x / y) / 2)
      Math.floor(x / y) // comment
    """

  describe "heregex", ->
    testCase """
      basic
      ---
      ///abc///
      ---
      /abc/
    """

    testCase """
      flags
      ---
      ///abc///g
      ---
      /abc/g
    """

    testCase """
      escapes
      ---
      ///\\u200C///
      ---
      /\\u200C/
    """

    testCase """
      strips whitespace
      ---
      ///  abc  ///
      ---
      /abc/
    """

    testCase """
      escapes single slashes
      ---
      /// / ///
      ---
      /\\//
    """

    testCase """
      escaped space
      ---
      ///\\ ///
      ---
      / /
    """

    testCase """
      escaped newline
      ---
      ///\\\n///
      ---
      /\\n/
    """

    testCase """
      space in character class
      ---
      ///[ ]///
      ---
      /[ ]/
    """

    testCase """
      comment in character class
      ---
      ///[/*]///
      ---
      /[/*]/
    """

    testCase """
      coffee comment in character class
      ---
      ///[ # hey ]///
      ---
      /[ # hey ]/
    """

    testCase """
      JS comment
      ---
      ///
        abb // hey
      ///
      ---
      /abb/
    """

    testCase '''
      substitutions
      ---
      ///#{a}///
      ---
      RegExp(`${a}`)
    '''

    testCase '''
      substitutions escape backticks
      ---
      ///
       `#{a}
      ///
      ---
      RegExp(`\\`${a}`)
    '''

    testCase '''
      allows both kinds of substitutions
      ---
      ///
        ${yo}
        $ { x }
        #{a}
      ///
      ---
      RegExp(`${yo}\\${x}${a}`)
    '''

    testCase '''
      escaped bracket
      ---
      ///
        \\[
      ///
      ---
      /\\[/
    '''

    testCase '''
      escaped bracket with substitution
      ---
      ///
        \\[#{a}]
      ///
      ---
      RegExp(`\\\\[${a}]`)
    '''

    testCase '''
      substitutions keep flags
      ---
      ///
        x#{a}
      ///g
      ---
      RegExp(`x${a}`, "g")
    '''

    // NOTE: Added escapes for '#' to work around https://github.com/jashkenas/coffeescript/issues/5428
    testCase '''
      coffee script's heregex
      ---
      /// ^
        (?:
            # Match any character, except those that need special handling below.
            [^\\\\/\\#\\s]
            # Match `\\` followed by any character.
          | \\\\[\\s\\S]
            # Match any `/` except `///`.
          | /(?!\\/\\/)
            # Match `#` which is not part of interpolation, e.g. `#{}`.
          | \\#(?!\\{)
            # Comments consume everything until the end of the line, including `///`.
          | \\s+(?:\\#(?!\\{).*)?
        )*
      ///
      ---
      /^(?:[^\\\\/\\#\\s]|\\\\[\\s\\S]|\\/(?!\\/\\/)|\\#(?!\\{)|\\s+(?:\\#(?!\\{).*)?)*/
    '''
