{testCase} from ./helper.civet

describe "await expression", ->
  testCase """
    basic
    ---
    await x
    ---
    await x
  """

  testCase """
    repeated
    ---
    await await x
    ---
    await await x
  """

  testCase """
    await op
    ---
    await.all [get(1), get(2)]
    ---
    await Promise.all([get(1), get(2)])
  """

  testCase """
    await with parens
    ---
    await.race(doIt())
    ---
    await Promise.race(doIt())
  """

  testCase """
    await with indentation and expressionized statement
    ---
    await.all
      for item of array
        async do
          await item.process()
    ---
    await Promise.all(
      (()=>{const results=[];for (const item of array) {
        results.push((async ()=>{{
          return await item.process()
        }})())
      }return results})(),)
  """

  testCase """
    await with bulleted list
    ---
    await
      . a
      . b
    ---
    [
        await a,
        await b]
  """

  testCase """
    await with multiple indented arguments
    ---
    await
      a
      b
    ---
    [await (
      a),await (
      b),]
  """

  testCase """
    await op with bulleted list
    ---
    await.all
      . a
      . b
    ---
    await Promise.all( [
        a,
        b])
  """

  testCase """
    await op with multiple indented arguments
    ---
    await.all
      a
      b
    ---
    await Promise.all([
      a,
      b,])
  """

  testCase """
    await with multiple indented arguments and commas
    ---
    await
      a, b
      c, d
    ---
    [await (
      a),await  b,await (
      c),await  d,]
  """
