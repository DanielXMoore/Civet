{testCase, evalsTo, wrapper} from ./helper.civet

describe "binary operations", ->
  testCase """
    bitwise shift
    ---
    a << b
    a >> b
    a >>> b
    ---
    a << b
    a >> b
    a >>> b
  """

  testCase """
    multiplicative
    ---
    a * b
    a / b
    a % b
    ---
    a * b
    a / b
    a % b
  """

  testCase """
    positive modulo
    ---
    a %% b
    ---
    var modulo: (a: number, b: number) => number = (a, b) => (a % b + b) % b;
    modulo(a, b)
  """

  testCase """
    positive modulo not relational
    ---
    a %% b %% c
    ---
    var modulo: (a: number, b: number) => number = (a, b) => (a % b + b) % b;
    modulo(modulo(a, b), c)
  """

  testCase """
    additive
    ---
    a + b
    a - b
    ---
    a + b
    a - b
  """

  testCase """
    relational
    ---
    a < b
    a > b
    a <= b
    a >= b
    a == b
    a === b
    a != b
    a !== b
    a <? b
    a !<? b
    ---
    a < b
    a > b
    a <= b
    a >= b
    a == b
    a === b
    a != b
    a !== b
    a instanceof b
    !(a instanceof b)
  """

  testCase """
    snug <
    ---
    x<y
    x<y>z
    ---
    x<y
    x<y && y>z
  """

  testCase """
    snug < with literal
    ---
    x<y
    x<y>0
    ---
    x<y
    x<y && y>0
  """

  testCase """
    typeof shorthand
    ---
    a <? "string"
    a !<? "string"
    a instanceof "string"
    a not instanceof "string"
    a !instanceof "string"
    ---
    typeof a === "string"
    typeof a !== "string"
    typeof a === "string"
    typeof a !== "string"
    typeof a !== "string"
  """

  testCase """
    converts is to ===
    ---
    a is b
    ---
    a === b
  """

  testCase """
    converts is not to !==
    ---
    a is not b
    ---
    a !== b
  """

  describe "objectIs", ->
    testCase """
      converts is to Object.is
      ---
      "civet objectIs"
      a is b
      ---
      var is: { <B, A extends B> (a: A, b: B): b is A, <A, B> (a: A, b: B): a is A & B } = Object.is as any;
      is(a, b)
    """

    testCase """
      converts is not to !Object.is
      ---
      "civet objectIs"
      a is not b
      ---
      var is: { <B, A extends B> (a: A, b: B): b is A, <A, B> (a: A, b: B): a is A & B } = Object.is as any;
      !is(a, b)
    """

    testCase """
      Object.is adds as const for boolean literals
      ---
      "civet objectIs"
      a is true
      ---
      var is: { <B, A extends B> (a: A, b: B): b is A, <A, B> (a: A, b: B): a is A & B } = Object.is as any;
      is(a, true as const)
    """

    testCase """
      Object.is adds as const for numeric literals
      ---
      "civet objectIs"
      a is 0
      ---
      var is: { <B, A extends B> (a: A, b: B): b is A, <A, B> (a: A, b: B): a is A & B } = Object.is as any;
      is(a, 0 as const)
    """

    testCase """
      Object.is adds as const for string literals
      ---
      "civet objectIs"
      a is "hello"
      ---
      var is: { <B, A extends B> (a: A, b: B): b is A, <A, B> (a: A, b: B): a is A & B } = Object.is as any;
      is(a, "hello" as const)
    """

    testCase """
      Object.is does not add as const for null literals
      ---
      "civet objectIs"
      a is null is undefined
      ---
      var is: { <B, A extends B> (a: A, b: B): b is A, <A, B> (a: A, b: B): a is A & B } = Object.is as any;
      is(a, null) && is(null, undefined)
    """

    testCase """
      Object.is precedence
      ---
      "civet objectIs"
      a % 2 is 0 is not b*c+d
      ---
      var is: { <B, A extends B> (a: A, b: B): b is A, <A, B> (a: A, b: B): a is A & B } = Object.is as any;
      is(a % 2, 0 as const) && !is(0 as const, b*c+d)
    """

  testCase """
    in operator
    ---
    a in b
    ---
    a in b
  """

  testCase """
    not in operator
    ---
    a not in b
    ---
    !(a in b)
  """

  testCase """
    !in operator
    ---
    a !in b
    ---
    !(a in b)
  """

  testCase """
    not in after logical
    ---
    v and v.type is not in ["CallExpression", "MemberExpression", "Identifier"]
    ---
    v && !["CallExpression", "MemberExpression", "Identifier"].includes(v.type)
  """

  describe "branded", ->
    wrapper """
      class X {
        #a = 0
        f() {
          CODE
        }
      }
    """

    testCase """
      branded in
      ---
      #a in b
      ---
      #a in b
    """

    testCase """
      branded not in
      ---
      #a not in b
      ---
      !(#a in b)
    """

  testCase """
    is in operator
    ---
    a is in b
    ---
    b.includes(a)
  """

  testCase """
    is not in operator
    ---
    a is not in b
    ---
    !b.includes(a)
  """

  testCase """
    is !in operator
    ---
    a is !in b
    ---
    !b.includes(a)
  """

  testCase """
    Unicode is in operator
    ---
    a ∈ b ∉ c ∋ d ∌ e
    ---
    b.includes(a) && !c.includes(b) && c.includes(d) && !d.includes(e)
  """

  testCase """
    is in precedence
    ---
    a+b is in c*d
    ---
    (c*d).includes(a+b)
  """

  testCase """
    is in chaining
    ---
    a+b is in c*d is in e%f+g
    ---
    (c*d).includes(a+b) && (e%f+g).includes(c*d)
  """

  testCase """
    is in long chains
    ---
    x+y+z is in a is in b
    ---
    a.includes(x+y+z) && b.includes(a)
  """

  testCase """
    ++ operator
    ---
    a ++ b
    ---
    a.concat(b)
  """

  testCase """
    Unicode ++ operator
    ---
    a ⧺ b
    ---
    a.concat(b)
  """

  testCase """
    tight ++ operator
    ---
    a++b
    ---
    a.concat(b)
  """

  testCase """
    tight Unicode ++ operator
    ---
    a⧺b
    ---
    a.concat(b)
  """

  testCase """
    ++ chain
    ---
    0 ++ [1,2,3]++4
    ---
    0..concat([1,2,3]).concat(4)
  """

  testCase """
    bitwise
    ---
    a | b
    a & b
    a ^ b
    ---
    a | b
    a & b
    a ^ b
  """

  testCase """
    logical
    ---
    a || b
    a or b
    a && b
    a and b
    a ?? b
    ---
    a || b
    a || b
    a && b
    a && b
    a ?? b
  """

  testCase """
    multiple logical
    ---
    a || b || c
    a && b && c
    a || b && c
    a && b || c
    ---
    a || b || c
    a && b && c
    a || b && c
    a && b || c
  """

  testCase """
    xor
    ---
    a^^b
    a ^^ b
    a xor b
    a^^=b
    ---
    type Falsy = false | 0 | '' | 0n | null | undefined;
    var xor: <A, B>(a: A, b: B) => A extends Falsy ? B : B extends Falsy ? A : (false | (A & Falsy extends never ? never : B) | (B & Falsy extends never ? never : A)) = (a, b) => (a ? !b && a : b) as any;
    xor(a,b)
    xor(a, b)
    xor(a, b)
    a=xor(a, b)
  """

  it "xor correct", ->
    evalsTo "'x' xor 'y'", false
    evalsTo "'x' xor ''", 'x'
    evalsTo "'' xor 'x'", 'x'
    evalsTo "'' xor 0", 0
    evalsTo "0 xor ''", ''

  testCase """
    xnor
    ---
    a!^b
    a!^^b
    a !^ b
    a !^^ b
    a xnor b
    ---
    type Falsy = false | 0 | '' | 0n | null | undefined;
    var xnor: <A, B>(a: A, b: B) => A & Falsy extends never ? B : (true | (B extends Falsy ? never : A) | (A extends Falsy ? never : B)) = (a, b) => (a ? b : !b || a) as any;
    xnor(a,b)
    xnor(a,b)
    xnor(a, b)
    xnor(a, b)
    xnor(a, b)
  """

  it "xnor correct", ->
    evalsTo "'x' xnor 'y'", 'y'
    evalsTo "'x' xnor ''", ''
    evalsTo "'' xnor 'x'", ''
    evalsTo "'' xnor 0", true
    evalsTo "0 xnor ''", true

  testCase """
    xor precedence
    ---
    a < b xor c < d
    a * b xor c < d xor e + f
    a and b xor c and d
    a or b xor c or d
    a is in b xor c is in d
    ---
    type Falsy = false | 0 | '' | 0n | null | undefined;
    var xor: <A, B>(a: A, b: B) => A extends Falsy ? B : B extends Falsy ? A : (false | (A & Falsy extends never ? never : B) | (B & Falsy extends never ? never : A)) = (a, b) => (a ? !b && a : b) as any;
    xor(a < b, c < d)
    xor(xor(a * b, c < d), e + f)
    xor(a && b, c && d)
    a || xor(b, c) || d
    xor(b.includes(a), d.includes(c))
  """

  testCase """
    weird spacing
    ---
    a
        + 123
     /*heyy*/    + 1

           + b
    ---
    a
        + 123
     /*heyy*/    + 1

           + b
  """

  testCase """
    snug newline
    ---
    a+
    b
    ---
    a+
    b
  """

  testCase """
    spaced newline
    ---
    a +
    b
    ---
    a +
    b
  """

  // #598
  testCase """
    nested after binary op
    ---
    name := optionalName ??
      if loaded
        file.name
      else
        throw new Error
    ---
    const name = optionalName ??
      (loaded?(
        file.name
      )
      :(
        (()=>{throw new Error})()
      ))
  """

  testCase """
    throw expression in logical or binary op
    ---
    a or throw new Error
    ---
    a || (()=>{throw new Error})()
  """

  testCase """
    await in throw expression
    ---
    a or throw await makeError()
    ---
    a || (await (async ()=>{throw await makeError()})())
  """

  testCase """
    late assignments
    ---
    x = 3 + y = 2 + z = 1
    ---
    x = 3 + (y = 2 + (z = 1))
  """

  testCase """
    instanceof
    ---
    a instanceof b
    ---
    a instanceof b
  """

  testCase """
    not instanceof
    ---
    a not instanceof b
    ---
    !(a instanceof b)
  """

  testCase """
    !instanceof
    ---
    a !instanceof b
    ---
    !(a instanceof b)
  """

  testCase """
    comma operator outside parens
    ---
    f(), g()
    ---
    f(), g()
  """

  testCase """
    comma operator in parens
    ---
    (f(), g())
    ---
    (f(), g())
  """

  testCase """
    Unicode computation
    ---
    (a « b » c ⋙ d ‖ e) ⁇ f
    ---
    (a << b >> c >>> d || e) ?? f
  """

  testCase """
    Unicode relations
    ---
    a ≤ b ≥ c ≠ d ≢ e ≡ f ≣ g
    ---
    a <= b && b >= c && c != d && d !== e && e == f && f === g
  """

describe "custom identifier infix operators", ->
  testCase """
    bless
    ---
    operator foo
    a foo b
    a bar b
    ---

    foo(a, b)
    a(bar(b))
  """

  testCase """
    chain
    ---
    operator foo
    a foo b foo c
    ---

    foo(foo(a, b), c)
  """

  testCase """
    chain over multiple lines
    ---
    operator foo
    a
      foo b
      foo c
    ---


      foo(
      foo(a, b), c)
  """

  testCase """
    use operator as leading function
    ---
    operator foo
    foo a, b
    foo c, d
    ---

    foo(a, b)
    foo(c, d)
  """

  testCase """
    use operator as function
    ---
    operator foo
    a foo foo(b, c)
    ---

    foo(a, foo(b, c))
  """

  testCase """
    multiple bless
    ---
    operator foo, bar
    a foo b bar c
    ---

    bar(foo(a, b), c)
  """

  testCase """
    function operator
    ---
    operator min(a, b)
      Math.min a, b
    a min b
    ---
    function min(a, b) {
      return Math.min(a, b)
    }
    min(a, b)
  """

  testCase """
    operator function operator
    ---
    operator function min(a, b)
      Math.min a, b
    a min b
    ---
    function min(a, b) {
      return Math.min(a, b)
    }
    min(a, b)
  """

  testCase """
    function operator with types
    ---
    operator min(a: number, b: number): number
      Math.min a, b
    a min b
    ---
    function min(a: number, b: number): number {
      return Math.min(a, b)
    }
    min(a, b)
  """

  testCase """
    function operator with braces
    ---
    operator min(a, b) {
      Math.min a, b
    }
    a min b
    ---
    function min(a, b) {
      return Math.min(a, b)
    }
    min(a, b)
  """

  testCase """
    export function operator
    ---
    export operator min(a, b)
      Math.min a, b
    a min b
    ---
    export function min(a, b) {
      return Math.min(a, b)
    }
    min(a, b)
  """

  testCase """
    let operator
    ---
    operator let min = Math.min, max = Math.max
    a min b max c
    ---
    let min = Math.min, max = Math.max
    max(min(a, b), c)
  """

  testCase """
    const operator
    ---
    operator const {min, max} = Math
    a min b max c
    ---
    const {min, max} = Math
    max(min(a, b), c)
  """

  testCase """
    const shorthand operator
    ---
    operator {min, max} := Math
    a min b max c
    ---
    const {min, max} = Math
    max(min(a, b), c)
  """

  testCase """
    import operator
    ---
    import { operator min, max } from 'ops'
    a min b max c
    ---
    import { min, max } from 'ops'
    min(a, b(max(c)))
  """

  testCase """
    import operators
    ---
    import { operator min, operator max } from 'ops'
    a min b max c
    ---
    import { min, max } from 'ops'
    max(min(a, b), c)
  """

  testCase """
    operator in parens acts as function
    ---
    operator foo
    x (foo) y
    ---

    x(foo(y))
  """

  testCase """
    not operator
    ---
    operator foo
    x not foo y
    ---

    !foo(x, y)
  """

  testCase """
    ! operator
    ---
    operator foo
    x !foo y
    ---

    !foo(x, y)
  """
