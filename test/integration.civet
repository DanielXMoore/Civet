fs from fs

{compile as civetCompile} from ../source/main.coffee

Hera from ../source/parser.hera
{parse} := Hera
gen from ../source/generate.coffee

assert from assert

CoffeeScript from coffeescript

{convert} from ../source/coffee2civet.civet

compile := (src: string) ->
  return Function gen (parse src), {}

describe "integration", ->
  // TODO: CoffeeScript single line comments
  it.skip "should parse CoffeeScript 2 files", ->
    src := fs.readFileSync("integration/example/util.coffee", "utf8")

    assert compile(src)

  it "should sourcemap complex civet files", ->
    src := fs.readFileSync("integration/example/compiler.civet", "utf8")

    assert civetCompile(src, { sourceMap: true, filename: "integration/example/compiler.civet" })

describe "convert coffee ast to civet", ->
  it.skip "converts", ->
    src := fs.readFileSync("integration/example/generate.coffee", "utf8")
    coffeeAst := CoffeeScript.nodes(src).ast({})
    console.log convert(coffeeAst)
