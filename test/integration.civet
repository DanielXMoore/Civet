fs from fs

{compile as civetCompile} from ../source/main.civet

Hera from ../source/parser.hera
{parse} := Hera
gen from ../source/generate.civet

assert from assert
{ exec } from child_process

compile := (src: string) ->
  return Function gen (parse src), {}

execCmd := (cmd: string) ->
  new Promise (resolve, reject) ->
    exec cmd, (err, stdout, _stderr) ->
      if err
        reject err
      else
        resolve stdout

describe "integration", ->
  // TODO: CoffeeScript single line comments
  it.skip "should parse CoffeeScript 2 files", ->
    src := fs.readFileSync("integration/example/util.coffee", "utf8")

    assert compile(src)

  it "should sourcemap complex civet files", ->
    src := fs.readFileSync("integration/example/compiler.civet", "utf8")

    assert civetCompile(src, { sourceMap: true, filename: "integration/example/compiler.civet" })

  it "should build with esbuild plugin and have the correct source map info", ->
    await execCmd "(cd integration/example && ../../dist/civet build.civet)"
    data := JSON.parse(fs.readFileSync("integration/example/dist/main.js.map", "utf8"))

    assert.equal data.sources[0], "main.civet"
