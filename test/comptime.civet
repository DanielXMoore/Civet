{ testCase, throws } from ./helper.civet
{ compile } from ../source/main.civet
{ serialize } from ../source/parser/comptime.civet
assert from assert

declare global
  var outside: number

describe "comptime", ->
  testCase """
    statement with indented block
    ---
    comptime
      x := 5
      x * x
    ---

  """

  testCase """
    one-line statement
    ---
    comptime x := 5
    ---

  """

  it "statement has side effect", =>
    global.outside = 0
    compile "comptime global.outside = 7"
    assert.equal global.outside, 7

  testCase """
    one-line expression
    ---
    value := comptime 1+2
    ---
    const value = 3
  """

  testCase """
    expression with indented block
    ---
    value := comptime
      x := 5
      x * x
    ---
    const value = 25
  """

describe "serialize", ->
  it "numbers", =>
    assert.equal serialize(1), "1"
    assert.equal serialize(1.5), "1.5"
    assert.equal serialize(Infinity), "Infinity"
    assert.equal serialize(-Infinity), "-Infinity"
    assert.equal serialize(NaN), "NaN"
  it "arrays and nulls", =>
    assert.equal serialize([1, undefined, 3, null]), "[1,undefined,3,null]"
  it "strings", =>
    assert.equal serialize('Hello, "world"!'), '"Hello, \\"world\\"!"'
  it "symbols", =>
    assert.equal serialize(Symbol.for 'MyKeyedSymbol'),
      'Symbol.for("MyKeyedSymbol")'
    assert.throws => serialize Symbol()
  it "regexps", =>
    assert.equal serialize(/a[b\s]c/), "/a[b\\s]c/"
    assert.equal serialize(/abc/gi), "/abc/gi"
  it "dates", =>
    assert.equal serialize(new Date(1659916697000)), 'new Date(1659916697000)'
  it "objects", =>
    assert.equal serialize(foo: true, bar: baz: false),
      '{"foo":true,"bar":{"baz":false}}'
  it "Sets", =>
    assert.equal serialize(new Set([1, 2, 3])), "new Set([1,2,3])"
  it "Maps", =>
    assert.equal serialize(new Map([["a", 1], ["b", 2], ["c", 3]])),
      'new Map([["a",1],["b",2],["c",3]])'
  it "custom classes", =>
    class Foo {}
    assert.throws => serialize new Foo()
  it "arrow functions", =>
    assert.equal serialize((x: ???) => x), "(x) => x"
  it "regular functions", =>
    assert.equal serialize((x: ???) -> x), "function (x) { return x; }"
  it "functions with properties", =>
    func: any := (x: ???) => x
    func.a = 1
    assert.throws => serialize func
  it "native functions", =>
    assert.throws => serialize parseInt
  it "circular", =>
    object: any := {}
    object.circular = object
    assert.throws => serialize object
    array: any := []
    array.push array
    assert.throws => serialize array
  it "aliasing", =>
    inner: never[] := []
    outer := [inner, inner]
    assert.equal serialize(outer), "[[],[]]"
