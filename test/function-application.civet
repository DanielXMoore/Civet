{testCase} from ./helper.civet

describe "function application", ->
  testCase """
    basic
    ---
    f x
    ---
    f(x);
  """

  testCase """
    chained
    ---
    f(x)(7)
    ---
    f(x)(7);
  """

  testCase """
    spaced associative
    ---
    a b c
    ---
    a(b(c));
  """

  testCase """
    spaced associative with parens
    ---
    (a b) c
    a (b c)
    ---
    (a(b))(c);
    a((b(c)));
  """

  testCase """
    arguments on separate lines
    ---
    const config2 = ts.parseJsonConfigFileContent(
      config,
      ts.sys,
      currentProjectPath,
      existingOptions,
      tsConfigPath,
      undefined,
    )
    ---
    const config2 = ts.parseJsonConfigFileContent(
      config,
      ts.sys,
      currentProjectPath,
      existingOptions,
      tsConfigPath,
      undefined,
    );
  """

  testCase """
    arguments on separate lines, optional commas
    ---
    const config2 = ts.parseJsonConfigFileContent(
      config
      ts.sys
      currentProjectPath,
      existingOptions
      tsConfigPath,
      undefined
    )
    ---
    const config2 = ts.parseJsonConfigFileContent(
      config,
      ts.sys,
      currentProjectPath,
      existingOptions,
      tsConfigPath,
      undefined,
    );
  """

  testCase """
    arguments on separate lines, multiple arguments per line
    ---
    const config2 = ts.parseJsonConfigFileContent(
      config, ts.sys
      currentProjectPath,
      existingOptions
      tsConfigPath, undefined
    )
    ---
    const config2 = ts.parseJsonConfigFileContent(
      config, ts.sys,
      currentProjectPath,
      existingOptions,
      tsConfigPath, undefined,
    );
  """

  testCase """
    tailing call after spaced application end of line
    ---
    readFile x
    .then -> y
    .catch -> z
    ---
    readFile(x)
    .then(function() { return y })
    .catch(function() { return z });
  """

  testCase """
    nested tailing call
    ---
    readFile(x
      .getThing().wat
      .asFile()
    )
    .then -> y
    .catch -> z
    ---
    readFile(x
      .getThing().wat
      .asFile()
    )
    .then(function() { return y })
    .catch(function() { return z });
  """

  describe.skip "TODO", ->
    // NOTE: CoffeeScript does not support this syntax, it closes to the first function to `readfile(x).getThing().wat.asFile()`
    testCase """
      nested tailing call
      ---
      readFile x
        .getThing().wat
        .asFile()
      .then -> y
      .catch -> z
      ---
      readFile(x
        .getThing().wat
        .asFile())
      .then(function() { return y })
      .catch(function() { return z });
    """

  testCase """
    nested object with explicit braces as second argument
    ---
    readFile x, {
      a: b
      c: d
    }
    ---
    readFile(x, {
      a: b,
      c: d
    });
  """

  testCase """
    nested object with implied braces as second argument
    ---
    readFile x,
      a: b
      c: d
    ---
    readFile(x, {
      a: b,
      c: d,
    });
  """

  testCase """
    single nested object with explicit braces as argument
    ---
    f({
      a: 1
    })
    ---
    f({
      a: 1
    });
  """

  testCase """
    single nested object with implied braces as argument
    ---
    f(
      a: 1
    )
    ---
    f( {
      a: 1,
    }
    );
  """

  testCase """
    two nested objects with implied braces as arguments
    ---
    f(
      a: 1
    ,
      b: 2
    )
    ---
    f( {
      a: 1,
    }
    , {
      b: 2,
    }
    );
  """

  testCase """
    function call with single nested object param
    ---
    sourceMapSupport
      environment: 'node'
    ---
    sourceMapSupport( {
      environment: 'node',
    });
  """

  testCase """
    function call with two comma separated nested object params
    ---
    sourceMapSupport
      environment: 'node'
    ,
      handleUncaughtExceptions: false
    ---
    sourceMapSupport( {
      environment: 'node',
    }
    , {
      handleUncaughtExceptions: false,
    });
  """

  testCase """
    tailing call after end of line function application with parens
    ---
    readFile(x)
    .then -> y
    .catch -> z
    ---
    readFile(x)
    .then(function() { return y })
    .catch(function() { return z });
  """

  testCase """
    tailing call after end of line function application with parens (multi nesting)
    ---
    readFile ->
      fetch(url)
      .then (result) ->
        result.json()
        .then transform
        .catch (e) ->
          fetch(altUrl)
          .then (result) ->
            result.json()
            .then transform
            .catch (e) ->
              console.log(e)
              throw e
      .catch (e) ->
        return
    .then -> y
    .catch -> z
    ---
    readFile(function() {
      return fetch(url)
      .then(function(result) {
        return result.json()
        .then(transform)
        .catch(function(e) {
          return fetch(altUrl)
          .then(function(result) {
            return result.json()
            .then(transform)
            .catch(function(e) {
              console.log(e);
              throw e;
            });
          });
        });
      })
      .catch(function(e) {
        return;
      });
    })
    .then(function() { return y })
    .catch(function() { return z });
  """
