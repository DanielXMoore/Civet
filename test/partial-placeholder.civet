{ testCase, throws } from ./helper.civet

describe "partial placeholder", ->
  testCase """
    first arg
    ---
    f ., a
    ---
    $ => f($, a)
  """

  testCase """
    second arg
    ---
    f a, .
    ---
    $ => f(a, $)
  """

  testCase """
    both args
    ---
    f ., .
    ---
    $ => f($, $)
  """

  testCase """
    null chained call
    ---
    f()?.g?.().h ., x
    ---
    $ => f()?.g?.().h($, x)
  """

  testCase """
    not last call in chain
    ---
    f(a)(b)(.)(c)(d)
    ---
    ($ => f(a)(b)($))(c)(d)
  """

  testCase """
    object value
    ---
    f a: .
    ---
    $ => f({a: $})
  """

  testCase """
    object key
    ---
    f [.]: a
    f {[.]: a}
    ---
    $ => f({[$]: a});
    $1 => f({[$1]: a})
  """

  testCase """
    complex nested object and array
    ---
    f a: [ x, b: . ]
    ---
    $ => f({a: [ x, {b: $} ]})
  """

  testCase """
    nested call
    ---
    f .(a, b)
    f . a, b
    ---
    $ => f($(a, b));
    $1 => f($1(a, b))
  """

  testCase """
    double nested call with
    ---
    f .(a, .)
    ---
    $ => f($1 => $(a, $1))
  """

  testCase """
    array
    ---
    f [ . ]
    ---
    $ => f([ $ ])
  """

  testCase """
    leading unary op
    ---
    x.filter !Array.isArray .
    ---
    x.filter($ => !Array.isArray($))
  """

  testCase """
    new
    ---
    new X .
    ---
    $ => new X($)
  """

  testCase """
    not last call in new chain
    ---
    new T(a)(b)(.)(c)(d)
    ---
    ($ => new T(a)(b)($))(c)(d)
  """

  testCase """
    in larger expression
    ---
    1 + f ., a
    ---
    1 + ($ => f($, a))
  """

  describe "must be inside call exp", ->
    throws """
      as call
      ---
      a + . b
      ---
      ParseErrors: unknown:1:5 Partial placeholder . outside of call expression
    """

    throws """
      object
      ---
      a: .
      ---
      ParseErrors: unknown:1:3 Partial placeholder . outside of call expression
    """

    throws """
      object key
      ---
      .: a
      ---
      ParseErrors: unknown:1:1 Partial placeholder . outside of call expression
    """

    throws """
      array
      ---
      [ . ]
      ---
      ParseErrors: unknown:1:2 Partial placeholder . outside of call expression
    """

    throws """
      unary op
      ---
      !.
      ---
      ParseErrors: unknown:1:2 Partial placeholder . outside of call expression
    """

    throws """
      binary op
      ---
      . + 1
      ---
      ParseErrors: unknown:1:1 Partial placeholder . outside of call expression
    """

  describe "pipeline", ->
    testCase """
      unwrap pipelines
      ---
      last |> f a, b, .
      array |> [x].concat .
      ---
      f(a, b, last);
      [x].concat(array)
    """

    testCase """
      head of pipeline
      ---
      f(.) |> g
      ---
      g($ => f($))
    """

  describe "typed .", ->
    testCase """
      simple
      ---
      add .: number, 5
      ---
      ($: number) => add($, 5)
    """
