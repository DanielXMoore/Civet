{ testCase, throws } from ./helper.civet

describe "partial placeholder", ->
  testCase """
    first arg
    ---
    f ., a
    ---
    $ => f($, a)
  """

  testCase """
    second arg
    ---
    f a, .
    ---
    $ => f(a, $)
  """

  testCase """
    both args
    ---
    f ., .
    ---
    $ => f($, $)
  """

  testCase """
    null chained call
    ---
    f()?.g?.().h ., x
    ---
    $ => f()?.g?.().h($, x)
  """

  testCase """
    object value
    ---
    f a: .
    ---
    $ => f({a: $})
  """

  testCase """
    object key
    ---
    f .: a
    f {.: a}
    ---
    $ => f({[$]: a});
    $1 => f({[$1]: a})
  """

  testCase """
    complex nested object and array
    ---
    f a: [ x, b: . ]
    ---
    $ => f({a: [ x, {b: $} ]})
  """

  testCase """
    nested call
    ---
    f .(a, b)
    f . a, b
    ---
    $ => f($(a, b));
    $1 => f($1(a, b))
  """

  testCase """
    double nested call with
    ---
    f .(a, .)
    ---
    $ => f($1 => $(a, $1))
  """

  testCase """
    array
    ---
    f [ . ]
    ---
    $ => f([ $ ])
  """

  testCase """
    leading unary op
    ---
    x.filter !Array.isArray .
    ---
    x.filter($ => !Array.isArray($))
  """

  testCase """
    new
    ---
    new X .
    ---
    $ => new X($)
  """

  describe "must be inside call exp", ->
    throws """
      as call
      ---
      . a
    """

    throws """
      object
      ---
      a: .
    """

    throws """
      object key
      ---
      .: a
    """

    throws """
      array
      ---
      [ . ]
    """

    throws """
      unary op
      ---
      !.
    """

    throws """
      binary op
      ---
      . + 1
    """

  describe "pipeline", ->
    testCase """
      unwrap pipelines
      ---
      last |> f a, b, .
      array |> [x].concat .
      ---
      f(a, b, last);
      [x].concat(array)
    """
