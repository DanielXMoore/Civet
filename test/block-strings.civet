{testCase} from ./helper.civet

describe "block strings", ->
  testCase '''
    basic
    ---
    x = """
      hello
    """
    ---
    x = `hello`
  '''

  testCase '''
    single line
    ---
    x = """hello "world"."""
    ---
    x = `hello "world".`
  '''

  testCase '''
    multi-line indented
    ---
    x = """
      hello
      there
    """
    ---
    x = `hello
    there`
  '''

  // NOTE: a case could be made that this should have indentation removed
  testCase '''
    non-indented
    ---
    x = """hello
      there
    """
    ---
    x = `hello
      there`
  '''

  // NOTE: since this is in a string it needs double \\ to escape the "
  testCase '''
    escapes
    ---
    x = """
      hello""\\"
    """
    ---
    x = `hello""\\"`
  '''

  // NOTE: since this is in a string each double \\ becomes a single \
  testCase '''
    backslash escapes
    ---
    x = """
      hello\\\\
      there
    """
    ---
    x = `hello\\\\
    there`
  '''

  testCase '''
    CoffeeScript compatible interpolation
    ---
    x = """
      Ahoy #{name}
    """
    ---
    x = `Ahoy ${name}`
  '''

  testCase '''
    CoffeeScript compatible interpolation
    ---
    x = """
      Hi
      Ahoy #{name}

      Hello
      Mr. #{surname}
    """
    ---
    x = `Hi\nAhoy ${name}\n\nHello\nMr. ${surname}`
  '''

  describe "single quoted", ->
    testCase """
      basic
      ---
      x = '''
        hello
      '''
      ---
      x = `hello`
    """


    testCase """
      multi-line indented
      ---
      x = '''
        hello
        there
      '''
      ---
      x = `hello
      there`
    """

    // NOTE: a case could be made that this should have indentation removed
    testCase """
      non-indented
      ---
      x = '''hello
        there
      '''
      ---
      x = `hello
        there`
    """

    // NOTE: since this is in a string it needs double \\ to escape the "
    testCase """
      escapes
      ---
      x = '''
        hello''\\'
      '''
      ---
      x = `hello''\\'`
    """

    testCase """
      keeps extra leading newlines
      ---
      x = '''


        hello
      '''
      ---
      x = `\n\nhello`
    """

    testCase '''
      keeps extra leading newlines
      ---
      x = """


        hello
      """
      ---
      x = `\n\nhello`
    '''
