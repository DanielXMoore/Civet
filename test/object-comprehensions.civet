{ testCase } from ./helper.civet

describe "object comprehensions", ->
  testCase """
    1
    ---
    { 
    for x of [1, 2, 3]
    [x]:  2 * x
    [x * 2]: 4 * x
    }
    ---
    (()=>{const _results = {};
    for (const x of [1, 2, 3]) {
    Object.assign(_results, {
    [x]:  2 * x
    ,[x * 2]: 4 * x
    ,
    })}; return _results})()
  """

  testCase """
    scoping
    ---
    { 
    for _results of [1]
    [_results]:  2 * _results
    [_results * 2]: 4 * _results
    }
    ---
    (()=>{const _results = {};
    for (const _results of [1]) {
    Object.assign(_results, {
    [_results]:  2 * _results
    ,[_results * 2]: 4 * _results
    ,
    })}; return _results})()
  """

  testCase """
    spacing 1
    ---
    { for x of [1]
    [x]:  2 * x
    [x * 2]: 4 * x
    }
    ---
    (()=>{const _results = {};
    for (const x of [1]) {
    Object.assign(_results, {
    [x]:  2 * x
    ,[x * 2]: 4 * x
    ,
    })}; return _results})()
  """

  testCase """
    spacing 2: indentation
    ---
    { for x of [1]
      [x]:  2 * x
      [x * 2]: 4 * x
    }
    ---
    (()=>{const _results = {};
    for (const x of [1]) {
    Object.assign(_results, {
    [x]:  2 * x
    ,[x * 2]: 4 * x
    ,
    })}; return _results})()
  """
