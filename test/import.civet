{testCase} from ./helper.civet

describe "import", ->
  testCase """
    default import
    ---
    import y from "./y"
    ---
    import y from "./y"
  """

  testCase """
    named imports
    ---
    import {x, y} from "./y"
    ---
    import {x, y} from "./y"
  """

  testCase """
    namespace
    ---
    import * as y from "./y"
    ---
    import * as y from "./y"
  """

  testCase """
    default and namespace
    ---
    import z, * as y from "./y"
    ---
    import z, * as y from "./y"
  """

  testCase """
    default and named imports
    ---
    import y, {a, b} from "./y"
    ---
    import y, {a, b} from "./y"
  """

  testCase """
    named imports with rename
    ---
    import {x as a, y as b} from "./y"
    ---
    import {x as a, y as b} from "./y"
  """

  testCase """
    named imports with shorthand rename
    ---
    import {x: a, y: b} from "./y"
    ---
    import {x as a, y as b} from "./y"
  """

  testCase """
    multi-line import block
    ---
    import ts, {
      CompilerOptions
      ScriptTarget
    } from "typescript"
    ---
    import ts, {
      CompilerOptions,
      ScriptTarget
    } from "typescript"
  """

  testCase """
    rewrite .ts to .js because typescript hates .ts
    ---
    import t from "./t.ts"
    import t from './t.ts'
    import t from ./t.ts
    ---
    import t from "./t.js"
    import t from './t.js'
    import t from "./t.js"
  """

  testCase """
    rewrite .mts to .mjs
    ---
    import t from "./t.mts"
    import t from './t.mts'
    import t from ./t.mts
    ---
    import t from "./t.mjs"
    import t from './t.mjs'
    import t from "./t.mjs"
  """

  testCase """
    rewrite .cts to .cjs
    ---
    import t from "./t.cts"
    import t from './t.cts'
    import t from ./t.cts
    ---
    import t from "./t.cjs"
    import t from './t.cjs'
    import t from "./t.cjs"
  """

  describe "unquoted module specifier", ->
    testCase """
      default import
      ---
      import y from ./y
      ---
      import y from "./y"
    """

    testCase """
      with semi-colon
      ---
      import y from ./y
      ---
      import y from "./y"
    """

    testCase """
      named imports
      ---
      import {x, y} from ./y
      ---
      import {x, y} from "./y"
    """

    testCase """
      namespace
      ---
      import * as y from ./y
      ---
      import * as y from "./y"
    """

    testCase """
      default and namespace
      ---
      import z, * as y from ./y
      ---
      import z, * as y from "./y"
    """

    testCase """
      default and named imports
      ---
      import y, {a, b} from ./y
      ---
      import y, {a, b} from "./y"
    """

    testCase """
      multi-line import block
      ---
      import ts, {
        CompilerOptions
        ScriptTarget
      } from typescript
      ---
      import ts, {
        CompilerOptions,
        ScriptTarget
      } from "typescript"
    """

  describe "implied import shorthand", ->
    testCase """
      default import
      ---
      y from "./y"
      ---
      import y from "./y"
    """

    testCase """
      named imports
      ---
      {x, y} from "./y"
      ---
      import {x, y} from "./y"
    """

    testCase """
      namespace
      ---
      * as y from "./y"
      ---
      import * as y from "./y"
    """

    testCase """
      default and namespace
      ---
      z, * as y from "./y"
      ---
      import z, * as y from "./y"
    """

    testCase """
      default and named imports
      ---
      y, {a, b} from "./y"
      ---
      import y, {a, b} from "./y"
    """

    testCase """
      multi-line import block
      ---
      ts, {
        CompilerOptions
        ScriptTarget
      } from "typescript"
      ---
      import ts, {
        CompilerOptions,
        ScriptTarget
      } from "typescript"
    """

    testCase """
      dynamic import
      ---
      import("./x.js")
      ---
      import("./x.js")
    """

    testCase """
      dynamic import with member access
      ---
      import("./y.js").then((mod) => mod.default)
      ---
      import("./y.js").then((mod) => mod.default)
    """

    testCase """
      implicit dynamic import
      ---
      await import "./x.js"
      promise := import "./x.js"
      fetch = => import "./x.js"
      ---
      await import("./x.js")
      const promise = import("./x.js")
      fetch = () => import("./x.js")
    """

  describe "import assertions", ->
    testCase """
      standard style
      ---
      import json from "./foo.json" assert { type: "json" }
      ---
      import json from "./foo.json" assert { type: "json" }
    """

    testCase """
      shorthand object literal
      ---
      import json from "./foo.json" assert type: "json"
      ---
      import json from "./foo.json" assert {type: "json"}
    """

    testCase """
      nested implicit object literal
      ---
      import json from "./foo.json" assert
        type: "json"
      ---
      import json from "./foo.json" assert {
        type: "json",
      }
    """

    testCase """
      from shorthand
      ---
      json from ./foo.json assert type: "json"
      ---
      import json from "./foo.json" assert {type: "json"}
    """

    testCase """
      side-effect import
      ---
      import "./foo.json" assert type: "json"
      ---
      import "./foo.json" assert {type: "json"}
    """

    testCase """
      dynamic import
      ---
      import("./foo.json", { assert: { type: "json" }})
      ---
      import("./foo.json", { assert: { type: "json" }})
    """

    testCase """
      dynamic import shorthand
      ---
      foo := import "./foo.json", assert: type: "json"
      ---
      const foo = import("./foo.json", {assert: {type: "json"}})
    """

    testCase """
      assert function call
      ---
      import "./foo.json"
      assert type: "json"
      ---
      import "./foo.json"
      assert({type: "json"})
    """
