{testCase, throws} from ./helper.civet

describe "import", ->
  testCase """
    default import
    ---
    import y from "./y"
    ---
    import y from "./y"
  """

  testCase """
    named imports
    ---
    import {x, y} from "./y"
    ---
    import {x, y} from "./y"
  """

  testCase """
    namespace
    ---
    import * as y from "./y"
    ---
    import * as y from "./y"
  """

  testCase """
    default and namespace
    ---
    import z, * as y from "./y"
    ---
    import z, * as y from "./y"
  """

  testCase """
    default and named imports
    ---
    import y, {a, b} from "./y"
    ---
    import y, {a, b} from "./y"
  """

  testCase """
    named imports with rename
    ---
    import {x as a, y as b} from "./y"
    ---
    import {x as a, y as b} from "./y"
  """

  testCase """
    named imports with shorthand rename
    ---
    import {x: a, y: b} from "./y"
    ---
    import {x as a, y as b} from "./y"
  """

  testCase """
    multi-line import block
    ---
    import ts, {
      CompilerOptions
      ScriptTarget
    } from "typescript"
    ---
    import ts, {
      CompilerOptions,
      ScriptTarget
    } from "typescript"
  """

  testCase """
    rewrite .ts to .js because typescript hates .ts
    ---
    import t from "./t.ts"
    import t from './t.ts'
    import t from ./t.ts
    ---
    import t from "./t.js"
    import t from './t.js'
    import t from "./t.js"
  """

  testCase """
    rewrite .mts to .mjs
    ---
    import t from "./t.mts"
    import t from './t.mts'
    import t from ./t.mts
    ---
    import t from "./t.mjs"
    import t from './t.mjs'
    import t from "./t.mjs"
  """

  testCase """
    rewrite .cts to .cjs
    ---
    import t from "./t.cts"
    import t from './t.cts'
    import t from ./t.cts
    ---
    import t from "./t.cjs"
    import t from './t.cjs'
    import t from "./t.cjs"
  """

  testCase """
    rewrite .civet to .jsx if requested
    ---
    "civet rewrite-civet-imports=.jsx"
    import t from "./t.civet"
    import t from './t.civet'
    import t from ./t.civet
    ---
    import t from "./t.jsx"
    import t from './t.jsx'
    import t from "./t.jsx"
  """

  describe "unquoted module specifier", ->
    testCase """
      default import
      ---
      import y from ./y
      ---
      import y from "./y"
    """

    testCase """
      with semi-colon
      ---
      import y from ./y
      ---
      import y from "./y"
    """

    testCase """
      named imports
      ---
      import {x, y} from ./y
      ---
      import {x, y} from "./y"
    """

    testCase """
      namespace
      ---
      import * as y from ./y
      ---
      import * as y from "./y"
    """

    testCase """
      default and namespace
      ---
      import z, * as y from ./y
      ---
      import z, * as y from "./y"
    """

    testCase """
      default and named imports
      ---
      import y, {a, b} from ./y
      ---
      import y, {a, b} from "./y"
    """

    testCase """
      multi-line import block
      ---
      import ts, {
        CompilerOptions
        ScriptTarget
      } from typescript
      ---
      import ts, {
        CompilerOptions,
        ScriptTarget
      } from "typescript"
    """

  describe "implied import shorthand", ->
    testCase """
      default import
      ---
      y from "./y"
      ---
      import y from "./y"
    """

    testCase """
      named imports
      ---
      {x, y} from "./y"
      ---
      import {x, y} from "./y"
    """

    testCase """
      namespace
      ---
      * as y from "./y"
      ---
      import * as y from "./y"
    """

    testCase """
      default and namespace
      ---
      z, * as y from "./y"
      ---
      import z, * as y from "./y"
    """

    testCase """
      default and named imports
      ---
      y, {a, b} from "./y"
      ---
      import y, {a, b} from "./y"
    """

    testCase """
      multi-line import block
      ---
      ts, {
        CompilerOptions
        ScriptTarget
      } from "typescript"
      ---
      import ts, {
        CompilerOptions,
        ScriptTarget
      } from "typescript"
    """

  describe "dynamic import", ->
    testCase """
      dynamic import
      ---
      import("./x.js")
      ---
      import("./x.js")
    """

    testCase """
      dynamic import with member access
      ---
      import("./y.js").then((mod) => mod.default)
      ---
      import("./y.js").then((mod) => mod.default)
    """

    testCase """
      implicit dynamic import
      ---
      await import "./x.js"
      promise := import "./x.js"
      fetch = => import "./x.js"
      await import name
      ---
      await import("./x.js")
      const promise = import("./x.js")
      fetch = () => import("./x.js")
      await import(name)
    """

    testCase """
      dynamic import declaration, full
      ---
      =>
        import * as foo from bar
      ---
      async () => {
        const foo = await import("bar");return foo
      }
    """

    testCase """
      dynamic import declaration, full
      ---
      =>
        import foo from bar
      ---
      async () => {
        const foo = (await import("bar")).default;return foo
      }
    """

    testCase """
      dynamic import declaration, implicit
      ---
      =>
        foo from bar
      ---
      async () => {
        const foo = (await import ("bar")).default;return foo
      }
    """

    testCase """
      dynamic import declaration, named
      ---
      =>
        {a, b:c, d as e} from bar
      ---
      async () => {
        const {a,b:c,d:e} = await import ("bar");return {a,c,e}
      }
    """

    testCase """
      dynamic import declaration, full and named
      ---
      =>
        foo, {a, b:c, d as e} from bar
      ---
      async () => {
        const ref = await import ("bar"), foo = ref.default, {a,b:c,d:e} = ref;return {a,c,e}
      }
    """

    testCase """
      dynamic import declaration with assertion
      ---
      =>
        import foo from bar with type: 'json'
      ---
      async () => {
        const foo = (await import("bar", {with:{type: 'json'}})).default;return foo
      }
    """

    testCase """
      single dynamic import declaration expression
      ---
      fs := import { readFileSync } from fs
      ---
      const fs = {readFileSync:(await import("fs")).readFileSync}
    """

    testCase """
      default dynamic import declaration expression
      ---
      fs := import { default } from fs
      ---
      const fs = {default:(await import("fs")).default}
    """

    testCase """
      unbraced default dynamic import declaration expression
      ---
      fs1 := import default from fs
      fs2 := import fs from fs
      ---
      const fs1 = (await import("fs")) .default
      const fs2 = (await import("fs")) .default
    """

    testCase """
      namespace dynamic import declaration expression
      ---
      fs := import * from fs
      ---
      const fs = (await import("fs"))
    """

    testCase """
      string dynamic import declaration expression
      ---
      fs := import { "string literal", `template string`, [x+y] } from fs
      ---
      let ref;const fs = {"string literal":(ref = await import("fs"))["string literal"],[`template string`]:ref[`template string`],[x+y]:ref[x+y]}
    """

    testCase """
      dynamic import declaration expression
      ---
      fs := import { readFileSync, writeFile as wf, writeFileSync: wfs } from fs
      ---
      let ref;const fs = {readFileSync:(ref = await import("fs")).readFileSync,wf:ref.writeFile,wfs:ref.writeFileSync}
    """

    throws """
      dynamic import declaration expression with type
      ---
      fs := import { type File } from fs
      ---
      ParseErrors: unknown:1:15 cannot use `type` in dynamic import
    """

    testCase """
      dynamic import declaration expression with assertion
      ---
      data := import { version } from package.json with type: 'json'
      ---
      const data = {version:(await import("package.json", {with:{type: 'json'}})).version}
    """

    // #1307
    testCase """
      dynamic * import is not binary op
      ---
      export function repl
        global.quit = global.exit = => process.exit 0
        * as nodeRepl from node:repl
      ---
      export async function repl() {
        global.quit = global.exit = () => process.exit(0)
        const nodeRepl = await import ("node:repl");return nodeRepl
      }
    """

  for keyword of ['assert', 'with']
    describe `import ${if keyword == 'assert' then 'assertions' else 'attributes'}`, ->
      testCase ```
        standard style
        ---
        import json from "./foo.json" ${keyword} { type: "json" }
        ---
        import json from "./foo.json" ${keyword} { type: "json" }
      ```

      testCase ```
        shorthand object literal
        ---
        import json from "./foo.json" ${keyword} type: "json"
        ---
        import json from "./foo.json" ${keyword} {type: "json"}
      ```

      testCase ```
        nested implicit object literal
        ---
        import json from "./foo.json" ${keyword}
          type: "json"
        ---
        import json from "./foo.json" ${keyword} {
          type: "json",
        }
      ```

      testCase ```
        from shorthand
        ---
        json from ./foo.json ${keyword} type: "json"
        ---
        import json from "./foo.json" ${keyword} {type: "json"}
      ```

      testCase ```
        side-effect import
        ---
        import "./foo.json" ${keyword} type: "json"
        ---
        import "./foo.json" ${keyword} {type: "json"}
      ```

      testCase ```
        dynamic import
        ---
        import("./foo.json", { ${keyword}: { type: "json" }})
        ---
        import("./foo.json", { ${keyword}: { type: "json" }})
      ```

      testCase ```
        dynamic import shorthand
        ---
        foo := import "./foo.json", ${keyword}: type: "json"
        ---
        const foo = import("./foo.json", {${keyword}: {type: "json"}})
      ```

      unless keyword is 'with'  // 'with' isn't a valid function name
        testCase ```
          ${keyword} function call
          ---
          import "./foo.json"
          ${keyword} type: "json"
          ---
          import "./foo.json"
          ${keyword}({type: "json"})
        ```

  describe "from ... import", ->
    testCase """
      top-level explicit from
      ---
      from "./module" import {x}
      from ./module import {y}
      from node:fs import { readFile }
      from ./module import * as module
      from ./module import moduleDefault
      from ./module import type Type
      from ./module import type { Type1, Type2 }
      from ./package.json with {type: "json"} import { version }
      from ./operators import operator {a, b}
      ---
      import {x} from "./module"
      import {y} from "./module"
      import { readFile } from "node:fs"
      import * as module from "./module"
      import moduleDefault from "./module"
      import type Type from "./module"
      import type { Type1, Type2 } from "./module"
      import { version } from "./package.json" with {type: "json"}
      import {a, b} from "./operators"
    """

    testCase """
      dynamic declaration explicit from
      ---
      =>
        from "./module" import {x}
        from ./module import {y}
        from node:fs import { readFile }
        from ./module import * as module
        from ./module import moduleDefault
        from ./package.json with {type: "json"} import { version }
      ---
      async () => {
        const {x} = await import("./module")
        const {y} = await import("./module")
        const {readFile} = await import("node:fs")
        const module = await import("./module")
        const moduleDefault = (await import("./module")).default
        const {version} = await import("./package.json", {with:{type: "json"}});return {version}
      }
    """

    throws """
      mixed, from first
      ---
      from x import y from z
      ---
      ParseError
    """

    throws """
      mixed, import first
      ---
      import x from y import z
      ---
      ParseError
    """
