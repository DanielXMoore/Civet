{testCase, throws, wrapper} from ./helper.civet

describe "property access", ->
  testCase """
    with indexing longhand
    ---
    a?.[2]
    ---
    a?.[2]
  """

  testCase """
    with indexing shorthand
    ---
    a?[2]
    ---
    a?.[2]
  """

  testCase """
    with indexing shorthand and inline comments
    ---
    a/**/?/**/[2]
    ---
    a/**/?./**/[2]
  """

  testCase """
    with indexing longhand and inline comments
    ---
    a/**/?/**/./**/[2]
    ---
    a/**/?/**/./**/[2]
  """, wrapper: ''  // this level of commenting isn't supported by TS

  testCase """
    accessed names are not reserved
    ---
    a.case
    ---
    a.case
  """

  testCase """
    access reserved word then
    ---
    a.then
    ---
    a.then
  """

  describe "super property acces", ->
    wrapper """
      class X {
        method() {
          CODE
        }
      }
    """

    testCase """
      super property access
      ---
      super.method()
      ---
      super.method()
    """

    testCase """
      super indexing
      ---
      super["method"]()
      ---
      super["method"]()
    """

    testCase """
      super double access
      ---
      super.foo.bar
      ---
      super.foo.bar
    """

  testCase """
    inline comment
    ---
    x/**/.y
    ---
    x/**/.y
  """

  testCase """
    inline comment
    ---
    x./**/y
    ---
    x./**/y
  """

  describe "trailing member access", ->
    testCase """
      simple
      ---
      foo
      .bar
      ---
      foo
      .bar
    """

    testCase """
      pull outside implicit function call
      ---
      foo a, b
      .bar
      ---
      foo(a, b)
      .bar
    """

    testCase """
      re-enable in nested block
      ---
      useEffect =>
        foo
        .bar
      ---
      useEffect(() => {
        return foo
        .bar
      })
    """

    testCase """
      re-enable in braced block
      ---
      useEffect => {
        foo
        .bar
      }
      ---
      useEffect(() => {
        return foo
        .bar
      })
    """

    testCase """
      re-enable in parentheses
      ---
      func (
        foo
        .bar
      )
      ---
      func((
        foo
        .bar
      ))
    """

    testCase """
      re-enable in arrays
      ---
      func [
        foo
        .bar
      ]
      ---
      func([
        foo
        .bar
      ])
    """

  describe "string property access shorthand", ->
    testCase """
      double quoted
      ---
      x."hello world"
      ---
      x["hello world"]
    """

    testCase """
      triple quoted
      ---
      x.'''hello
      world'''
      ---
      x[`hello
      world`]
    """

    testCase """
      template
      ---
      x.`hello ${name}`
      ---
      x[`hello ${name}`]
    """

  describe "integer property access shorthand", ->
    testCase """
      decimal
      ---
      x.1
      ---
      x[1]
    """

    testCase """
      optional decimal
      ---
      x?.1
      ---
      x?.[1]
    """

    testCase """
      possessive decimal
      ---
      x's 1
      ---
      x[1]
    """

    testCase """
      optional possessive decimal
      ---
      x?'s 1
      ---
      x?.[1]
    """

    testCase """
      decimal with separators
      ---
      x.1_000_000
      ---
      x[1_000_000]
    """

    testCase """
      octal
      ---
      x.0o777
      ---
      x[0o777]
    """

    testCase """
      hex
      ---
      x.0xfff
      ---
      x[0xfff]
    """

    testCase """
      multiple
      ---
      x.0.0
      ---
      x[0][0]
    """

    testCase """
      optional multiple
      ---
      x?.0?.0
      ---
      x?.[0]?.[0]
    """

    testCase """
      negative
      ---
      x.-1
      ---
      x[x.length-1]
    """

    testCase """
      negative on following line
      ---
      x
      .-1
      ---
      x
      [x.length-1]
    """

    testCase """
      optional negative
      ---
      x?.-1
      ---
      x?.[x.length-1]
    """

    testCase """
      possessive negative
      ---
      x's -1
      ---
      x[x.length-1]
    """

    testCase """
      assignment lhs
      ---
      x.-1 = 2
      ---
      x[x.length-1] = 2
    """

    testCase """
      negative with declaration and ref
      ---
      lastChild := node.children.-1
      ---
      let ref;const lastChild = (ref = node.children)[ref.length-1]
    """

    testCase """
      negative in complex expression
      ---
      [
        if exp.bindings?.#
          [exp.bindings.-1]
        else
          []
      ]
      ---
      let ref;[
        (exp.bindings?.length?
          ([(ref = exp.bindings)[ref.length-1]])
        :
          ([]))
      ]
    """

  describe "bind shorthand", ->
    testCase """
      @.
      ---
      x@.y
      ---
      x.y.bind(x)
    """

    testCase """
      @
      ---
      x@y
      ---
      x.y.bind(x)
    """

    testCase """
      optional
      ---
      x?@y
      ---
      x?.y.bind(x)
    """

    testCase """
      non-null
      ---
      x!@y
      ---
      x!.y.bind(x)
    """

    testCase """
      longer prefix
      ---
      x.y@z
      ---
      x.y.z.bind(x.y)
    """

    testCase """
      longer suffix
      ---
      x@y.z
      ---
      x.y.bind(x).z
    """

    // TODO: needs ref
    testCase """
      multiple bind
      ---
      x@y@z
      ---
      x.y.bind(x).z.bind(x.y.bind(x))
    """

    testCase """
      @@.
      ---
      @@.x
      ---
      this.x.bind(this)
    """

    testCase """
      @@
      ---
      @@x
      ---
      this.x.bind(this)
    """

    testCase """
      call @@
      ---
      f @@x
      ---
      f(this.x.bind(this))
    """

    testCase """
      bind with argument
      ---
      x@y z
      ---
      x.y.bind(x, z)
    """

    testCase """
      bind with indented argument list
      ---
      foo@bar
        a
        b
        c
      ---
      foo.bar.bind(foo,\u0020
        a,
        b,
        c,)
    """

  describe "possessive form", ->
    testCase """
      's
      ---
      mario's brother's name
      ---
      mario.brother.name
    """

    testCase """
      ’s
      ---
      mario’s brother’s name
      ---
      mario.brother.name
    """

    testCase """
      lhs
      ---
      mario’s name = 'mario'
      ---
      mario.name = 'mario'
    """

    testCase """
      comments
      ---
      mario's /*real*/ name
      ---
      mario./*real*/ name
    """

    testCase """
      optional
      ---
      mario?'s name
      ---
      mario?.name
    """

    testCase """
      quotes and numbers
      ---
      json's "long property"'s `${movie} name`'s -1's 0
      ---
      let ref;(ref = json["long property"][`${movie} name`])[ref.length-1][0]
    """

    throws """
      needs space
      ---
      mario'sname
      ---
      ParseError
    """

    throws """
      invalid start to template string
      ---
      mario's s'
      ---
      ParseError
    """
