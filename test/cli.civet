assert from assert
path from path
{ parseArgs, type Options, type ParsedArgs } from ../source/cli.civet

function argsParse(args: string | string[], parsed: ParsedArgs): Promise<void>
  args = args.split /\s+/ if args <? 'string'
  assert.deepStrictEqual await parseArgs(args, true), parsed

type OptionsOrUndefined = {
  [P in keyof Options]: Options[P] | undefined
}

function argsOptions(args: string | string[], required: OptionsOrUndefined): Promise<void>
  args = args.split /\s+/ if args <? 'string'
  parsed := await parseArgs args, true
  for key of [ 'filenames', 'scriptArgs' ] as const
    assert.deepStrictEqual parsed[key], [], key
  if 'parseOptions' in required
    required.parseOptions?.rewriteCivetImports ??= '.civet.jsx'
  { options } := parsed
  for key in required
    key
  for key in required
    assert.deepStrictEqual
      options[key as keyof Options]
      required[key as keyof Options]
      `options.${key}`

describe 'CLI parseArgs', ->
  for version of [ '-v', '-version', '--version' ]
    it `parses ${version}`, =>
      argsOptions version, version: true

  for help of [ '-h', '-help', '--help' ]
    it `parses ${help}`, =>
      argsOptions help, help: true
  
  it `parses -ch`, =>
    argsOptions '-ch',
      help: true
      compile: true
  
  it 'parses --config', =>
    argsOptions '--config custom-config.js', config: 'custom-config.js'

  it 'parses --no-config', =>
    argsOptions '--no-config', config: null

  it 'parses --civet', =>
    argsOptions '--civet coffeeCompat', parseOptions: coffeeCompat: true

  it 'parses --civet complex', =>
    argsOptions ['--civet', 'tab=4 autoLet'],
      parseOptions:
        tab: 4
        autoLet: true

  it 'parses --civet multiple', =>
    argsOptions '--civet tab=4 --civet autoLet',
      parseOptions:
        tab: 4
        autoLet: true

  it 'overrides rewriteCivetImports', :Promise<void> =>
    argsOptions '--civet rewriteCivetImports=.js',
      parseOptions: rewriteCivetImports: '.js'

  it 'parses --comptime', =>
    argsOptions '--comptime', parseOptions: comptime: true

  it 'parses --no-comptime', =>
    argsOptions '--no-comptime', parseOptions: comptime: false

  it 'parses --comptime and --no-comptime together', =>
    await argsOptions '--comptime --no-comptime', parseOptions: comptime: false
    await argsOptions '--no-comptime --comptime', parseOptions: comptime: true

  it 'parses --ast', =>
    argsOptions '--ast', ast: true
  
  it 'parses --no-cache', =>
    argsOptions '--no-cache', noCache: true
  
  it 'parses --inline-map', =>
    argsOptions '--inline-map', inlineMap: true
  
  it 'parses --js', =>
    argsOptions '--js', js: true

  it 'parses --hits', =>
    argsOptions '--hits hits.out', hits: 'hits.out'

  it 'parses --trace', =>
    argsOptions '--trace trace.out', trace: 'trace.out'

  it 'parses --typecheck', =>
    argsOptions '--typecheck',
      typecheck: true
      typescript: true
      run: false
      repl: undefined

  for emit of [ '--emit-declaration', '--emitDeclaration' ]
    it `parses ${emit}`, =>
      argsOptions emit,
        emitDeclaration: true
        typescript: true
        run: false
        repl: undefined

    it `parses --typecheck with ${emit}`, =>
      argsOptions `--typecheck ${emit}`,
        emitDeclaration: true
        typescript: true
        run: false
        repl: undefined

  it 'launches repl with TTY', =>
    assert.deepStrictEqual await parseArgs([], true),
      filenames: []
      scriptArgs: []
      options:
        repl: true
        run: true
        parseOptions: rewriteCivetImports: '.civet.jsx'

  it 'pipe without TTY', =>
    assert.deepStrictEqual await parseArgs([], false),
      filenames: ['-']
      scriptArgs: []
      options:
        compile: true
        run: false
        parseOptions: rewriteCivetImports: '.civet.jsx'

  for compile of [ '-c', '--compile' ]
    it `parses ${compile}`, =>
      argsOptions compile, compile: true

    it `parses ${compile} with filename`, =>
      argsParse `${compile} filename.civet`,
        filenames: [ 'filename.civet' ]
        scriptArgs: []
        options:
          compile: true
          run: false
          parseOptions: rewriteCivetImports: '.civet.jsx'

    it `parses ${compile} with filenames`, =>
      argsParse `${compile} one.civet two.civet three.civet`,
        filenames: [ 'one.civet', 'two.civet', 'three.civet' ]
        scriptArgs: []
        options:
          compile: true
          run: false
          parseOptions: rewriteCivetImports: '.civet.jsx'

  for output of [ '-o', '--output' ]
    it `parses ${output} with -`, =>
      argsOptions `${output} -`,
        output: '-'
        outputDir: undefined
        outputExt: undefined
        outputPath: undefined
        parseOptions: rewriteCivetImports: '.civet.jsx'

    it `parses ${output} with filename`, =>
      argsOptions `${output} filename.js`,
        output: 'filename.js'
        outputDir: undefined
        outputExt: '.js'
        outputPath: path.parse 'filename.js'
        parseOptions: rewriteCivetImports: '.js'

    it `parses ${output} with pathname`, =>
      argsOptions `${output} ./filename.js`,
        output: './filename.js'
        outputDir: undefined
        outputExt: '.js'
        outputPath: path.parse './filename.js'
        parseOptions: rewriteCivetImports: '.js'

    it `parses ${output} with existing directory`, =>
      argsOptions `${output} .`,
        output: '.'
        outputDir: '.'
        outputExt: undefined
        outputPath: undefined
        parseOptions: rewriteCivetImports: '.civet.jsx'

    it `parses ${output} with new directory`, =>
      argsOptions `${output} does-not-exist/`,
        output: 'does-not-exist/'
        outputDir: 'does-not-exist/'
        outputExt: undefined
        outputPath: undefined
        parseOptions: rewriteCivetImports: '.civet.jsx'

    it `parses ${output} with extension`, =>
      argsOptions `${output} .js`,
        output: '.js'
        outputDir: undefined
        outputExt: '.js'
        outputPath: undefined
        parseOptions: rewriteCivetImports: '.js'

    it `parses ${output} with complex extension`, =>
      argsOptions `${output} .civet.js`,
        output: '.civet.js'
        outputDir: undefined
        outputExt: '.civet.js'
        outputPath: undefined
        parseOptions: rewriteCivetImports: '.civet.js'

    it `parses ${output} with directory and extension`, =>
      argsOptions `${output} ./.js`,
        output: './.js'
        outputDir: '.'
        outputExt: '.js'
        outputPath: undefined
        parseOptions: rewriteCivetImports: '.js'

  it `parses -e`, =>
    argsOptions '-e console.log("hello")',
      eval: 'console.log("hello")'
      run: true
      repl: undefined

  it `parses -c -e`, =>
    argsOptions '-c -e console.log("hello")',
      eval: 'console.log("hello")'
      compile: true
      run: false
      repl: undefined
