{ compile } from ../source/main.civet
assert from assert

{ SourceMap, base64Encode, decodeVLQ } from ../source/sourcemap.civet
{ transform } from esbuild

describe "source map", ->
  it "should parse from base64Encoded", ->
    src := """
      x := a + 3
      y++

      y = x + a
    """

    {sourceMap} := await compile src,
      sourceMap: true

    srcMapJSON := sourceMap.json("yo.civet", "yo.ts")

    base64Encoded := base64Encode JSON.stringify(srcMapJSON)

    parsed := SourceMap.parseWithLines base64Encoded

    assert.deepEqual parsed.lines, sourceMap.lines

  describe "decodeVLQ error cases", ->
    it "should throw error for unexpected early end of mapping data", ->
      // Test with an incomplete VLQ sequence that ends abruptly
      assert.throws =>
        decodeVLQ "g"
      , /Unexpected early end of mapping data/

    it "should throw error for invalid mapping character with high bit set", ->
      // Test with characters that have the high bit set (ASCII > 127)
      // Using characters like é (233), ñ (241), etc.
      assert.throws =>
        decodeVLQ "ñ"
      , /Invalid mapping character: "ñ"/

      assert.throws =>
        decodeVLQ "AéB"
      , /Invalid mapping character: "é"/

    it "should throw error for invalid mapping character not in base64 alphabet", ->
      assert.throws =>
        decodeVLQ "\t"
      , /Invalid mapping character: "\\t"/

    it "should handle valid VLQ sequences correctly", ->
      // Test that valid sequences still work
      result .= decodeVLQ "A"
      assert.deepEqual result, [0]

      result = decodeVLQ "G"
      assert.deepEqual result, [3]

      result = decodeVLQ "GB"
      assert.deepEqual result, [3, -0]

      result = decodeVLQ "gBAA"
      assert.deepEqual result, [16, 0, 0]

  describe "SourceMap.remap", ->
    it "should compose source maps through civet -> ts -> js pipeline", ->
      civetSource := """
        x: number := 5
      """

      { sourceMap: civetToTsMap, code: tsCode } := await compile civetSource,
        sourceMap: true
        filename: "test.civet"

      // use esbuild to transpile ts to js
      { code: jsCodeWithInlineMap } := await transform(tsCode, {
        sourcefile: "test.ts",
        loader: "ts",
        sourcemap: "inline"
      })

      remapped := SourceMap.remap(jsCodeWithInlineMap, civetToTsMap, "test.civet", "test.js")

      assert.equal remapped, """
        const x = 5;
        //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZXMiOlsidGVzdC5jaXZldCJdLCJtYXBwaW5ncyI6IkFBQVMsTUFBVCxJQUFhOyIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsieDogbnVtYmVyIDo9IDUiXX0=
      """
