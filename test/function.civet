{testCase, throws} from ./helper.civet

describe "function", ->
  testCase """
    basic
    ---
    f = (x) ->
      x
    ---
    f = function(x) {
      return x
    }
  """

  testCase """
    one liner
    ---
    (x) -> x
    ---
    function(x) { return x }
  """

  testCase """
    no-op
    ---
    ->
    ---
    function() {}
  """

  testCase """
    one liner keeps comments
    ---
    (/**/x) -> /**/x
    ---
    function(/**/x) { /**/return x }
  """

  testCase """
    empty parameters
    ---
    ->
      x
    ---
    function() {
      return x
    }
  """

  testCase """
    const declaration
    ---
    x :=-> a
    ---
    function x () { return a }
  """

  testCase """
    const declaration
    ---
    y := -> a
    ---
    function y () { return a }
  """

  testCase """
    const declaration
    ---
    z := function() a
    ---
    function z () { return a }
  """

  testCase """
    async const declaration
    ---
    defaultLoad := async ->
    ---
    async function defaultLoad () {}
  """

  describe "argumentless without parens", ->
    testCase """
      inline
      ---
      function f 5
      ---
      function f()  {return 5 }
    """

    testCase """
      inline anonymous
      ---
      function 5
      ---
      function()  {return 5 }
    """

    testCase """
      inline assigned
      ---
      f := function 5
      ---
      function f ()  {return 5 }
    """

    testCase """
      braced
      ---
      function f { 5 }
      ---
      function f() { return 5 }
    """

    testCase """
      anonymous braced
      ---
      function { 5 }
      ---
      function() { return 5 }
    """

    testCase """
      implicit block
      ---
      function f
        x := 5
        x*x
      ---
      function f() {
        const x = 5
        return x*x
      }
    """

    testCase """
      implicit block anonymous
      ---
      function
        x := 5
        x*x
      ---
      function() {
        const x = 5
        return x*x
      }
    """

    testCase """
      separate lines assigned
      ---
      f := function
        x := 5
        x*x
      ---
      function f () {
        const x = 5
        return x*x
      }
    """

  describe "@params", ->
    testCase """
      empty function body
      ---
      (@a, @b) ->
      ---
      function(a, b) {this.a = a;
      return this.b = b;
      }
    """

    testCase """
      local reference
      ---
      (@a, @b) ->
        a++
      ---
      function(a1, b) {
        this.a = a1;
        this.b = b;
        return a++
      }
    """

    testCase """
      object binding pattern with alias
      ---
      ({@a, @b}) ->
        a
      ---
      function({a: a1, b}) {
        this.a = a1;
        this.b = b;
        return a
      }
    """

    testCase """
      array binding pattern with alias
      ---
      ([@a, @b]) ->
        a
      ---
      function([a1, b]) {
        this.a = a1;
        this.b = b;
        return a
      }
    """

  testCase """
    longhand
    ---
    function()
      x
    ---
    function() {
      return x
    }
  """

  testCase """
    longhand with braces
    ---
    function() {
      x
    }
    ---
    function() {
      return x
    }
  """

  testCase """
    longhand with inline braces
    ---
    function() { x }
    ---
    function() { return x }
  """

  testCase """
    return
    ---
    (x) ->
      return x
    ---
    function(x) {
      return x
    }
  """

  it "doesn't allow import inside of function ", ->
    throws """
      (x) ->
        import * from 'x'
    """

  testCase """
    fat arrow
    ---
    () => x
    (x) => x
    ---
    () => x
    (x) => x
  """

  testCase """
    fat arrow nested body
    ---
    x = =>
      x x
    ---
    x = () => {
      return x(x)
    }
  """

  testCase """
    fat interprets single arg without parens as function application
    ---
    x => 5
    ---
    x(() => 5)
  """

  testCase """
    fat arrow nested body with multiple statements
    ---
    x = =>
      x x
      a
      b
    ---
    x = () => {
      x(x)
      a
      return b
    }
  """

  testCase """
    fat arrow empty block
    ---
    x = =>
    ---
    x = () => {}
  """

  testCase """
    fat arrow return
    ---
    x = =>
      return x
    ---
    x = () => {
      return x
    }
  """

  testCase """
    fat arrow return
    ---
    x = (a, b) =>
      c := a + b
      return c
    ---
    x = (a, b) => {
      const c = a + b
      return c
    }
  """

  testCase """
    decs inside function
    ---
    function () {
      var x = 3
    }
    ---
    function () {
      var x = 3
    }
  """

  testCase """
    implicit return braceless object
    ---
    ->
      a: 1
    ---
    function() {
      return {a: 1}
    }
  """

  testCase """
    return nested braceless object
    ---
    config = ->
      return
        a: x
        b: y
    ---
    config = function() {
      return {
        a: x,
        b: y,
      }
    }
  """

  testCase """
    return nested braceless object with methods
    ---
    config = ->
      return
        a: getA()
        b: getB()
    ---
    config = function() {
      return {
        a: getA(),
        b: getB(),
      }
    }
  """

  testCase """
    rest parameter
    ---
    (a, b, ...c) ->
      c
    ---
    function(a, b, ...c) {
      return c
    }
  """

  testCase """
    non-end rest parameter
    ---
    (a, b, ...c, d) ->
      c
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    function(a, b, ...c) {
      let [d] = splice.call(c, -1);
      return c
    }
  """

  testCase """
    non-end @ rest parameter
    ---
    (a, b, ...@c, d) ->
      [@c, d]
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    function(a, b, ...c) {
      let [d] = splice.call(c, -1);
      this.c = c;
      return [this.c, d]
    }
  """

  testCase """
    empty rest parameter
    ---
    (a, ...) ->
      a
    ---
    function(a, ...ref) {
      return a
    }
  """

  testCase """
    empty non-end rest parameter
    ---
    (a, ..., b) ->
      b
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    function(a, ...ref) {
      let [b] = splice.call(ref, -1);
      return b
    }
  """

  testCase """
    rest element in parameter
    ---
    ([a, b, ...c]) ->
      c
    ---
    function([a, b, ...c]) {
      return c
    }
  """

  testCase """
    non-end rest element
    ---
    ([a, b, ...c, d]) ->
      c
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    function([a, b, ...c]) {
      let [d] = splice.call(c, -1);
      return c
    }
  """

  testCase """
    multiple nested rest elements
    ---
    ([a, b, ...c, [d, ...e, f]]) ->
      e
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    function([a, b, ...c]) {
      let [[d, ...e]] = splice.call(c, -1);
      let [f] = splice.call(e, -1);
      return e
    }
  """

  testCase """
    reorders non-end position binding rest property
    ---
    ({a, b, ...c, d}) ->
      c
    ---
    function({a, b, d, ...c}) {
      return c
    }
  """

  testCase """
    allows trailing dots for binding rest property
    ---
    ({a, b, c..., d}) ->
      c
    ---
    function({a, b, d, ...c}) {
      return c
    }
  """

  testCase """
    non-end rest element inside object
    ---
    ({a, b, c: [c, ...d, e]}) ->
      d
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    function({a, b, c: [c, ...d]}) {
      let [e] = splice.call(d, -1);
      return d
    }
  """

  testCase """
    non-end rest element inside object with non-end rest property
    ---
    ({a, b..., c: [d, ...e, f]}) ->
      x
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    function({a, c: [d, ...e], ...b}) {
      let [f] = splice.call(e, -1);
      return x
    }
  """

  testCase """
    non-end at identifier rest element inside object
    ---
    ({a, b, c: [c, ...@d, e]}) ->
      [@d, e]
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    function({a, b, c: [c, ...d]}) {
      let [e] = splice.call(d, -1);
      this.d = d;
      return [this.d, e]
    }
  """

  testCase """
    very nested non-end rest elements with at identifiers
    ---
    function ({x: [a, b, ...@c, [{d: {y: [@z1, @z2..., @z3]}}, ...@e, f]]})
      [@c, @e, f]
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    function ({x: [a, b, ...c]}) {
      let [[{d: {y: [z1, ...z2]}}, ...e]] = splice.call(c, -1);
      let [z3] = splice.call(z2, -1);
      let [f] = splice.call(e, -1);
      this.c = c;
      this.z1 = z1;
      this.z2 = z2;
      this.z3 = z3;
      this.e = e;
      return [this.c, this.e, f]
    }
  """

  testCase """
    nested property at binding
    ---
    ({@a, b: {c, @d}}) ->
      [@a, @d]
    ---
    function({a, b: {c, d}}) {
      this.a = a;
      this.d = d;
      return [this.a, this.d]
    }
  """

  testCase """
    braces on following line
    ---
    export function resolve(specifier: string, context: any, next: any)
      { parentURL = baseURL } := context
    ---
    export function resolve(specifier: string, context: any, next: any) {
      const { parentURL = baseURL } = context
    }
  """

  describe "implicit returns", ->
    testCase """
      basic
      ---
      (x) ->
        x
      ---
      function(x) {
        return x
      }
    """

    testCase """
      one liner
      ---
      (x) -> x
      ---
      function(x) { return x }
    """

    testCase """
      semicolon
      ---
      (x) ->
        x;
      ---
      function(x) {
        x;
      }
    """

    testCase """
      one liner with semicolon
      ---
      (x) -> x;
      ---
      function(x) { x; }
    """

    testCase """
      inline multi-statement
      ---
      -> $2.implicit = $1.generated; $2
      ---
      function() { $2.implicit = $1.generated; return $2 }
    """

    testCase """
      inline multi-statement with semicolon
      ---
      -> $2.implicit = $1.generated; $2;
      ---
      function() { $2.implicit = $1.generated; $2; }
    """

    describe.skip "TODO", ->
      testCase """
        inline multi-statement longhand
        ---
        function() { $2.implicit = $1.generated; $2 }
        ---
        function() { $2.implicit = $1.generated; return $2 }
      """

    testCase """
      empty statement
      ---
      ->
        ;
      ---
      function() {
        ;
      }
    """

    testCase """
      parens
      ---
      (x) ->
        (x)
      ---
      function(x) {
        return (x)
      }
    """

    testCase """
      parens and multiple statements
      ---
      (x) ->
        (x)
        a
        b
      ---
      function(x) {
        (x)
        a
        return b
      }
    """

    testCase """
      multiple statements with middle semicolon
      ---
      (x) ->
        a;
        b
      ---
      function(x) {
        a;
        return b
      }
    """

    testCase """
      multiple statements with final semicolon
      ---
      (x) ->
        a
        b;
      ---
      function(x) {
        a
        b;
      }
    """

    testCase """
      loop
      ---
      (x) ->
        loop
          x
      ---
      function(x) {
        const results=[];while(true) {
          results.push(x)
        };return results;
      }
    """

    testCase """
      while
      ---
      (x) ->
        while x
          x
      ---
      function(x) {
        const results=[];while (x) {
          results.push(x)
        };return results;
      }
    """

    testCase """
      for in
      ---
      (x) ->
        for k in x
          k
      ---
      function(x) {
        const results=[];for (const k in x) {
          results.push(k)
        };return results;
      }
    """

    testCase """
      nested for loops
      ---
      (x) ->
        for i = 0; i < x.length; i++
          for v of x[i]
            v + 1
      ---
      function(x) {
        const results1=[];for (i = 0; i < x.length; i++) {
          const results=[];for (const v of x[i]) {
            results.push(v + 1)
          };results1.push(results);
        };return results1;
      }
    """

    testCase """
      nested for loops, inner postfix
      ---
      (x) ->
        for i = 0; i < x.length; i++
          v + 1 for v of x[i]
      ---
      function(x) {
        const results1=[];for (i = 0; i < x.length; i++) {
          const results=[];for (const v of x[i]) { results.push(v + 1) };results1.push(results);
        };return results1;
      }
    """

    testCase """
      void
      ---
      (x): void ->
        console.log x
      ---
      function(x): void {
        console.log(x)
      }
    """

    testCase """
      void longhand
      ---
      function(x): void
        console.log x
      ---
      function(x): void {
        console.log(x)
      }
    """

    testCase """
      fat arrow
      ---
      (x) =>
        x
      ---
      (x) => {
        return x
      }
    """

    testCase """
      add implicit return even if an explicit return is present
      ---
      (x) ->
        return x
        a
        b
      ---
      function(x) {
        return x
        a
        return b
      }
    """

    testCase """
      const shorthand
      ---
      (x) ->
        a := x
      ---
      function(x) {
        const a = x
      }
    """

    testCase """
      const declaration
      ---
      (x) ->
        const a = 3
      ---
      function(x) {
        const a = 3
      }
    """

    testCase """
      var declaration
      ---
      (x) ->
        var a = 3
      ---
      function(x) {
        var a = 3
      }
    """

    testCase """
      let declaration
      ---
      (x) ->
        let a = 3
      ---
      function(x) {
        let a = 3
      }
    """

    testCase """
      number literal
      ---
      (x) ->
        5
      ---
      function(x) {
        return 5
      }
    """

    testCase """
      expression
      ---
      (x) ->
        5 + 5
      ---
      function(x) {
        return 5 + 5
      }
    """

    testCase """
      if/else
      ---
      (x) ->
        if x
          a
        else
          b
      ---
      function(x) {
        if (x) {
          return a
        }
        else {
          return b
        }
      }
    """

    testCase """
      if without else
      ---
      (x) ->
        if x
          a
      ---
      function(x) {
        if (x) {
          return a
        }
        return
      }
    """

    testCase """
      nested if else
      ---
      (x) ->
        if x
          if y
            a
          else
            if z
              b
        else
          c
      ---
      function(x) {
        if (x) {
          if (y) {
            return a
          }
          else {
            if (z) {
              return b
            }
            return
          }
        }
        else {
          return c
        }
      }
    """

    // TODO: last return spacing is dubious
    testCase """
      if else if
      ---
      (x) ->
        if x
          a
        else if y
          b
        else if z
          c
      ---
      function(x) {
        if (x) {
          return a
        }
        else if (y) {
          return b
        }
        else if (z) {
          return c
        }
       return
      }
    """

    testCase """
      unless
      ---
      (x) ->
        unless x
          a
      ---
      function(x) {
        if(!(x)) {
          return a
        }
        return
      }
    """

    testCase """
      switch
      ---
      (x) ->
        switch x
          when 1
            a
          when 2
            b
          default
            c()
            d
      ---
      function(x) {
        switch(x) {
          case 1: {
            return a
          }
          case 2: {
            return b
          }
          default:
            c()
            return d
        }
      }
    """

    testCase """
      switch with empty when body
      ---
      (x) ->
        switch x
          when 1
            a
          when 2
          when 3
            b
      ---
      function(x) {
        switch(x) {
          case 1: {
            return a
          }
          case 2: {return
          }
          case 3: {
            return b
          }
        }
      }
    """

    testCase """
      switch with blocks
      ---
      (x) ->
        switch x
          when 1
            {
              let a = 2
              a
            }
      ---
      function(x) {
        switch(x) {
          case 1: {
            {
              let a = 2
              return a
            }
          }
        }
      }
    """

    testCase """
      switch with else
      ---
      (x) ->
        switch x
          when 1
            a
          when 2
            b
          else
            c
      ---
      function(x) {
        switch(x) {
          case 1: {
            return a
          }
          case 2: {
            return b
          }
          default: {
            return c
          }
        }
      }
    """

    testCase """
      new
      ---
      (x) -> new Foo
      ---
      function(x) { return new Foo }
    """

    testCase """
      throw statement
      ---
      (x) ->
        throw new Error('x')
      ---
      function(x) {
        throw new Error('x')
      }
    """

    testCase """
      debugger statement
      ---
      (x) ->
        debugger
      ---
      function(x) {
        debugger
      }
    """

    testCase """
      try/catch
      ---
      (x) ->
        try
          a
        catch e
          b
      ---
      function(x) {
        try {
          return a
        }
        catch (e) {
          return b
        }
      }
    """

    testCase """
      try without catch
      ---
      (x) ->
        try
          a
      ---
      function(x) {
        try {
          return a
        } catch(e) {}
      }
    """

    testCase """
      try without catch with finally
      ---
      (x) ->
        try
          a
        finally
          b
      ---
      function(x) {
        try {
          return a
        }
        finally {
          b
        }
      }
    """
