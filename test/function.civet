{testCase, throws} from ./helper.civet

describe "function", ->
  testCase """
    basic
    ---
    f = (x) ->
      x
    ---
    f = function(x) {
      return x;
    };
  """

  testCase """
    one liner
    ---
    (x) -> x
    ---
    function(x) { return x };
  """

  testCase """
    no-op
    ---
    ->
    ---
    function() {};
  """

  testCase """
    one liner keeps comments
    ---
    (/**/x) -> /**/x
    ---
    function(/**/x) { /**/return x };
  """

  testCase """
    empty parameters
    ---
    ->
      x
    ---
    function() {
      return x;
    };
  """

  testCase """
    longhand
    ---
    function()
      x
    ---
    function() {
      x;
    };
  """

  testCase """
    return
    ---
    (x) ->
      return x
    ---
    function(x) {
      return x;
    };
  """

  it "doesn't allow import inside of function ", ->
    throws """
      (x) ->
        import * from 'x';
    """

  testCase """
    fat arrow
    ---
    () => x
    (x) => x
    ---
    () => x;
    (x) => x;
  """

  testCase """
    fat arrow nested body
    ---
    x = =>
      x x
    ---
    x = () => {
      x(x);
    };
  """

  testCase """
    fat interprets single arg without parens as function application
    ---
    x => 5
    ---
    x(() => 5);
  """

  testCase """
    fat arrow nested body with multiple statements
    ---
    x = =>
      x x
      a
      b
    ---
    x = () => {
      x(x);
      a;
      b;
    };
  """

  testCase """
    fat arrow empty block
    ---
    x = =>
    ---
    x = () => {};
  """

  testCase """
    fat arrow return
    ---
    x = =>
      return x
    ---
    x = () => {
      return x;
    };
  """

  testCase """
    fat arrow return
    ---
    x = (a, b) =>
      c := a + b
      return c
    ---
    x = (a, b) => {
      const c = a + b;
      return c;
    };
  """

  testCase """
    decs inside function
    ---
    function () {
      var x = 3
    }
    ---
    function () {
      var x = 3;
    };
  """

  testCase """
    return nested braceless object
    ---
    config = ->
      return
        a: x
        b: y
    ---
    config = function() {
      return {
        a: x,
        b: y,
      };
    };
  """

  testCase """
    return nested braceless object with methods
    ---
    config = ->
      return
        a: getA()
        b: getB()
    ---
    config = function() {
      return {
        a: getA(),
        b: getB(),
      };
    };
  """

  describe "implicit returns", ->
    testCase """
      basic
      ---
      (x) ->
        x
      ---
      function(x) {
        return x;
      };
    """

    testCase """
      parens
      ---
      (x) ->
        (x)
      ---
      function(x) {
        return (x);
      };
    """

    testCase """
      parens and multiple statements
      ---
      (x) ->
        (x)
        a
        b
      ---
      function(x) {
        (x);
        a;
        return b;
      };
    """

    testCase """
      loop
      ---
      (x) ->
        loop
          x
      ---
      function(x) {
        while(true) {
          x;
        };
      };
    """

    testCase """
      don't add implicit return if an explicit return is present
      ---
      (x) ->
        return x
        a
        b
      ---
      function(x) {
        return x;
        a;
        b;
      };
    """

    testCase """
      const shorthand
      ---
      (x) ->
        a := x
      ---
      function(x) {
        const a = x;
      };
    """

    testCase """
      const declaration
      ---
      (x) ->
        const a = 3
      ---
      function(x) {
        const a = 3;
      };
    """

    testCase """
      var declaration
      ---
      (x) ->
        var a = 3
      ---
      function(x) {
        var a = 3;
      };
    """

    testCase """
      let declaration
      ---
      (x) ->
        let a = 3
      ---
      function(x) {
        let a = 3;
      };
    """

    testCase """
      number literal
      ---
      (x) ->
        5
      ---
      function(x) {
        return 5;
      };
    """

    testCase """
      expression
      ---
      (x) ->
        5 + 5
      ---
      function(x) {
        return 5 + 5;
      };
    """

    testCase """
      if/else
      ---
      (x) ->
        if x
          a
        else
          b
      ---
      function(x) {
        if (x) {
          return a;
        }
        else {
          return b;
        };
      };
    """

    testCase """
      switch
      ---
      (x) ->
        switch x
          when 1
            a
          when 2
            b
          default
            c
      ---
      function(x) {
        switch (x) {
          case 1:
            return a;
          case 2:
            return b;
          default:
            return c;
        };
      };
    """

    testCase """
      switch with else
      ---
      (x) ->
        switch x
          when 1
            a
          when 2
            b
          else
            c
      ---
      function(x) {
        switch (x) {
          case 1:
            return a;
          case 2:
            return b;
          default:
            return c;
        };
      };
    """

    testCase """
      throw statement
      ---
      (x) ->
        throw new Error('x')
      ---
      function(x) {
        throw new Error('x');
      };
    """

    testCase """
      debugger statement
      ---
      (x) ->
        debugger
      ---
      function(x) {
        debugger;
      };
    """

    testCase """
      try/catch
      ---
      (x) ->
        try
          a
        catch e
          b
      ---
      function(x) {
        try {
          return a;
        }
        catch (e) {
          return b;
        };
      };
    """
