{ testCase } from ./helper.civet

describe "chained comparisons", ->
  testCase """
    basic
    ---
    a < b < c
    a < b < c < d
    ---
    a < b && b < c
    a < b && b < c && c < d
  """

  testCase """
    lower precedence
    ---
    a < b < c || a > b > c
    ---
    a < b && b < c || a > b && b > c
  """

  testCase """
    higher precedence
    ---
    a + b < c + d < e + f
    ---
    let ref;a + b < (ref = c + d) && ref < e + f
  """

  testCase """
    more higher precedence
    ---
    a + b + x + y < c + d < e + f
    ---
    let ref;a + b + x + y < (ref = c + d) && ref < e + f
  """

  testCase """
    middle precedence
    ---
    z | a < b < c
    a < b < c & x
    z ^ a < b < c ^ x
    ---
    z | (a < b && b < c);
    (a < b && b < c) & x
    z ^ (a < b && b < c) ^ x
  """

  testCase """
    in instanceof combo
    ---
    a in b instanceof C
    ---
    a in b && b instanceof C
  """

  testCase """
    lower precedence and higher precedence mixed
    ---
    a + b < c + d || a + b > c + d
    ---
    a + b < c + d || a + b > c + d
  """

  testCase """
    parens
    ---
    (a < b) < c
    (a + b) < (c + d) < (e + f)
    (a < b) < c
    ---
    (a < b) < c
    let ref;(a + b) < (ref = (c + d)) && ref < (e + f);
    (a < b) < c
  """

  testCase """
    instanceof shorthand is relational
    ---
    a <? b !<? c
    a <? b === c
    ---
    a instanceof b && !(b instanceof c)
    a instanceof b && b === c
  """

  testCase """
    not in
    ---
    a not in b in c
    ---
    !(a in b) && b in c
  """

  testCase """
    not instanceof
    ---
    "civet coffeeNot"
    a not instanceof b instanceof c
    ---
    !(a instanceof b) && b instanceof c
  """

  testCase """
    with ?
    ---
    i? < n
    0 <= i?
    0 <= i? < n
    ---
    i != null && i < n
    i != null && 0 <= i
    i != null && 0 <= i && i < n
  """

  testCase """
    with ? in complex expression
    ---
    0 <= i? < n and x? <? 'object' or a? < b? < c?
    ---
    i != null && 0 <= i && i < n && x != null && typeof x === 'object' || a != null && b != null && a < b && c != null && b < c
  """

  testCase """
    snug chained comparisons
    ---
    a<=b<=c
    ---
    a<=b && b<=c
  """

  testCase """
    snug chained comparisons
    ---
    a<b>c
    ---
    a<b && b>c
  """

  testCase """
    snug not equal
    ---
    a!=b!=c
    ---
    a!=b && b!=c
  """
