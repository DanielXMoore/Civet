{testCase} from ./helper.civet

// https://github.com/DanielXMoore/Civet/issues/643
describe "semicolon insertion", ->
  testCase """
    adjacent function expressions
    ---
    ->
      yield foo
    ->
      await foo
    ---
    (function*() {
      return yield foo
    });
    (async function() {
      return await foo
    })
  """

  testCase """
    async do
    ---
    foo := new Bar

    async do
      console.log "hi"
    ---
    const foo = new Bar;

    (async ()=>{{
      return console.log("hi")
    }})()
  """

  testCase """
    glob assignment
    ---
    point = data.{x,y}
    point.{x,y} = data
    ---
    point = {x:data.x,y:data.y};
    ({x:point.x,y:point.y} = data)
  """

  testCase """
    const dec glob assignment with rests
    ---
    merged := data.{...global, ...user}
    data.{a, b, ...rest} = result
    ---
    const merged = {...data.global, ...data.user};
    ({a:data.a, b:data.b, ...data.rest} = result)
  """

  testCase """
    existential
    ---
    x?
    x.y[z]?
    ---
    (x != null);
    (x.y[z] != null)
  """
