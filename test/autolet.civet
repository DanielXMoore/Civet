{testCase} from ./helper.civet

describe "auto let", ->
    testCase """
        auto let
        ---
        "civet autoLet"
        let v1 = 0
        v2 = 0
        for i of [1]
            v1 = 1
            var v2 = 1
            v3 = 1
            for j of [1]
                v1 = 2
            v2 = 2
        v3 = 2
        ---
        let v1 = 0
        v2 = 0
        for (const i of [1]) {
            v1 = 1
            var v2 = 1
            let v3 = 1
            for (const j of [1]) {
                v1 = 2
            }
            v2 = 2
        }
        let v3 = 2
    """

describe "auto let with function", ->
    testCase """
        auto let with function
        ---
        "civet autoLet"
        b = 1
        function b(a) {
            a = 1
            var b = 2
        }
        a = 2
        ---
        let b = 1
        function b(a) {
            a = 1
            var b = 2
        }
        let a = 2
    """

describe "auto let with multiple declaration", ->
    testCase """
        auto let with multiple declaration
        ---
        "civet autoLet"
        c = "str"
        [a, b] = [1, 2]
        [c, d] = [3, 4]
        ---
        let c = "str"
        let [a, b] = [1, 2]
        let d
        [c, d] = [3, 4]
    """

describe "auto let inner assignment expression", ->
    testCase """
    auto let inner assignment expression
    ---
    "civet autoLet"
    [a, b] = function(a) {
        a = 2
        b = 2
        return [a, b]
    }(a)
    ---
    let [a, b] = function(a) {
        a = 2
        let b = 2
        return [a, b]
    }(a)
    """

describe "auto let with type", ->
    testCase """
    auto let with type
    ---
    "civet autoLet autoWithType"
    foo := () =>
        number = 3
        v1: number = 3
        v2: (number = 3)
        v3: (number = 3)
    ---
    const foo = () => {
        let number = 3
        let v1: number = 3
        return {v2: (number = 3),
        v3: (number = 3)}
    }
    """

describe "auto var with type", ->
    testCase """
    auto var with type
    ---
    "civet autoVar autoWithType"
    foo := () =>
        number = 3
        v1: number = 3
        v2: (number = 3)
        v3: (number = 3)
    ---
    var number
    const foo = () => {
        number = 3
        var v1: number = 3
        return {v2: (number = 3),
        v3: (number = 3)}
    }
    """
