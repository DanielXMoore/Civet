{testCase} from ./helper.civet

describe "try", ->
  testCase """
    basic
    ---
    try
      x()
    catch y
      console.log y
    ---
    try {
      x()
    }
    catch (y) {
      console.log(y)
    }
  """

  testCase """
    single line with comment
    ---
    try x(); // comment
    ---
    try { x(); // comment
     } catch(e) {}
  """

  testCase """
    implied catch
    ---
    try
      x()
    ---
    try {
      x()
    } catch(e) {}
  """

  testCase """
    with extra space and implicit function call in block
    ---
    try
      something
    catch // <- extra space
      report error
    ---
    try {
      something
    }
    catch { // <- extra space
      report(error)
    }
  """

  testCase """
    with extra space
    ---
    try
      something
    catch // <- extra space
      report()
    ---
    try {
      something
    }
    catch { // <- extra space
      report()
    }
  """

  testCase """
    catch with no parameter
    ---
    try
      x()
    catch
      console.log 'error'
    ---
    try {
      x()
    }
    catch {
      console.log('error')
    }
  """

  testCase """
    finally
    ---
    try
      x()
    finally
      console.log y
    ---
    try {
      x()
    }
    finally {
      console.log(y)
    }
  """

  testCase """
    single line
    ---
    try x()
    catch y
      console.log y
    ---
    try { x() }
    catch (y) {
      console.log(y)
    }
  """

  // NOTE: This is different than CoffeeScript https://coffeescript.org/#try:loop%20x()%20if%20y%0Atry%20x()%20if%20y
  testCase """
    another single line
    ---
    try a = 7 if x()
    ---
    if (x()) { try { a = 7 } catch(e) {} }
  """

  testCase """
    catch with type annotation
    ---
    try
      foo()
    catch (e: any)
      console.error e
    ---
    try {
      foo()
    }
    catch (e: any) {
      console.error(e)
    }
  """

  testCase """
    empty block
    ---
    try
    catch
    finally
    ---
    try {}
    catch {}
    finally {}
  """

  testCase """
    catch with then
    ---
    try
      foo()
    catch e then console.error e
    ---
    try {
      foo()
    }
    catch (e) { console.error(e) }
  """

  testCase """
    finally with then
    ---
    try
      foo()
    finally then console.error e
    ---
    try {
      foo()
    }
    finally { console.error(e) }
  """

  describe "expression", ->
    testCase """
      try expression
      ---
      thing = try foo()
      ---
      thing = (()=>{try { return foo() } catch(e) {return}})()
    """

    testCase """
      with catch and finally
      ---
      thing = try foo() catch(e: any) panic() finally phew()
      ---
      thing = (()=>{try { return foo() } catch(e: any) { return panic() } finally { phew() }})()
    """

    testCase """
      returns from implied catch
      ---
      x := try f()
      ---
      let ref;try { ref = f() } catch(e) {ref = void 0;};const x =ref
    """

    testCase """
      assignment with indented block
      ---
      compiled :=
        try
          require('@danielx/civet').compile str, options
        catch err
          return "error"
      ---
      let ref;
        try {
          ref = require('@danielx/civet').compile(str, options)
        }
        catch (err) {
          return "error"
        };const compiled =ref
    """

    testCase """
      pushes in loop
      ---
      y := for x of xs
        try foo()
      ---
      const y = (()=>{const results=[]; for (const x of xs) {
        try { results.push(foo()) } catch(e) {results.push(void 0);}
      }return results})()
    """

    testCase """
      async
      ---
      thing = try await foo()
      ---
      thing = (await (async ()=>{try { return await foo() } catch(e) {return}})())
    """
