{testCase, throws} from ./helper.civet

describe "try", ->
  testCase """
    basic
    ---
    try
      x()
    catch y
      console.log y
    ---
    try {
      x()
    }
    catch (y) {
      console.log(y)
    }
  """

  testCase """
    single line with comment
    ---
    try x(); // comment
    ---
    try { x(); // comment
     } catch(e) {}
  """

  testCase """
    implied catch
    ---
    try
      x()
    ---
    try {
      x()
    } catch(e) {}
  """

  testCase """
    with extra space and implicit function call in block
    ---
    try
      something
    catch // <- extra space
      report error
    ---
    try {
      something
    }
    catch { // <- extra space
      report(error)
    }
  """

  testCase """
    with extra space
    ---
    try
      something
    catch // <- extra space
      report()
    ---
    try {
      something
    }
    catch { // <- extra space
      report()
    }
  """

  testCase """
    catch with no parameter
    ---
    try
      x()
    catch
      console.log 'error'
    ---
    try {
      x()
    }
    catch {
      console.log('error')
    }
  """

  testCase """
    finally
    ---
    try
      x()
    finally
      console.log y
    ---
    try {
      x()
    }
    finally {
      console.log(y)
    }
  """

  testCase """
    single line
    ---
    try x()
    catch y
      console.log y
    ---
    try { x() }
    catch (y) {
      console.log(y)
    }
  """

  // NOTE: This is different than CoffeeScript https://coffeescript.org/#try:loop%20x()%20if%20y%0Atry%20x()%20if%20y
  testCase """
    another single line
    ---
    try a = 7 if x()
    ---
    if (x()) { try { a = 7 } catch(e) {} }
  """

  testCase """
    catch with type annotation
    ---
    try
      foo()
    catch (e: any)
      console.error e
    ---
    try {
      foo()
    }
    catch (e: any) {
      console.error(e)
    }
  """

  testCase """
    empty block
    ---
    try
    catch
    finally
    ---
    try {}
    catch {}
    finally {}
  """

  testCase """
    catch with then
    ---
    try
      foo()
    catch e then console.error e
    ---
    try {
      foo()
    }
    catch (e) { console.error(e) }
  """

  testCase """
    finally with then
    ---
    try
      foo()
    finally then console.error e
    ---
    try {
      foo()
    }
    finally { console.error(e) }
  """

  describe "expression", ->
    testCase """
      try expression
      ---
      thing = try foo()
      ---
      let ref;try { ref = foo() } catch(e) {ref = void 0;};thing = ref
    """

    testCase """
      with catch and finally
      ---
      thing = try foo() catch(e: any) panic() finally phew()
      ---
      let ref;try { ref = foo() } catch(e: any) { ref = panic() } finally { phew() };thing = ref
    """

    testCase """
      returns from implied catch
      ---
      x := try f()
      ---
      let ref;try { ref = f() } catch(e) {ref = void 0;};const x =ref
    """

    testCase """
      assignment with indented block
      ---
      compiled :=
        try
          require('@danielx/civet').compile str, options
        catch err
          return "error"
      ---
      let ref;
        try {
          ref = require('@danielx/civet').compile(str, options)
        }
        catch (err) {
          return "error"
        };const compiled =ref
    """

    testCase """
      pushes in loop
      ---
      y := for x of xs
        try foo()
      ---
      const results=[];for (const x of xs) {
        try { results.push(foo()) } catch(e) {results.push(void 0);}
      };const y =results
    """

    testCase """
      async
      ---
      thing = try await foo()
      ---
      let ref;try { ref = await foo() } catch(e) {ref = void 0;};thing = ref
    """

  describe "try else", ->
    testCase """
      just else
      ---
      try
        foo()
      else
        console.log 'no exception'
      ---
      let ok = true;try {
        foo()
      } catch(e) {ok = false} finally {if(ok) {
        console.log('no exception')
      }}
    """

    testCase """
      catch and else
      ---
      try
        foo()
      catch e
        console.log 'exception', e
      else
        console.log 'no exception'
      ---
      let ok = true;try {
        foo()
      }
      catch (e) {ok = false
        console.log('exception', e)
      } finally {if(ok) {
        console.log('no exception')
      }}
    """

    testCase """
      else and finally
      ---
      try
        foo()
      else
        console.log 'no exception'
      finally
        console.log 'done'
      ---
      let ok = true;try {
        foo()
      } catch(e) {ok = false}
      finally {if(ok) {
        console.log('no exception')
      }
        console.log('done')
      }
    """

    testCase """
      catch and else and finally
      ---
      try
        foo()
      catch e
        console.log 'exception', e
      else
        console.log 'no exception'
      finally
        console.log 'done'
      ---
      let ok = true;try {
        foo()
      }
      catch (e) {ok = false
        console.log('exception', e)
      }
      finally {if(ok) {
        console.log('no exception')
      }
        console.log('done')
      }
    """

  describe "pattern matching catch", ->
    // #1473
    testCase """
      original example
      ---
      try
        foo()
      catch <? RangeError, <? ReferenceError
        console.log 'R...Error'
      catch {message^: /bad/}
        console.log 'bad', message
      catch e
        console.log 'other', e
      ---
      try {
        foo()
      }
      catch(e1) {if(e1 instanceof RangeError || e1 instanceof ReferenceError) {
        console.log('R...Error')
      }
      else if(typeof e1 === 'object' && e1 != null && 'message' in e1 && typeof e1.message === 'string' && /bad/.test(e1.message)) {const {message} = e1;
        console.log('bad', message)
      }
      else  {let e = e1;
        console.log('other', e)
      }}
    """

    testCase """
      without default case
      ---
      try
        foo()
      catch <? RangeError
        console.log 'RangeError!'
      ---
      try {
        foo()
      }
      catch(e) {if(e instanceof RangeError) {
        console.log('RangeError!')
      }
      else  {throw e}}
    """

    throws """
      multiple normal blocks
      ---
      try
        foo()
      catch e1
      catch e2
      ---
      ParseErrors: unknown:3:10 Only one catch clause allowed unless using pattern matching
    """

  describe "lone finally blocks", ->
    testCase """
      basic
      ---
      init()
      finally cleanup()
      process()
      process()
      ---
      init()
      try {
      process()
      process()} finally { cleanup() }
    """

    testCase """
      indented block
      ---
      init()
      finally
        cleanup1()
        cleanup2()
      process()
      process()
      ---
      init()
      try {
      process()
      process()} finally {
        cleanup1()
        cleanup2()
      }
    """

    testCase """
      multiple blocks
      ---
      init()
      finally cleanup()
      loop
        start()
        finally stop()
        process()
      ---
      init()
      try {
      while(true) {
        start()
        try {
        process()} finally { stop() }
      }} finally { cleanup() }
    """

    testCase """
      multiple consecutive finally
      ---
      init()
      finally cleanup1()
      finally cleanup2()
      process()
      ---
      init()
      try {
      try {
      process()} finally { cleanup2() }} finally { cleanup1() }
    """

    testCase """
      multiple nonconsecutive finally
      ---
      init1()
      finally cleanup1()
      init2()
      finally cleanup2()
      process()
      ---
      init1()
      try {
      init2()
      try {
      process()} finally { cleanup2() }} finally { cleanup1() }
    """
