{testCase} from ./helper.civet

describe "try", ->
  testCase """
    basic
    ---
    try
      x()
    catch y
      console.log y
    ---
    try {
      x()
    }
    catch (y) {
      console.log(y)
    }
  """

  testCase """
    implied catch
    ---
    try
      x()
    ---
    try {
      x()
    } catch(e) {}
  """

  testCase """
    catch with no parameter
    ---
    try
      x()
    catch
      console.log 'error'
    ---
    try {
      x()
    }
    catch {
      console.log('error')
    }
  """

  testCase """
    finally
    ---
    try
      x()
    finally
      console.log y
    ---
    try {
      x()
    }
    finally {
      console.log(y)
    }
  """

  testCase """
    single line
    ---
    try x()
    catch y
      console.log y
    ---
    try { x() }
    catch (y) {
      console.log(y)
    }
  """

  // NOTE: This is different than CoffeeScript https://coffeescript.org/#try:loop%20x()%20if%20y%0Atry%20x()%20if%20y
  testCase """
    another single line
    ---
    try a = 7 if x()
    ---
    if (x()) { try { a = 7 } catch(e) {} }
  """

  testCase """
    catch with type annotation
    ---
    try
      foo()
    catch (e: any)
      console.error e
    ---
    try {
      foo()
    }
    catch (e: any) {
      console.error(e)
    }
  """

  testCase """
    empty block
    ---
    try
    catch
    finally
    ---
    try {}
    catch {}
    finally {}
  """

  testCase """
    catch with then
    ---
    try
      foo()
    catch e then console.error e
    ---
    try {
      foo()
    }
    catch (e) console.error(e)
  """

  describe "expression", ->
    testCase """
      try expression
      ---
      thing = try foo()
      ---
      thing = (()=>{try { return foo() } catch(e) {}})()
    """
    testCase """
      with catch and finally
      ---
      thing = try foo() catch(e: any) panic() finally phew()
      ---
      thing = (()=>{try { return foo() } catch(e: any) { return panic() } finally { phew() }})()
      """
