{ testCase, throws } from ./helper.civet

describe "&. function block shorthand", ->
  testCase """
    accessor
    ---
    x.map &.name
    ---
    x.map($ => $.name)
  """

  testCase """
    optional access
    ---
    x.map &?.name
    ---
    x.map($ => $?.name)
  """

  testCase """
    omit &
    ---
    x.map .name
    ---
    x.map($ => $.name)
  """

  testCase """
    identity function
    ---
    x.map &
    ---
    x.map($ => $)
  """

  testCase """
    identity with content on next line
    ---
    x.filter &
    y
    ---
    x.filter($ => $)
    y
  """

  testCase """
    omit & with ?
    ---
    x.map ?.name
    ---
    x.map($ => $?.name)
  """

  testCase """
    omit & doesn't break numbers
    ---
    x.map .1
    ---
    x.map(.1)
  """

  testCase """
    index
    ---
    x.map &[0]
    ---
    x.map($ => $[0])
  """

  testCase """
    optional index
    ---
    x.map &?[0]
    ---
    x.map($ => $?.[0])
  """

  testCase """
    index with expression
    ---
    x.map &[b + 1]
    ---
    x.map($ => $[b + 1])
  """

  testCase """
    slice
    ---
    x.map &[0..2]
    ---
    x.map($ => $.slice(0, 1 + 2 || 1/0))
  """

  testCase """
    kitchen sink
    ---
    x.map &.profile?.name?[0..2]
    ---
    x.map($ => $.profile?.name?.slice(0, 1 + 2 || 1/0))
  """

  testCase """
    assignment
    ---
    x.map .name = "foo"
    ---
    x.map($ => $.name = "foo")
  """

  testCase """
    multiple assignment
    ---
    x.map .name = name += "foo"
    ---
    x.map($ => $.name = name += "foo")
  """

  testCase """
    addition
    ---
    x.map &+1
    x.map & + 1
    x.map 1+&
    x.map 1 + &
    ---
    x.map($ => $+1)
    x.map($1 => $1 + 1)
    x.map($2 => 1+$2)
    x.map($3 => 1 + $3)
  """

  testCase """
    addition in parens
    ---
    (&+1)
    ---
    $ => ($+1)
  """

  testCase """
    subtraction
    ---
    x.map &-1
    ---
    x.map($ => $-1)
  """

  testCase """
    bitwise and
    ---
    x.map & & 1
    ---
    x.map($ => $ & 1)
  """

  testCase """
    bitwise or
    ---
    x.map & | 1
    ---
    x.map($ => $ | 1)
  """

  testCase """
    logical and
    ---
    x.map & && 1
    ---
    x.map($ => $ && 1)
  """

  testCase """
    logical or
    ---
    x.map & || 1
    ---
    x.map($ => $ || 1)
  """

  testCase """
    increment modulo
    ---
    x.map (& + 1) % n
    ---
    x.map($ => ($ + 1) % n)
  """

  testCase """
    chained comparisons
    ---
    x.map & > a < b
    x.map a < & < b
    ---
    x.map($ => $ > a && a < b)
    x.map($1 => a < $1 && $1 < b)
  """

  testCase """
    access with chained comparisons
    ---
    x.map &.foo > a < b
    ---
    x.map($ => $.foo > a && a < b)
  """

  testCase """
    special operator
    ---
    x.map & is in a
    ---
    x.map($ => a.includes($))
  """

  testCase """
    access with special operator
    ---
    x.map &.foo is in a
    ---
    x.map($ => a.includes($.foo))
  """

  testCase """
    assignment and binary operator
    ---
    x.map &.name = 'name' + i++
    ---
    x.map($ => $.name = 'name' + i++)
  """

  testCase """
    $ as local value
    ---
    x.map & < 3 && $ > 1
    ---
    x.map($1 => $1 < 3 && $ > 1)
  """

  testCase """
    unary !
    ---
    x.map !&
    ---
    x.map($ => !$)
  """

  testCase """
    unary !!
    ---
    x.map !!&
    ---
    x.map($ => !!$)
  """

  testCase """
    unary not
    ---
    x.map not &
    ---
    x.map($ => !$)
  """

  testCase """
    unary not not
    ---
    x.map not not &
    ---
    x.map($ => !!$)
  """

  testCase """
    unary ~
    ---
    x.map ~&
    ---
    x.map($ => ~$)
  """

  testCase """
    unary -
    ---
    x.map -&
    ---
    x.map($ => -$)
  """

  testCase """
    unary +
    ---
    x.map +&
    ---
    x.map($ => +$)
  """

  testCase """
    unary typeof
    ---
    x.map typeof &
    ---
    x.map($ => typeof $)
  """

  testCase """
    unary delete
    ---
    x.forEach delete .old
    ---
    x.forEach($ => delete $.old)
  """

  testCase """
    unary await
    ---
    await.all x.map await .json()
    ---
    await Promise.all(x.map(async $ => await $.json()))
  """

  throws """
    not.prop
    ---
    x.map not.prop
    ---
    ParseError
  """

  throws """
    typeof.prop
    ---
    x.map typeof.prop
    ---
    ParseError
  """

  throws """
    delete.prop
    ---
    x.map delete.prop
    ---
    ParseError
  """

  testCase """
    call expression
    ---
    x.map &.foo()
    ---
    x.map($ => $.foo())
  """

  testCase """
    call expression with arguments
    ---
    x.map &.foo(1, 2, 3)
    ---
    x.map($ => $.foo(1, 2, 3))
  """

  testCase """
    call expression with arguments and splat
    ---
    x.map &.foo(b, ...rest)
    ---
    x.map($ => $.foo(b, ...rest))
  """

  testCase """
    call expression with implicit application
    ---
    x.map &.foo 1, 2
    ---
    x.map($ => $.foo(1, 2))
  """

  testCase """
    access, index, and call expression followed by index and safe access
    ---
    x.map &.foo[0].bar()[2]?.baz
    ---
    x.map($ => $.foo[0].bar()[2]?.baz)
  """

  testCase """
    template literal
    ---
    x.map &`foo`
    ---
    x.map($ => $`foo`)
  """

  testCase """
    array wrapping
    ---
    x.map [&]
    x.map [&, x]
    x.map [&, &]
    x.map [...&]
    x.map [[&]]
    ---
    x.map($ => [$])
    x.map($1 => [$1, x])
    x.map($2 => [$2, $2])
    x.map($3 => [...$3])
    x.map($4 => [[$4]])
  """

  testCase """
    object wrapping
    ---
    x.map x: &
    x.map {x: &}
    ---
    x.map($ => ({x: $}))
    x.map($1 => ({x: $1}))
  """

  testCase """
    ternary expression
    ---
    a := & ? & : 0
    b := & ? &+1 : -&
    ---
    const a = $ => $ ? $ : 0
    const b = $1 => $1 ? $1+1 : -$1
  """

  testCase """
    if expression
    ---
    check := if & then x else y
    ---
    const check = $ => ($? x : y)
  """

  testCase """
    if expression with & in then
    ---
    check := if & then &+1 else y
    ---
    const check = $ => ($? ($+1) : y)
  """

  testCase """
    if expression with & in else
    ---
    check := if & then x else &
    ---
    const check = $ => ($? x : $)
  """

  testCase """
    big if/else expression
    ---
    arr.map
      if &.x
        &.foo
      else if &.y
        &.bar
      else
        &.baz
    ---
    arr.map($ =>\u0020
      (()=>{if ($.x) {
        return $.foo
      }
      else if ($.y) {
        return $.bar
      }
      else {
        return $.baz
      }})(),)
  """

  testCase """
    if expression without & in condition
    ---
    roundUp := if even then & else &+1
    ---
    let ref;if (even) ref = $ => $; else ref = $1 => $1+1;const roundUp =ref
  """

  testCase """
    if statement
    ---
    =>
      if & then x else y
    ---
    () => {
      return $ => { if ($) return x; else return y}
    }
  """

  testCase """
    it works with assignment
    ---
    x = &.name
    x = .name
    ---
    x = $ => $.name
    x = $1 => $1.name
  """

  testCase """
    it works with assignment and binary operators
    ---
    x = & + 1
    ---
    x = $ => $ + 1
  """

  testCase """
    it works with const assignment
    ---
    const x = &.foo
    ---
    const x = $ => $.foo
  """

  testCase """
    it works with const assignment shorthand
    ---
    x := &.foo
    ---
    const x = $ => $.foo
  """

  testCase """
    it works with return
    ---
    return &.foo
    ---
    return $ => $.foo
  """

  testCase """
    it works with yield
    ---
    -> yield &.foo
    ---
    (function*() { return yield $ => $.foo })
  """

  testCase """
    await
    ---
    x.map & + await f()
    ---
    x.map(async $ => $ + await f())
  """

  testCase """
    non-null
    ---
    arr.filter &?
    ---
    arr.filter($ => ($ != null))
  """

  testCase """
    type cast
    ---
    arr.map & as any
    ---
    arr.map($ => $ as any)
  """

  testCase """
    null
    ---
    arr.filter !&?
    ---
    arr.filter($ => ($ == null))
  """

  testCase """
    property non-null
    ---
    hasNull := arr.every .x?
    ---
    const hasNull = arr.every($ => ($.x != null))
  """

  testCase """
    property null
    ---
    hasNull := arr.every !.x?
    ---
    const hasNull = arr.every($ => ($.x == null))
  """

  testCase """
    & function block followed by pipe
    ---
    &.foo |> bar
    ---
    $ => bar($.foo)
  """

  testCase """
    mix with . at different level
    ---
    f . + &
    ---
    $ => f($1 => $ + $1)
  """

  testCase """
    mix with . at similar level
    ---
    & + f .
    ---
    $ => $ + ($1 => f($1))
  """

  testCase """
    autoVar
    ---
    'civet autoVar'
    & + x = 5
    ---
    $ => { var x; return $ + (x = 5)}
  """

  testCase """
    autoLet
    ---
    'civet autoLet'
    & + x = 5
    ---
    let x;
    $ => $ + (x = 5)
  """

  describe "multiple &", ->
    testCase """
      self-addition
      ---
      x.map &+&
      x.map & + &
      ---
      x.map($ => $+$)
      x.map($1 => $1 + $1)
    """

    testCase """
      self-multiplication
      ---
      &*&
      ---
      $ => $*$
    """

    testCase """
      &.x + &.y
      ---
      &.x + &.y
      ---
      $ => $.x + $.y
    """

    testCase """
      .x + .y
      ---
      .x + .y
      ---
      $ => $.x + $.y
    """

    testCase """
      in function call
      ---
      f &.x + &.y
      f .x + .y
      ---
      f($ => $.x + $.y)
      f($1 => $1.x + $1.y)
    """

    testCase """
      in one-line fat arrow function
      ---
      => &.x + &.y
      ---
      () => $ => $.x + $.y
    """

    testCase """
      in one-line thin arrow function
      ---
      -> &.x + &.y
      ---
      (function() { return $ => $.x + $.y })
    """

    testCase """
      in (or)
      ---
      (or)
        &.x
        &.y
      ---
      $ => ((
        $.x)||(
        $.y))
    """

  describe "typed &", ->
    testCase """
      identity
      ---
      &: number
      ---
      ($: number) => $
    """

    testCase """
      optional
      ---
      &?: number
      ---
      ($?: number) => $
    """

    testCase """
      with operator
      ---
      &: number + 1
      ---
      ($: number) => $ + 1
    """

    testCase """
      with pipe
      ---
      &: number |> foo
      ---
      ($: number) => foo($)
    """

describe "(op) shorthand", ->
  testCase """
    binary op
    ---
    items.reduce (+), 0
    items.reduce (&&), true
    items.reduce (||), false
    ---
    items.reduce(((a,b) => a+b), 0)
    items.reduce(((a1,b1) => a1&&b1), true)
    items.reduce(((a2,b2) => a2||b2), false)
  """

  testCase """
    binary &
    ---
    items.reduce (&), 0xffff
    ---
    items.reduce(((a,b) => a&b), 0xffff)
  """

  testCase """
    compose binary op
    ---
    compose (+), (*)
    ---
    compose(((a,b) => a+b), ((a1,b1) => a1*b1))
  """

  testCase """
    apply binary op
    ---
    (+) 1, 2
    ---
    ((1)+( 2))
  """

  testCase """
    apply binary op with one argument
    ---
    (+) 1
    ---
    (1)
  """

  testCase """
    apply binary op with no arguments
    ---
    (+)()
    (+)( /* comment */ )
    ---
    ((a,b) => a+b)();
    ((a1,b1) => a1+b1)( /* comment */ )
  """

  testCase """
    apply binary op ASI
    ---
    (+) 1,2
    (+) 1
    (+) 1,2
    ---
    ((1)+(2));
    (1);
    ((1)+(2))
  """

  testCase """
    apply binary op with many complex arguments
    ---
    (*) x+y, z+w, a**b
    ---
    ((x+y)*( z+w)*( a**b))
  """

  testCase """
    indented apply binary op
    ---
    (and)
      x
      y, yy
      z
    ---
    ((
      x)&&(
      y)&&( yy)&&(
      z))
  """

  testCase """
    apply binary op with trailing comma
    ---
    (+)(1, )
    (+)(1, 2, )
    (+)(1, 2, /* comment */ )
    ---
    (1 );
    ((1)+( 2 ));
    ((1)+( 2 /* comment */ ))
  """

  testCase """
    apply binary op with comma operator
    ---
    (+)((1, 2), (3, 4))
    ---
    (((1, 2))+( (3, 4)))
  """

  testCase """
    apply binary op with function call
    ---
    (+)
      f(1, 2)
      f(3, 4)
    ---
    ((
      f(1, 2))+(
      f(3, 4)))
  """

  testCase """
    parenthesized special op
    ---
    items.reduce (is in), false
    ---
    items.reduce(((a,b) => b.includes(a)), false)
  """

  testCase """
    parenthesized custom op
    ---
    operator foo
    items.reduce (foo), 0
    ---

    items.reduce(foo, 0)
  """

  testCase """
    parenthesized negated custom op
    ---
    operator foo
    items.reduce (not foo), false
    ---

    items.reduce(((a,b) => !foo(a,b)), false)
  """

  testCase """
    parenthesized ! custom op
    ---
    operator foo
    items.reduce (!foo), false
    ---

    items.reduce(((a,b) => !foo(a,b)), false)
  """

  testCase """
    applied parenthesized custom op
    ---
    operator foo
    (foo) 1, 2
    ---

    foo(1, 2)
  """

describe "operator sections", ->
  testCase """
    left section
    ---
    items.map (1+)
    ---
    items.map((b => 1+b))
  """

  testCase """
    left section with spaces
    ---
    items.map (1 + )
    ---
    items.map((b => 1 + b))
  """

  testCase """
    complex left section
    ---
    items.map (length * width + )
    ---
    items.map((b => length * width + b))
  """

  testCase """
    right section
    ---
    items.map (**2)
    ---
    items.map((a => a**2))
  """

  testCase """
    right section with spaces
    ---
    items.map ( + 1)
    ---
    items.map((a => a + 1))
  """

  testCase """
    +/- without space isn't section
    ---
    f (+x), (-x)
    ---
    f((+x), (-x))
  """

  testCase """
    complex right section
    ---
    items.map ( + length * width)
    ---
    items.map((a => a + length * width))
  """

  testCase """
    = section
    ---
    new Promise (resolve =)
    ---
    new Promise((b => resolve =b))
  """

  testCase """
    += section
    ---
    callback := (sum += /*num*/)
    ---
    const callback = (b => sum += /*num*/b)
  """
