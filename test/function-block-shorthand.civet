{ testCase } from ./helper.civet

describe "&. function block shorthand", ->
  testCase """
    accessor
    ---
    x.map &.name
    ---
    x.map($ => $.name)
  """

  testCase """
    optional access
    ---
    x.map &?.name
    ---
    x.map($ => $?.name)
  """

  testCase """
    index
    ---
    x.map &[0]
    ---
    x.map($ => $[0])
  """

  testCase """
    optional index
    ---
    x.map &?[0]
    ---
    x.map($ => $?.[0])
  """

  testCase """
    index with expression
    ---
    x.map &[b + 1]
    ---
    x.map($ => $[b + 1])
  """

  testCase """
    slice
    ---
    x.map &[0..2]
    ---
    x.map($ => $.slice(0, 1 + 2 || 1/0))
  """

  testCase """
    kitchen sink
    ---
    x.map &.profile?.name?[0..2]
    ---
    x.map($ => $.profile?.name?.slice(0, 1 + 2 || 1/0))
  """

  testCase """
    addition
    ---
    x.map &+1
    ---
    x.map($ => $+1)
  """

  testCase """
    subtraction
    ---
    x.map &-1
    ---
    x.map($ => $-1)
  """

  testCase """
    bitwise and
    ---
    x.map & &1
    ---
    x.map($ => $ &1)
  """

  testCase """
    bitwise or
    ---
    x.map & |1
    ---
    x.map($ => $ |1)
  """

  testCase """
    logical and
    ---
    x.map & &&1
    ---
    x.map($ => $ &&1)
  """

  testCase """
    logical or
    ---
    x.map & ||1
    ---
    x.map($ => $ ||1)
  """

  testCase """
    chained comparisons
    ---
    x.map & > a < b
    ---
    x.map($ => $ > a && a < b)
  """

  testCase """
    access with chained comparisons
    ---
    x.map &.foo > a < b
    ---
    x.map($ => $.foo > a && a < b)
  """

  testCase """
    special operator
    ---
    x.map & is in a
    ---
    const indexOf: <T>(this: T[], searchElement: T) => boolean = [].indexOf as any
    x.map($ => indexOf.call(a, $) >= 0)
  """

  testCase """
    access with special operator
    ---
    x.map &.foo is in a
    ---
    const indexOf: <T>(this: T[], searchElement: T) => boolean = [].indexOf as any
    x.map($ => indexOf.call(a, $.foo) >= 0)
  """

  testCase """
    $ as local value
    ---
    x.map & < 3 && $ > 1
    ---
    x.map($1 => $1 < 3 && $ > 1)
  """

  testCase """
    unary !
    ---
    x.map !&
    ---
    x.map($ => !$)
  """

  testCase """
    unary !!
    ---
    x.map !!&
    ---
    x.map($ => !!$)
  """

  testCase """
    unary ~
    ---
    x.map ~&
    ---
    x.map($ => ~$)
  """

  testCase """
    unary -
    ---
    x.map -&
    ---
    x.map($ => -$)
  """

  testCase """
    unary +
    ---
    x.map +&
    ---
    x.map($ => +$)
  """

  testCase """
    call expression
    ---
    x.map &.foo()
    ---
    x.map($ => $.foo())
  """

  testCase """
    call expression with arguments
    ---
    x.map &.foo(1, 2, 3)
    ---
    x.map($ => $.foo(1, 2, 3))
  """

  testCase """
    call expression with arguments and splat
    ---
    x.map &.foo(b, ...rest)
    ---
    x.map($ => $.foo(b, ...rest))
  """

  testCase """
    call expression with implicit application
    ---
    x.map &.foo 1, 2
    ---
    x.map($ => $.foo(1, 2))
  """

  testCase """
    access, index, and call expression followed by index and safe access
    ---
    x.map &.foo[0].bar()[2]?.baz
    ---
    x.map($ => $.foo[0].bar()[2]?.baz)
  """

  testCase """
    template literal
    ---
    x.map &`foo`
    ---
    x.map($ => $`foo`)
  """

  testCase """
    it works with const assignment
    ---
    x := &.foo
    ---
    const x = $ => $.foo
  """
