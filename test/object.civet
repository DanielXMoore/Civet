{testCase, throws, wrapper} from ./helper.civet

describe "object", ->
  testCase """
    empty literal
    ---
    {}
    ---
    ({})
  """

  testCase """
    comma-separated literals
    ---
    {},{},{}
    ---
    ({}),({}),({})
  """

  testCase """
    basic
    ---
    a = {x: 1, y: 2}
    ---
    a = {x: 1, y: 2}
  """

  testCase """
    keys are not reserved
    ---
    a =
      if: "cool"
      case: 1
    ---
    a = {
      if: "cool",
      case: 1,
    }
  """

  testCase """
    spread
    ---
    y = {...x}
    ---
    y = {...x}
  """

  testCase """
    multiple spread
    ---
    y = {...x, ...z}
    ---
    y = {...x, ...z}
  """

  testCase """
    content after spread
    ---
    {
      ...target
      token: target.token
    }
    ---
    ({
      ...target,
      token: target.token
    })
  """

  testCase """
    content after spread with delimiters
    ---
    rest = {
      ...rest,
      delim: lastDelim,
      children: [...rest.children.slice(0, -1), lastDelim],
    }
    ---
    rest = {
      ...rest,
      delim: lastDelim,
      children: [...rest.children.slice(0, -1), lastDelim],
    }
  """

  testCase """
    single line literal
    ---
    a: b
    ---
    ({a: b})
  """

  testCase """
    single line literal with method
    ---
    {x, func(){5}}
    ---
    ({x, func(){return 5}})
  """

  testCase """
    object literal with empty method content
    ---
    {x, func(){}}
    ---
    ({x, func(){}})
  """

  testCase """
    object literal with semicolon method content
    ---
    {
      a();
      b();
    }
    ---
    ({
      a() {; },
      b() {; }
    })
  """

  testCase """
    flagging shorthand inline
    ---
    {+x, -y, !z}
    ---
    ({x: true, y: false, z: false})
  """

  testCase """
    flagging shorthand multiline
    ---
    {
      +x
      -y
    }
    ---
    ({
      x: true,
      y: false
    })
  """

  testCase """
    flagging shorthand with numeric, string, template, computed keys
    ---
    {
      -1
      !1
      +1
      +"a"
      !`b`
      +[c]
      +0
      !-1
      +-0
    }
    ---
    ({
      1: false,
      1: false,
      1: true,
      "a": true,
      [`b`]: false,
      [c]: true,
      0: true,
      [-1]: false,
      [-0]: true
    })
  """

  testCase """
    negative number as computed name
    ---
    {
      -1: 5
    }
    ---
    ({
      [-1]: 5
    })
  """

  testCase """
    positive number as computed name
    ---
    {
      +1: 5
    }
    ---
    ({
      [+1]: 5
    })
  """

  testCase """
    computed property name
    ---
    { [x]: 5 }
    ---
    ({ [x]: 5 })
  """

  testCase """
    multiline unnested literal
    ---
    a: b
    b: c
    ---
    ({a: b,
    b: c})
  """

  testCase """
    keeps comments
    ---
    { /**/ x}
    ---
    ({ /**/ x})
  """

  testCase """
    spread
    ---
    { ...x }
    ---
    ({ ...x })
  """

  // describe.only "", ->
  testCase """
    optional commas
    ---
    x = {
      a
      b,
      c
    }
    ---
    x = {
      a,
      b,
      c
    }
  """

  throws """
    doesn't allow bare assignments inside
    ---
    {x=y}
    ---
    ParseError
  """

  throws """
    doesn't allow update assignments inside
    ---
    {x+=y}
    ---
    ParseError
  """

  throws """
    doesn't allow update assignments inside
    ---
    {x-=y}
    ---
    ParseError
  """

  throws """
    doesn't allow comparisons inside
    ---
    {x<=y}
    ---
    ParseError
  """

  testCase """
    allows for extra newlines and whitespace with braces
    ---
    x = {
      a:
              4
    }
    ---
    x = {
      a:
              4
    }
  """

  testCase """
    indented properties after same-line properties #589
    ---
    {url, blob,
     width: img.width
     height: img.height
    }
    ---
    ({url, blob,
     width: img.width,
     height: img.height
    })
  """

  testCase """
    nested object syntax
    ---
    x =
      a: 1
      b: 2
      c:
        d: "a"
        e: "b"
    ---
    x = {
      a: 1,
      b: 2,
      c: {
        d: "a",
        e: "b",
      },
    }
  """

  testCase """
    mix of top-level and inline
    ---
    signature: modifier: {}
    children: []
    ---
    ({signature: {modifier: {}},
    children: []})
  """

  testCase """
    mix of nested and inline
    ---
    x =
      signature: modifier: {}
      children: []
    ---
    x = {
      signature: {modifier: {}},
      children: [],
    }
  """

  testCase """
    expression values
    ---
    x =
      a: getA()
      b: getB()
    ---
    x = {
      a: getA(),
      b: getB(),
    }
  """

  testCase """
    method definition
    ---
    x = {
      id()
        return 5
    }
    ---
    x = {
      id() {
        return 5
      }
    }
  """

  testCase """
    method get definition
    ---
    x = {
      get id()
        return 5
    }
    ---
    x = {
      get id() {
        return 5
      }
    }
  """

  testCase """
    method set definition
    ---
    x = {
      set id(v)
        @id = v
    }
    ---
    x = {
      set id(v) {
        this.id = v
      }
    }
  """

  describe "get shorthand", ->
    testCase """
      object getter
      ---
      {
        get data
      }
      ---
      ({
        get data(){ return data }
      })
    """

    testCase """
      object getters
      ---
      {
        get data.x
        get data.y
      }
      ---
      ({
        get x(){ return data.x },
        get y(){ return data.y }
      })
    """

    testCase """
      object brace expansion
      ---
      {
        get data.{x: x1, y}
      }
      ---
      ({
        get x(){ return data.x1 },get y(){ return data.y }
      })
    """

    testCase """
      object brace expansion with following content
      ---
      {
        get data.{x: x1, y}
        data
      }
      ---
      ({
        get x(){ return data.x1 },get y(){ return data.y },
        data
      })
    """

  testCase """
    async method definition
    ---
    x = {
      async x()
        return 5
    }
    ---
    x = {
      async x() {
        return 5
      }
    }
  """

  testCase """
    implicit async method definition
    ---
    x = {
      x()
        await 5
    }
    ---
    x = {
      async x() {
        return await 5
      }
    }
  """

  testCase """
    generator method definition
    ---
    x = {
      *x()
        return 5
    }
    ---
    x = {
      *x() {
        return 5
      }
    }
  """

  testCase """
    implicit generator method definition
    ---
    x = {
      x()
        yield 5
    }
    ---
    x = {
      *x() {
        return yield 5
      }
    }
  """

  testCase """
    async generator method definition
    ---
    x = {
      async * x()
        return 5
    }
    ---
    x = {
      async * x() {
        return 5
      }
    }
  """

  testCase """
    shorthand key value notation
    ---
    return {
      x: ->
        y
      options
      z: ->
        "y"
    }
    ---
    return {
      x: function() {
        return y
      },
      options,
      z: function() {
        return "y"
      }
    }
  """

  testCase """
    identifiers that start with get/set
    ---
    return {
      getx: -> x
      sety: (y) -> @y = y
    }
    ---
    return {
      getx: function() { return x },
      sety: function(y) { return this.y = y }
    }
  """

  testCase """
    multiline with optional commas
    ---
    {count, starts, compact, repeat, invertLiterate, merge,
    attachCommentsToNode, locationDataToString, throwSyntaxError
    replaceUnicodeCodePointEscapes, flatten, parseNumber} = require './helpers'
    ---
    ({count, starts, compact, repeat, invertLiterate, merge,
    attachCommentsToNode, locationDataToString, throwSyntaxError,
    replaceUnicodeCodePointEscapes, flatten, parseNumber} = require('./helpers'))
  """

  testCase """
    shorthand this property
    ---
    {@tokens, index: i}
    ---
    ({tokens: this.tokens, index: i})
  """

  testCase """
    braceless object
    ---
    a: 1
    ---
    ({a: 1})
  """

  testCase """
    braceless object with multiple keys
    ---
    a: 1, b: 2
    ---
    ({a: 1, b: 2})
  """

  testCase """
    braceless object with multiple keys per line
    ---
    a: 1, b: 2
    c: 3, d: 4
    ---
    ({a: 1, b: 2,
    c: 3, d: 4})
  """

  testCase """
    braceless object with trailing comma
    ---
    a: 1,
    ---
    ({a: 1,})
  """

  testCase """
    2-element braceless object with trailing comma
    ---
    a: 1,
    b: 2,
    ---
    ({a: 1,
    b: 2,})
  """

  testCase """
    braceless object with function values
    ---
    obj =
      a: => 1
      b: => 2
    ---
    obj = {
      a: () => 1,
      b: () => 2,
    }
  """

  testCase """
    braceless object with function calls
    ---
    obj =
      a: f 1
      b: f 2
    ---
    obj = {
      a: f(1),
      b: f(2),
    }
  """

  testCase """
    indented 2-element braceless object with trailing comma
    ---
    if x
      a: 1,
      b: 2,
    ---
    if (x) {
      ({a: 1,
      b: 2,})
    }
  """

  // NOTE: This deviates from CoffeeScript
  testCase """
    postfix within indented braceless object, 1 prop
    ---
    f
      a: 1 if hasA
    ---
    f({
      a:(hasA? 1:void 0),
    })
  """

  testCase """
    postfix within indented braceless object, 2 props
    ---
    f
      a: 1 if hasA
      b: 2 if hasB
    ---
    f({
      a:(hasA? 1:void 0),
      b:(hasB? 2:void 0),
    })
  """

  testCase """
    postfix within braceless object, 1 prop
    ---
    f a: 1 if call
    ---
    if (call) { f({a: 1}) }
  """

  testCase """
    postfix within braceless object, 2 props
    ---
    function f()
      a: 1 if hasA
      b: 2 if hasB
    ---
    function f() {
      return ({a:(hasA? 1:void 0),
      b:(hasB? 2:void 0)})
    }
  """; // TODO: thinks next triple quote is a call expression

  """
    async
    break
    class
    catch
    comptime
    const
    continue
    declare
    default
    delete
    do
    else
    extends
    finally
    from
    let
    loop
    new
    not
    of
    operator
    private
    protected
    public
    readonly
    return
    satisfies
    set
    static
    switch
    target
    this
    throw
    try
    type
    typeof
    unless
    until
    var
    void
    when
    while
    yield
  """.split('\n').forEach (line) ->
    testCase ```
      braceless object with ${line} as key
      ---
      ${line}: 1
      ---
      ({${line}: 1})
    ```

    testCase ```
      coffee compat braceless object with ${line} as key
      ---
      "civet coffeeCompat"
      ${line}: 1
      ---
      ({${line}: 1})
    ```

  testCase """
    braceless object with continue as key in loop
    ---
    loop
      continue: 1
    ---
    while(true) {
      ({continue: 1})
    }
  """

  testCase """
    braceless inline object in function call
    ---
    f a: 1, b: 2, c, d
    ---
    f({a: 1, b: 2}, c, d)
  """

  testCase """
    multiline inline object in function call
    ---
    f a: 1,
    b: 2
    ---
    f({a: 1,
    b: 2})
  """

  testCase """
    failed braceless inline object in function call
    ---
    f a: 1
    b: 2
    ---
    f({a: 1});
    ({b: 2})
  """

  testCase """
    braceless object in function call with commas
    ---
    f
      a: 1,
      b: 2,
    ---
    f({
      a: 1,
      b: 2,
    })
  """

  testCase """
    braceless object in function call without commas
    ---
    f
      a: 1
      b: 2
    ---
    f({
      a: 1,
      b: 2,
    })
  """

  testCase """
    braceless object with function calls in function call
    ---
    f
      a: g 1
      b: g 2
    ---
    f({
      a: g(1),
      b: g(2),
    })
  """

  testCase """
    dedented braceless object literals
    ---
    if x
      a: 1,
    b: 2
    ---
    if (x) {
      ({a: 1,})
    };
    ({b: 2})
  """

  testCase """
    multiple keys per line
    ---
    {
      a, b
      c, d
    }
    ---
    ({
      a, b,
      c, d
    })
  """

  testCase """
    multiple keys and values per line
    ---
    obj :=
      a: 1, b: 2,
      c: 3, d: 4
    ---
    const obj = {
      a: 1, b: 2,
      c: 3, d: 4,
    }
  """

  testCase """
    multiple keys and values per line, continued
    ---
    obj := a: 1, b: 2,
      c: 3, d: 4
    ---
    const obj = {a: 1, b: 2,
      c: 3, d: 4}
  """

  testCase """
    single nested object as function return value
    ---
    json: (srcFileName, outFileName) ->
      version: 3
    updateSourceMap: (outputStr, inputPos) -> outputStr
    ---
    ({json: function(srcFileName, outFileName) {
      return ({version: 3})
    },
    updateSourceMap: function(outputStr, inputPos) { return outputStr }})
  """

  testCase """
    template literal key shorthand
    ---
    {`x${y}z`: value}
    ---
    ({[`x${y}z`]: value})
  """

  testCase '''
    triple-quoted template literal key shorthand
    ---
    {"""x#{y}z""": value}
    ---
    ({[`x${y}z`]: value})
  '''

  testCase '''
    coffee compat template literal key shorthand
    ---
    "civet coffee-compat"
    {"x#{y}z": value}
    ---
    ({[`x${y}z`]: value})
  '''

  testCase '''
    coffee compat template literal key without interpolations
    ---
    "civet coffee-compat"
    {"x": value}
    ---
    ({"x": value})
  '''

  describe "object literal shorthand", ->
    testCase """
      member
      ---
      {x.y}
      ---
      ({y: x.y})
    """

    testCase """
      two members
      ---
      {x.y.z}
      ---
      ({z: x.y.z})
    """

    testCase """
      empty
      ---
      {{}}
      ---
      ({})
    """

    testCase """
      empty
      ---
      {{}, {}}
      ---
      ({})
    """

    testCase """
      call
      ---
      {x()}
      ---
      ({x: x()})
    """

    testCase """
      call with access
      ---
      {f().g}
      ---
      ({g: f().g})
    """

    testCase """
      call with optional access
      ---
      {f()?.g}
      ---
      ({g: f()?.g})
    """

    testCase """
      call with non-null assertion
      ---
      {f()!.g}
      ---
      ({g: f()!.g})
    """

    testCase """
      call with double non-null assertion
      ---
      {f()!!.g}
      ---
      ({g: f()!!.g})
    """

    testCase """
      prop call
      ---
      {props.x()}
      ---
      ({x: props.x()})
    """

    testCase """
      two members with call in middle
      ---
      {x.y().z}
      ---
      ({z: x.y().z})
    """

    testCase """
      two members with call at end
      ---
      {x.y.z()}
      ---
      ({z: x.y.z()})
    """

    testCase """
      assertions and optional
      ---
      {x!.y?.z!}
      ---
      ({z: x!.y?.z!})
    """

    testCase """
      optional call
      ---
      {x?()}
      ---
      ({x: x?.()})
    """

    testCase """
      assertions and optional
      ---
      {x!.y?.z!}
      ---
      ({z: x!.y?.z!})
    """

    testCase """
      member access in middle
      ---
      {x[y].z}
      ---
      ({z: x[y].z})
    """

    testCase """
      member access at end
      ---
      {x[y]}
      ---
      ({[y]: x[y]})
    """

    testCase """
      member access with expression
      ---
      {x[f(y)]}
      ---
      let ref;({[(ref = f(y),ref)]: x[ref]})
    """

    testCase """
      not
      ---
      boolified := {not not exists}
      ---
      const boolified = {exists: !!exists}
    """

    testCase """
      not call
      ---
      boolified := {not not exists()}
      ---
      const boolified = {exists: !!exists()}
    """

    testCase """
      as T
      ---
      cast := {x as T}
      ---
      const cast = {x: x as T}
    """

    testCase """
      call as T
      ---
      cast := {x() as T}
      ---
      const cast = {x: x() as T}
    """

    testCase """
      await
      ---
      asyncComputed := {await asyncFoo()}
      ---
      const asyncComputed = {asyncFoo: await asyncFoo()}
    """

    describe "super access", ->
      wrapper """
        class X {
          f() {
            CODE
          }
        }
      """

      testCase """
        super access
        ---
        {super.x}
        ---
        ({x: super.x})
      """

      testCase """
        super member access
        ---
        {super[x]}
        ---
        ({[x]: super[x]})
      """

    throws """
      no new properties
      ---
      {new.target}
      ---
      ParseError
    """

    throws """
      no meta properties
      ---
      {import.meta}
      ---
      ParseError
    """

  describe "object globs", ->
    testCase """
      single property
      ---
      obj.{a}
      ---
      ({a:obj.a})
    """

    testCase """
      optional .
      ---
      obj{a}
      ---
      ({a:obj.a})
    """

    testCase """
      with inline comment
      ---
      obj/**/./**/{a}
      obj/**/{a}
      ---
      ({a:obj.a});
      ({a:obj.a})
    """

    testCase """
      multiple properties
      ---
      obj.{a,b,c}
      ---
      ({a:obj.a,b:obj.b,c:obj.c})
    """

    testCase """
      spacing and trailing comma
      ---
      obj.{ a,b, c,  }
      ---
      ({ a:obj.a,b:obj.b, c:obj.c,  })
    """

    testCase """
      complex left-hand side
      ---
      x.y()?.z.{a,b}
      ---
      let ref;(ref = x.y()?.z,{a:ref.a,b:ref.b})
    """

    testCase """
      complex right-hand side
      ---
      x.{a.b.c, d?.e().f!, g: h.i}
      ---
      ({c:x.a.b.c, f:x.d?.e().f!, g: x.h.i})
    """

    testCase """
      renamed
      ---
      obj.{ a, b: c, d : e }
      ---
      ({ a:obj.a, b: obj.c, d : obj.e })
    """

    testCase """
      this shorthand
      ---
      x.{@a, @a.b, @a.x(), @a.x().y}
      ---
      ({a:this.a, b:this.a.b, x:this.a.x(), y:this.a.x().y})
    """

    testCase """
      private identifier
      ---
      x.{#a, #a.b, #a.x(), #a.x().y}
      ---
      ({a:x.#a, b:x.#a.b, x:x.#a.x(), y:x.#a.x().y})
    """, wrapper: """
      class X {
        #a = 0
        f() {
          CODE
        }
      }
    """

    testCase """
      assignment
      ---
      obj.{ a, b: c, d : e } = x
      ---
      ({ a:obj.a, b: obj.c, d : obj.e } = x)
    """

    testCase """
      ...spread
      ---
      obj.{...a, ... b}
      ---
      ({...obj.a, ... obj.b})
    """

    testCase """
      ...spread assignment
      ---
      obj.{a, b, ...rest} = x
      ---
      ({a:obj.a, b:obj.b, ...obj.rest} = x)
    """

    testCase """
      ref in function call
      ---
      f a.b.{x,y}
      ---
      let ref;f((ref = a.b,{x:ref.x,y:ref.y}))
    """

    testCase """
      ref in multi-argument function call
      ---
      f first, a.b.{x,y}, last
      ---
      let ref;f(first, (ref = a.b,{x:ref.x,y:ref.y}), last)
    """

    throws """
      no initializer
      ---
      obj.{a, b=5}
      ---
      ParseError
    """

    throws """
      no + flags
      ---
      obj.{+x}
      ---
      ParseErrors: unknown:1:6 Glob pattern must have call or member expression value, found "true"
    """
    throws """
      no - flags
      ---
      obj.{-x}
      ---
      ParseErrors: unknown:1:6 Glob pattern must have call or member expression value, found "false"
    """
    throws """
      no ! flags
      ---
      obj.{!x}
      ---
      ParseErrors: unknown:1:6 Glob pattern must have call or member expression value, found "false"
    """

    throws """
      no general expressions
      ---
      obj.{x: a+b}
      ---
      ParseErrors: unknown:1:6 Glob pattern must have call or member expression value, found [[{"$loc":{"pos":7,"length":1},"token":" "}],{"type":"Identifier","name":"a","names":["a"],"children":[{"$loc":{"pos":8,"length":1},"token":"a"}]},[],{"$loc":{"pos":9,"length":1},"token":"+"},[],{"type":"Identifier","name":"b","names":["b"],"children":[{"$loc":{"pos":10,"length":1},"token":"b"}]}]
    """

    testCase """
      inside braced object literals
      ---
      {a, obj.{b,c}, d: 5}
      ---
      ({a, b:obj.b,c:obj.c, d: 5})
    """

    testCase """
      two inside braced object literals
      ---
      {x.{a,b}, y.{c,d}}
      ---
      ({a:x.a,b:x.b, c:y.c,d:y.d})
    """

    testCase """
      with reserved word keys
      ---
      state.{and,await,break,case,catch,class,const,continue,debugger,default,delete,do,else,enum,export,extends}
      ---
      ({and:state.and,await:state.await,break:state.break,case:state.case,catch:state.catch,class:state.class,const:state.const,continue:state.continue,debugger:state.debugger,default:state.default,delete:state.delete,do:state.do,else:state.else,enum:state.enum,export:state.export,extends:state.extends})
    """

    testCase """
      with more reserved word keys
      ---
      state.{false, null, this, true}
      ---
      ({false:state.false, null:state.null, this:state.this, true:state.true})
    """

    testCase """
      with function key
      ---
      state.{function}
      ---
      ({function:state.function})
    """

    testCase """
      with more even more reserved word keys
      ---
      state.{finally,for,if,import,in,instanceof}
      ---
      ({finally:state.finally,for:state.for,if:state.if,import:state.import,in:state.in,instanceof:state.instanceof})
    """

    testCase """
      the rest of the reserved words
      ---
      state.{interface,is,let,loop,new,not,or,private,protected,public,return,static,super,switch,throw,try,typeof,unless,until,var,void,while,with,yield}
      ---
      ({interface:state.interface,is:state.is,let:state.let,loop:state.loop,new:state.new,not:state.not,or:state.or,private:state.private,protected:state.protected,public:state.public,return:state.return,static:state.static,super:state.super,switch:state.switch,throw:state.throw,try:state.try,typeof:state.typeof,unless:state.unless,until:state.until,var:state.var,void:state.void,while:state.while,with:state.with,yield:state.yield})
    """
