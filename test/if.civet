{ testCase, throws } from ./helper.civet

describe "if", ->
  testCase """
    if
    ---
    if (true) {
      return false
    }
    ---
    if (true) {
      return false
    }
  """

  testCase """
    inline parenthesized expression
    ---
    if (c & 0x7F) != c
      break
    ---
    if ((c & 0x7F) != c) {
      break
    }
  """

  testCase """
    else
    ---
    if (true) {
      return false
    } else {
      return true
    }
    ---
    if (true) {
      return false
    } else {
      return true
    }
  """

  testCase """
    nested
    ---
    if x
      if y
        a
    else
      c
    ---
    if (x) {
      if (y) {
        a
      }
    }
    else {
      c
    }
  """

  it "invalid indentation", ->
    throws """
      ->
        if x
          if y
            a
      else
        c
    """

  testCase """
    if inline
    ---
    if (x) y else z
    ---
    if (x) y; else z
  """

  testCase """
    if then
    ---
    if x then y
    ---
    if (x) y
  """

  // TODO
  testCase.skip """
    if then nothing
    ---
    if x then
    ---
    if (x) {
    }
  """

  testCase """
    if then newline
    ---
    if true
    then y
    ---
    if (true) y
  """

  testCase """
    if then else
    ---
    if true then y else z
    ---
    if (true) y; else z
  """

  testCase """
    no parens
    ---
    if true
      return false
    ---
    if (true) {
      return false
    }
  """

  testCase """
    no parens else
    ---
    if true
      return false
    else
      return
    ---
    if (true) {
      return false
    }
    else {
      return
    }
  """

  testCase """
    weird spacing
    ---
    if (true) 5
    else 3
    ---
    if (true) 5;
    else 3
  """

  testCase """
    unless
    ---
    unless x
      return y
    ---
    if(!(x)) {
      return y
    }
  """

  testCase """
    unless more complex exp
    ---
    unless x + z
      return y
    ---
    if(!(x + z)) {
      return y
    }
  """

  testCase """
    unless else
    ---
    unless x
      return y
    else
      return z
    ---
    if(!(x)) {
      return y
    }
    else {
      return z
    }
  """

  testCase """
    postfix if
    ---
    return true if x
    ---
    if (x) { return true }
  """

  testCase """
    postfix unless
    ---
    return true unless x
    ---
    if(!(x)) { return true }
  """

  testCase """
    postfix if inside if
    ---
    if x return true if y
    ---
    if (y) { if (x) return true }
  """

  testCase """
    postfix unless existential
    ---
    return "" unless h?
    let x = 2
    ---
    if(!(h != null)) { return "" }
    let x = 2
  """

  testCase """
    implied parens parethesized expression
    ---
    if (fs.statSync index).isFile()
      index
    ---
    if ((fs.statSync(index)).isFile()) {
      index
    }
  """

  describe "expression", ->
    testCase """
      if expression
      ---
      x = if y
        "a"
      else
        "b"
      ---
      x = (y)?
        "a"
      :
        "b"
    """

    testCase """
      if expression on new line
      ---
      x =
      if y
        "a"
      else
        "b"
      ---
      x =
      (y)?
        "a"
      :
        "b"
    """

    testCase """
      if expression no else
      ---
      x = if (y)
        "a"
      ---
      x = (y)?
        "a":void 0
    """

    testCase """
      nested if expression
      ---
      x = if y
        if z
          "a"
        else
          "b"
      else
        "c"
      ---
      x = (y)?(
        (z)?
          "a"
        :
          "b"
      )
      :
        "c"
    """

    testCase """
      throw from inside if expression
      ---
      x = if y
        throw new Error
      else
        "b"
      ---
      x = (y)?(
        (()=>{throw new Error})()
      )
      :
        "b"
    """

    testCase """
      debugger inside if expression
      ---
      x = if y
        debugger
      else
        "b"
      ---
      x = (y)?(
        (()=>{debugger})()
      )
      :
        "b"
    """

    testCase """
      unless expression
      ---
      x = unless y
        "a"
      else
        "b"
      ---
      x = (!(y))?
        "a"
      :
        "b"
    """

    testCase """
      postfix inside parenthesized expression
      ---
      x = (a if y)
      ---
      x = (y)?a:void 0
    """

    testCase """
      postfix unless inside parenthesized expression
      ---
      x = (a unless y)
      ---
      x = (!(y))?a:void 0
    """

  // TODO Eventually
  describe.skip "return if expression", ->
    testCase """
      return if expression
      ---
      return if y then 1 else 0
      ---
      return (y)? 1:  0
    """

    testCase """
      return if expression
      ---
      return if y
      then 1
      else 0
      ---
      return (y)? 1:
       0
    """

    testCase """
      return if expression
      ---
      return if y
        1
      else
        0
      ---
      return (y)?(
        1
      ):
      (
        0
      )
    """
