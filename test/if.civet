{ testCase, throws } from ./helper.civet

describe "if", ->
  testCase """
    if
    ---
    if (true) {
      return false
    }
    ---
    if (true) {
      return false
    }
  """

  testCase """
    parenthesized and braced one-line
    ---
    if (true) { return false }
    ---
    if (true) { return false }
  """

  testCase """
    if with braced body that could be object literal
    ---
    if true {
      x
    }
    ---
    if (true) {
      x
    }
  """

  testCase """
    inline parenthesized expression
    ---
    if (c & 0x7F) != c
      return true
    ---
    if ((c & 0x7F) != c) {
      return true
    }
  """

  testCase """
    empty then
    ---
    if x
    ---
    if (x) {}
  """

  testCase """
    else
    ---
    if (true) {
      return false
    } else {
      return true
    }
    ---
    if (true) {
      return false
    } else {
      return true
    }
  """

  testCase """
    empty then with else
    ---
    if x
    else console.log 'no'
    ---
    if (x) {}
    else console.log('no')
  """

  testCase """
    empty else
    ---
    if x
      console.log 'yes'
    else
    ---
    if (x) {
      console.log('yes')
    }
    else {}
  """

  testCase """
    empty then and else
    ---
    if x
    else
    ---
    if (x) {}
    else {}
  """

  testCase """
    empty then and else with comments
    ---
    if x
      // yes
    else
      // no
    ---
    if (x) {}
      // yes
    else {}
      // no
  """

  testCase """
    empty then with else with comments
    ---
    if x
      // yes
    else
      console.log 'no'
    ---
    if (x) {}
      // yes
    else {
      console.log('no')
    }
  """

  testCase """
    nested
    ---
    if x
      if y
        a
    else
      c
    ---
    if (x) {
      if (y) {
        a
      }
    }
    else {
      c
    }
  """

  throws """
    invalid indentation
    ---
    ->
      if x
        if y
          a
    else
      c
    ---
    ParseError
  """

  testCase """
    indented condition
    ---
    if
      (and)
        cond1
        cond2
      console.log 'yes'
    else if
      a + b < 10
      console.log 'small'
    else
      console.log 'no'
    ---
    if(
      ((
        cond1)&&(
        cond2))) {
      console.log('yes')
    }
    else if(
      a + b < 10) {
      console.log('small')
    }
    else {
      console.log('no')
    }
  """

  testCase """
    condition with indentation and explicit then
    ---
    if (and)
      cond1
      cond2
    then
      console.log 'yes'
    else
      console.log 'no'
    ---
    if ((
      cond1)&&(
      cond2)) {
      console.log('yes')
    }
    else {
      console.log('no')
    }
  """

  testCase """
    expression with condition with indentation
    ---
    return if (and)
      upper.test exactOrAny.toString()
      lower.test exactOrAny.toString()
    then exactOrAny
    else undefined
    ---
    return ((
      upper.test(exactOrAny.toString()))&&(
      lower.test(exactOrAny.toString()))? exactOrAny
    : undefined)
  """

  testCase """
    if inline
    ---
    if (x) y else z
    ---
    if (x) y; else z
  """

  testCase """
    if inline, empty blocks
    ---
    if (x) {} else {}
    ---
    if (x) {} else {}
  """

  testCase """
    if with empty blocks on separate lines
    ---
    if (x)
    {}
    else
    {}
    ---
    if (x)
    {}
    else
    {}
  """

  testCase """
    if then
    ---
    if x then y
    ---
    if (x) y
  """

  testCase """
    if with multiple semicolon-separated statements
    ---
    if x
      a; b
    else
      c; d
    ---
    if (x) {
      a; b
    }
    else {
      c; d
    }
  """

  testCase """
    if with multiple semicolon-separated commented statements
    ---
    if x
      /*a*/ a; /*b*/ b
    else
      /*c*/ c; /*d*/ d
    ---
    if (x) {
      /*a*/ a; /*b*/ b
    }
    else {
      /*c*/ c; /*d*/ d
    }
  """

  testCase """
    if then nothing
    ---
    if x then
    ---
    if (x) {}
  """

  testCase """
    if then newline
    ---
    if true
    then y
    ---
    if (true) y
  """

  testCase """
    if then else
    ---
    if true then y else z
    ---
    if (true) y; else z
  """

  testCase """
    unless then else
    ---
    unless false then y else z
    ---
    if (!false) y; else z
  """

  testCase """
    if else
    ---
    if (true) y else z
    ---
    if (true) y; else z
  """

  testCase """
    no parens
    ---
    if true
      return false
    ---
    if (true) {
      return false
    }
  """

  testCase """
    else if
    ---
    if x < 0
      -1
    else if y
      y
    ---
    if (x < 0) {
      -1
    }
    else if (y) {
      y
    }
  """

  testCase """
    no parens else
    ---
    if true
      return false
    else
      return
    ---
    if (true) {
      return false
    }
    else {
      return
    }
  """

  testCase """
    weird spacing
    ---
    if (true) 5
    else 3
    ---
    if (true) 5;
    else 3
  """

  testCase """
    unless
    ---
    unless x
      return y
    ---
    if (!x) {
      return y
    }
  """

  testCase """
    unless more complex exp
    ---
    unless x + z
      return y
    ---
    if (!(x + z)) {
      return y
    }
  """

  testCase """
    unless else
    ---
    unless x
      return y
    else
      return z
    ---
    if (!x) {
      return y
    }
    else {
      return z
    }
  """

  testCase """
    one-line declaration
    ---
    => if (x) y := 5
    ---
    () => { if (x) { const y = 5;return y};return }
  """

  testCase """
    postfix if
    ---
    return true if x
    ---
    if (x) { return true }
  """

  testCase """
    postfix if that could be an expression
    ---
    return if x
    ---
    if (x) { return }
  """

  testCase """
    postfix if with declaration condition
    ---
    x if { x } := y
    ---
    if ((y) && typeof y === 'object' && 'x' in y) { const { x } = y;x }
  """

  testCase """
    complex postfix declaration condition
    ---
    if x := f()
      y
    else {
      z
    } if w := g()
    ---
    let ref;if ((ref = g())) { const w = ref;let ref1;if ((ref1 = f())) {const x = ref1;
      y
    }
    else {
      z
    } }
  """

  testCase """
    postfix unless
    ---
    return true unless x
    ---
    if (!x) { return true }
  """

  testCase """
    postfix if inside if
    ---
    if x return true if y
    ---
    if (y) { if (x) return true }
  """

  testCase """
    postfix unless existential
    ---
    return "" unless h?
    let x = 2
    ---
    if (!(h != null)) { return "" }
    let x = 2
  """

  testCase """
    postfix if with indented condition
    ---
    return if
      (and)
        cond1
        cond2
    ---
    if(
      ((
        cond1)&&(
        cond2))) { return }
  """

  testCase """
    implied parens parethesized expression
    ---
    if (fs.statSync index).isFile()
      index
    ---
    if ((fs.statSync(index)).isFile()) {
      index
    }
  """

  describe "forbid indented application", ->
    testCase """
      object literal after condition
      ---
      if foo
        a: 1
      ---
      if (foo) {
        ({a: 1})
      }
    """

    testCase """
      allowed in parentheses
      ---
      if (foo
        a: 1
      )
        hi
      ---
      if (foo({
        a: 1,
      })
      ) {
        hi
      }
    """

    testCase """
      allowed in indirect parentheses
      ---
      if x + (foo
        a: 1
      )
        hi
      ---
      if (x + (foo({
        a: 1,
      })
      )) {
        hi
      }
    """

    testCase """
      forbidden again outside parentheses
      ---
      if x + (foo
        a: 1
      )
        b: 2
      ---
      if (x + (foo({
        a: 1,
      })
      )) {
        ({b: 2})
      }
    """

    testCase """
      allowed in array literal
      ---
      if [
        foo
          a: 1
      ]
        hi
      ---
      if ([
        foo({
          a: 1,
        })
      ]) {
        hi
      }
    """

    testCase """
      allowed in braced object literal
      ---
      if {f: foo
        a: 1
      }
        hi
      ---
      if ({f: foo({
        a: 1
      })
      }) {
        hi
      }
    """

  describe "expression", ->
    testCase """
      if expression
      ---
      x = if y
        "a"
      else
        "b"
      ---
      let ref;if (y) {
        ref = "a"
      }
      else {
        ref = "b"
      };x = ref
    """

    testCase """
      if expression on new line
      ---
      x =
      if y
        "a"
      else
        "b"
      ---
      let ref;
      if (y) {
        ref = "a"
      }
      else {
        ref = "b"
      };x =ref
    """

    testCase """
      if expression with else on same line
      ---
      x = if (y)
        "a"
      else "b"
      ---
      let ref;if (y) {
        ref = "a"
      }
      else ref = "b";x = ref
    """

    testCase """
      if expression no else
      ---
      x = if (y)
        "a"
      ---
      let ref;if (y) {
        ref = "a"
      } else {ref = void 0};x = ref
    """

    testCase """
      nested if expression
      ---
      x = if y
        if z
          "a"
        else
          "b"
      else
        "c"
      ---
      let ref;if (y) {
        if (z) {
          ref = "a"
        }
        else {
          ref = "b"
        }
      }
      else {
        ref = "c"
      };x = ref
    """

    testCase """
      if expression with multiple semicolon-separated statements
      ---
      x = if y
        a; b
      else
        c; d
      ---
      let ref;if (y) {
        a; ref = b
      }
      else {
        c; ref = d
      };x = ref
    """

    testCase """
      if expression with multiple semicolon-separated commented statements
      ---
      x = if y
        /*a*/ a; /*b*/ b
      else
        /*c*/ c; /*d*/ d
      ---
      let ref;if (y) {
        /*a*/ a; /*b*/ ref = b
      }
      else {
        /*c*/ c; /*d*/ ref = d
      };x = ref
    """

    testCase """
      throw from inside if expression
      ---
      x = if y
        throw new Error
      else
        "b"
      ---
      let ref;if (y) {
        throw new Error
      }
      else {
        ref = "b"
      };x = ref
    """

    testCase """
      debugger inside if expression
      ---
      x = if y
        debugger
      else
        "b"
      ---
      let ref;if (y) {
        debugger
      }
      else {
        ref = "b"
      };x = ref
    """

    testCase """
      unless expression
      ---
      x = unless y
        "a"
      else
        "b"
      ---
      let ref;if (!y) {
        ref = "a"
      }
      else {
        ref = "b"
      };x = ref
    """

    testCase """
      parenthesized expression
      ---
      x = (if y
        "a"
      else
        "b"
      )
      ---
      x = ((y?
        "a"
      :
        "b")
      )
    """

    testCase """
      parenthesized expression with empty then block
      ---
      x = (if y
      else
        "b"
      )
      ---
      x = ((y?void 0
      :
        "b")
      )
    """

    testCase """
      parenthesized expression with then and else on one line
      ---
      x = (if y then "a" else "b")
      ---
      x = ((y? "a" : "b"))
    """

    testCase """
      parenthesized expression with empty then and else on one line
      ---
      x = (if y then else "b")
      ---
      x = ((y?void 0 : "b"))
    """

    testCase """
      postfix inside parenthesized expression
      ---
      x = (a if y)
      ---
      x = ((y?a:void 0))
    """

    testCase """
      postfix inside parenthesized expression with binary op
      ---
      x = (a if y) + 1
      ---
      x = ((y?a:void 0)) + 1
    """

    testCase """
      postfix unless inside parenthesized expression
      ---
      x = (a unless y)
      ---
      x = ((!y?a:void 0))
    """

    testCase """
      empty object in then, implicit parens
      ---
      x = if y
        {}
      ---
      let ref;if (y) {
        ref = ({})
      } else {ref = void 0};x = ref
    """

    testCase """
      empty object in then, explicit parens
      ---
      x = if (y)
        {}
      ---
      let ref;if (y) {
        ref = ({})
      } else {ref = void 0};x = ref
    """

    testCase """
      trailing method call
      ---
      greeting =
        if x
          y
        else
          z
        .say 'hello'
      ---
      greeting =
        (x?
          y
        :
          z)
        .say('hello')
    """

    testCase """
      unary operator prefix
      ---
      void if x
        y
      else
        z
      ---
      void (x?
        y
      :
        z)
    """

  describe "return if expression", ->
    testCase """
      return if expression
      ---
      return if y then 1 else 0
      ---
      return (y? 1 : 0)
    """

    testCase """
      return if expression
      ---
      return if y
      then 1
      else 0
      ---
      return (y? 1
      : 0)
    """

    testCase """
      return if expression
      ---
      return if y
        1
      else
        0
      ---
      return (y?
        1
      :
        0)
    """

  describe "DeclarationCondition", ->
    testCase """
      if declaration
      ---
      if [_, s] := s.match(re)
        s
      ---
      function len<T extends readonly unknown[], N extends number>(arr: T, length: N): arr is T & { length: N } { return arr.length === length }
      let ref;if ((ref = s.match(re)) && Array.isArray(ref) && len(ref, 2)) {const [_, s] = ref;
        s
      }
    """

    testCase.js """
      if declaration with array length guard js mode
      ---
      if [_, s] := s.match(re)
        s
      ---
      function len(arr, length) { return arr.length === length }
      let ref;if ((ref = s.match(re)) && Array.isArray(ref) && len(ref, 2)) {const [_, s] = ref;
        s
      }
    """

    testCase """
      if declaration with values
      ---
      if {type: "Identifier", name: /^[A-Z]*$/} := node
        console.log "upper case", name
      else
        console.log "not upper case"
      ---
      if ((node) && typeof node === 'object' && 'type' in node && node.type === "Identifier" && 'name' in node && typeof node.name === 'string' && /^[A-Z]*$/.test(node.name)) {const {type, name} = node;
        console.log("upper case", name)
      }
      else {
        console.log("not upper case")
      }
    """

    testCase """
      if declaration with type
      ---
      if m: Match := s.match(re)
        s
      ---
      let ref: Match;if ((ref = s.match(re))) {const m: Match = ref;
        s
      }
    """

    testCase """
      if declaration with nonnull check
      ---
      if m? := s.match(re)
        s
      ---
      let ref;if ((ref= s.match(re)) != null) {const m = ref;
        s
      }
    """

    testCase """
      if declaration with complex nonnull check
      ---
      if [p0, p1, p2]? := s.match(re)
        p1 + p2
      ---
      function len<T extends readonly unknown[], N extends number>(arr: T, length: N): arr is T & { length: N } { return arr.length === length }
      let ref;if (((ref= s.match(re)) != null) && Array.isArray(ref) && len(ref, 3)) {const [p0, p1, p2] = ref;
        p1 + p2
      }
    """

    testCase """
      if declaration with comments
      ---
      if [_, s]/*left*/:=/*right*/s.match(re)
        s
      ---
      function len<T extends readonly unknown[], N extends number>(arr: T, length: N): arr is T & { length: N } { return arr.length === length }
      let ref;if ((ref/*left*/=/*right*/s.match(re)) && Array.isArray(ref) && len(ref, 2)) {const [_, s] = ref;
        s
      }
    """

    testCase """
      if declaration with @ and let
      ---
      if @foo .= bar
        console.log @foo
      ---
      if (bar) {let foo = bar;this.foo = foo;
        console.log(this.foo)
      }
    """

    testCase """
      if declaration with @ rest
      ---
      if [_, ...@s] := s.match(re)
        s
      ---
      let ref;if ((ref = s.match(re)) && Array.isArray(ref) && ref.length >= 1) {const [_, ...s1] = ref;this.s = s1;
        s
      }
    """

    testCase """
      if declaration with @ rest in first position
      ---
      if [...@s, a] := s.match(re)
        s
      ---
      let ref;if ((ref = s.match(re)) && Array.isArray(ref) && ref.length >= 1) {const [...s1] = ref, [a] = s1.splice(-1);this.s = s1;
        s
      }
    """

    testCase """
      if declaration with parens
      ---
      if ([_, s] := s.match(re))
        s
      ---
      function len<T extends readonly unknown[], N extends number>(arr: T, length: N): arr is T & { length: N } { return arr.length === length }
      let ref;if ((ref = s.match(re)) && Array.isArray(ref) && len(ref, 2)) {const [_, s] = ref;
        s
      }
    """

    testCase """
      if declaration with indented pattern
      ---
      if {
        type
        name, value
      } := node
        console.log type, name
      ---
      if ((node) && typeof node === 'object' && 'type' in node && 'name' in node && 'value' in node) {const {
        type,
        name, value
      } = node;
        console.log(type, name)
      }
    """

    testCase """
      declaration with if else
      ---
      if x := 0
        "hi"
      else if y := 1
        "bye"
      ---
      if (0) {const x = 0;
        "hi"
      }
      else if (1) {const y = 1;
        "bye"
      }
    """

    testCase """
      declaration with unless
      ---
      unless x := getBool()
        return
      else
        isNull := x == null
        console.log isNull
      console.log x
      ---
      let ref;if (!(ref = getBool())) {
        return
      }const x = ref; {
        const isNull = x == null
        console.log(isNull)
      }
      console.log(x)
    """

    testCase """
      declaration with unless, no else
      ---
      unless x := getBool()
        return
      console.log x
      ---
      let ref;if (!(ref = getBool())) {
        return
      }const x = ref;
      console.log(x)
    """

    testCase """
      declaration with unless, no exit
      ---
      unless x := getBool()
        console.log 'falsey'
      else
        console.log x
      ---
      let ref;if (!(ref = getBool())) {
        console.log('falsey')
      }
      else {const x = ref;
        console.log(x)
      }
    """

    testCase """
      declaration with unless, no exit or else
      ---
      unless x := getBool()
        console.log "falsey"
      console.log x
      ---
      let ref;if (!(ref = getBool())) {
        console.log("falsey")
      }
      console.log(x)
    """

    testCase """
      one-line declaration with unless
      ---
      unless x := getBool() then return
      console.log "truthy", x
      ---
      let ref;if (!(ref = getBool())) return;const x = ref;
      console.log("truthy", x)
    """

    testCase """
      pattern-matching declaration with unless
      ---
      unless {x, y} := getPoint()
        throw new Error "invalid point"
      console.log x, y
      ---
      let ref;if (!((ref = getPoint()) && typeof ref === 'object' && 'x' in ref && 'y' in ref)) {
        throw new Error("invalid point")
      }const {x, y} = ref;
      console.log(x, y)
    """

    testCase """
      pattern-matching declaration with unless and await
      ---
      unless {x, y} := await getPoint()
        throw new Error "invalid point"
      console.log x, y
      ---
      let ref;if (!((ref = await getPoint()) && typeof ref === 'object' && 'x' in ref && 'y' in ref)) {
        throw new Error("invalid point")
      }const {x, y} = ref;
      console.log(x, y)
    """

    testCase """
      longhand const
      ---
      if const match = regex.exec string
        console.log match
      ---
      let ref;if ((ref = regex.exec(string))) {const match = ref;
        console.log(match)
      }
    """

    testCase """
      longhand const with @ rest
      ---
      if const [...@a, b] = regex.exec string
        console.log @a, b
      ---
      let ref;if ((ref = regex.exec(string)) && Array.isArray(ref) && ref.length >= 1) {const [...a] = ref, [b] = a.splice(-1);this.a = a;
        console.log(this.a, b)
      }
    """

    testCase """
      pins in declaration
      ---
      if {x, ^y} := obj
        console.log x
      ---
      if ((obj) && typeof obj === 'object' && 'x' in obj && 'y' in obj && obj.y === y) {const {x, y} = obj;
        console.log(x)
      }
    """

    testCase """
      duplicate bindings
      ---
      if [{type: "text"}, {type: "image"}] := array
        console.log type
      ---
      function len<T extends readonly unknown[], N extends number>(arr: T, length: N): arr is T & { length: N } { return arr.length === length }
      if ((array) && Array.isArray(array) && len(array, 2) && typeof array[0] === 'object' && array[0] != null && 'type' in array[0] && array[0].type === "text" && typeof array[1] === 'object' && array[1] != null && 'type' in array[1] && array[1].type === "image") {const [{type: type1}, {type: type2}] = array;const type = [type1, type2];
        console.log(type)
      }
    """

    testCase """
      try expression
      ---
      if a := try b
        log a
      ---
      let ref;try { ref = b } catch(e) {ref = void 0;};if (ref) {const a = ref;
        log(a)
      }
    """

    testCase """
      declaration in expression
      ---
      x = if {y} := f()
        a
      else
        b
      ---
      let ref;let ref1;if ((ref1 = f()) && typeof ref1 === 'object' && 'y' in ref1) {const {y} = ref1;
        ref = a
      }
      else {
        ref = b
      };x = ref
    """

    testCase """
      declaration in nested expression
      ---
      z = 5 + if x
        y := 5
      else
        z
      ---
      z = 5 + (()=>{if (x) {
        const y = 5;return y
      }
      else {
        return z
      }})()
    """

    // TODO
    testCase.skip """
      compound declaration conditional
      ---
      if condition and x := expensive()
        console.log x
      ---
      let x;if (condition && (x = expensive())) {
        console.log(x)
      }
    """

    testCase """
      negative access
      ---
      if last := x.-1
        console.log last
      ---
      let ref;if ((ref = x[x.length-1])) {const last = ref;
        console.log(last)
      }
    """

    testCase """
      &
      ---
      if f := &.x
        console.log f
      ---
      let ref;if ((ref = $ => $.x)) {const f = ref;
        console.log(f)
      }
    """
