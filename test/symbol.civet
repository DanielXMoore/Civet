{testCase} from ./helper.civet

describe ":symbol literals", ->
  testCase """
    basic
    ---
    foo := :foo
    => :foo
    ---
    const foo = Symbol.for("foo");
    () => Symbol.for("foo")
  """

  testCase """
    well-known
    ---
    [
      :asyncIterator
      :hasInstance
      :isConcatSpreadable
      :iterator
      :match
      :matchAll
      :replace
      :search
      :species
      :split
      :toPrimitive
      :toStringTag
      :unscopables
    ]
    ---
    [
      Symbol.asyncIterator,
      Symbol.hasInstance,
      Symbol.isConcatSpreadable,
      Symbol.iterator,
      Symbol.match,
      Symbol.matchAll,
      Symbol.replace,
      Symbol.search,
      Symbol.species,
      Symbol.split,
      Symbol.toPrimitive,
      Symbol.toStringTag,
      Symbol.unscopables
    ]
  """

  testCase """
    custom well-known
    ---
    "civet symbols=foo,bar"
    it := :iterator
    foo := :foo
    bar := :bar
    ---
    const it = Symbol.for("iterator")
    const foo = Symbol.foo
    const bar = Symbol.bar
  """

  testCase """
    custom well-known via API
    ---
    it := :iterator
    foo := :foo
    bar := :bar
    ---
    const it = Symbol.for("iterator")
    const foo = Symbol.foo
    const bar = Symbol.bar
  """,
    parseOptions: symbols: ["foo", "bar"]

  testCase """
    not symbols
    ---
    :foo loop
      break :foo
    :void => :foo loop
    ---
    foo: while(true) {
      break foo
    };
    ():void => { foo: while(true); }
  """

  testCase """
    class
    ---
    class Foo
      :iterator()
        yield 1
        yield 2
        yield 3
      :isConcatSpreadable = true
      @:name = "Foo"
    ---
    class Foo {
      *[Symbol.iterator]() {
        yield 1
        yield 2
        yield 3
      };
      [Symbol.isConcatSpreadable] = true
      static [Symbol.for("name")] = "Foo"
    }
  """

  testCase """
    object
    ---
    obj = {
      :iterator()
        yield 1
        yield 2
        yield 3
      :isConcatSpreadable: true
    }
    obj.:iterator
    obj.:isConcatSpreadable
    ---
    obj = {
      *[Symbol.iterator]() {
        yield 1
        yield 2
        yield 3
      },
      [Symbol.isConcatSpreadable]: true
    }
    obj[Symbol.iterator]
    obj[Symbol.isConcatSpreadable]
  """
