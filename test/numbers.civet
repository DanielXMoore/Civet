{testCase, throws} from ./helper.civet

describe "numbers", ->
  testCase """
    floats
    ---
    x = -3.12
    ---
    x = -3.12
  """

  testCase """
    floats without digits before decimal point
    ---
    x = -.12
    ---
    x = -.12
  """

  testCase """
    hex _
    ---
    0xff
    0x1234_abcd
    0xffff_ffffn
    ---
    0xff
    0x1234_abcd
    0xffff_ffffn
  """

  testCase """
    binary _
    ---
    0b11
    0b11n
    0B1010_1010
    ---
    0b11
    0b11n
    0B1010_1010
  """

  testCase """
    octal _
    ---
    0o77
    0O7171_0303
    0O7171_0303n
    ---
    0o77
    0O7171_0303
    0O7171_0303n
  """

  testCase """
    big integer
    ---
    x = 0n
    x = 123_456n
    ---
    x = 0n
    x = 123_456n
  """

  testCase """
    method calls using dot
    ---
    1.toString()
    1_000.toString()
    .1.toString()
    1e-10.toString()
    0x10.toString()
    hello2.toString()
    ---
    1..toString()
    1_000..toString()
    .1.toString()
    1e-10.toString()
    0x10.toString()
    hello2.toString()
  """

  throws """
    throws when double dotting
    ---
    1..toString()
    ---
    ParseError
  """

  testCase """
    method calls using optional accessor
    ---
    1?.y?()
    ---
    1?.y?.()
  """

  testCase """
    exponent
    ---
    x = 1e2
    y = 1e-2
    z = 1e+2
    w = 1.e2
    n = 1.e-2
    ---
    x = 1e2
    y = 1e-2
    z = 1e+2
    w = 1.e2
    n = 1.e-2
  """

  testCase """
    semicolon insertion before unary negated numeric literal
    ---
    x
    -2
    +1
    ---
    x;
    -2;
    +1
  """
