{testCase} from ../helper.civet

describe "[TS] interface", ->
  testCase """
    basic
    ---
    interface User {
      name: string
      id: number
    }
    ---
    interface User {
      name: string
      id: number
    }
  """

  testCase """
    empty
    ---
    interface Blank
    interface Blank2
    ---
    interface Blank {}
    interface Blank2 {}
  """

  testCase """
    nested syntax
    ---
    interface User
      name: string
      id: number
    ---
    interface User {
      name: string
      id: number
    }
  """

  testCase """
    optional type
    ---
    interface User {
      name?: string
      id: number
    }
    ---
    interface User {
      name?: string
      id: number
    }
  """

  testCase """
    nested nested syntax
    ---
    interface User
      name:
        first: string
        last: string
      id: number
    ---
    interface User {
      name: {
        first: string
        last: string
      }
      id: number
    }
  """

  testCase """
    export
    ---
    export interface Loc {
      pos: number
      length: number
    }
    ---
    export interface Loc {
      pos: number
      length: number
    }
  """

  testCase """
    with method
    ---
    interface Module {
      _compile(content: string, filename: string): void
    }
    ---
    interface Module {
      _compile(content: string, filename: string): void
    }
  """

  testCase """
    new method
    ---
    interface Module {
      new(parent?: Module): Module
    }
    ---
    interface Module {
      new(parent?: Module): Module
    }
  """

  testCase """
    with get/set
    ---
    interface X {
      get id(): number
      set id(value: number)
    }
    ---
    interface X {
      get id(): number
      set id(value: number)
    }
  """

  testCase """
    type parameter
    ---
    interface X<T> {
      id: T
    }
    ---
    interface X<T> {
      id: T
    }
  """

  // https://www.typescriptlang.org/docs/handbook/2/generics.html#variance-annotations
  testCase """
    in out type parameters
    ---
    // Contravariant annotation
    interface Consumer<in T>
      consume: (arg: T) => void
    // Covariant annotation
    interface Producer<out T>
      make(): T
    // Invariant annotation
    interface ProducerConsumer<in out T>
      consume: (arg: T) => void
      make(): T
    ---
    // Contravariant annotation
    interface Consumer<in T> {
      consume: (arg: T) => void
    }
    // Covariant annotation
    interface Producer<out T> {
      make(): T
    }
    // Invariant annotation
    interface ProducerConsumer<in out T> {
      consume: (arg: T) => void
      make(): T
    }
  """

  testCase """
    comma delimited
    ---
    interface ParseResult<T> {
      loc: Loc,
      pos: number,
      value: T,
    }
    ---
    interface ParseResult<T> {
      loc: Loc,
      pos: number,
      value: T,
    }
  """

  testCase """
    spaces
    ---
    interface ParseResult<T>
      loc   : Loc
      pos ? : number
      value:T
    ---
    interface ParseResult<T> {
      loc   : Loc
      pos ? : number
      value:T
    }
  """

  testCase """
    readonly
    ---
    interface Point
      readonly x: number
      readonly y?: number
    ---
    interface Point {
      readonly x: number
      readonly y?: number
    }
  """

  testCase """
    callable
    ---
    interface Fail {
      (pos: number, expectation: any): void
    }
    ---
    interface Fail {
      (pos: number, expectation: any): void
    }
  """

  testCase """
    interface extends
    ---
    interface X extends Y
      id: number
    ---
    interface X extends Y {
      id: number
    }
  """

  testCase """
    interface extends parameterized
    ---
    interface X<T> extends Y<T>
      id: number
    ---
    interface X<T> extends Y<T> {
      id: number
    }
  """

  testCase """
    interface extends shorthand
    ---
    interface X < Y
      id: number
    ---
    interface X extends Y {
      id: number
    }
  """

  testCase """
    interface extends multiple
    ---
    interface X extends Y, Z
      id: number
    ---
    interface X extends Y, Z {
      id: number
    }
  """

  testCase """
    interface extends shorthand multiple
    ---
    interface X extends Y, Z, W
      id: number
    ---
    interface X extends Y, Z, W {
      id: number
    }
  """

  testCase """
    multiple computed properties
    ---
    interface A {
      [b]: C
      [d]: E
    }
    ---
    interface A {
      [b]: C
      [d]: E
    }
  """

  testCase """
    thin arrow
    ---
    interface Cow
      type: 'cow'
      giveMilk: ->
    ---
    interface Cow {
      type: 'cow'
      giveMilk: ()=>void
    }
  """

  testCase  """
    optional method signature
    ---
    interface Animal
      quack?(): void
    ---
    interface Animal {
      quack?(): void
    }
  """
