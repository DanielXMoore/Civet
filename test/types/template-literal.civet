import { testCase } from "../helper.civet"

describe "Temlpate Literal Types", ->
  testCase """
    use infer in template literal types
    ---
    type Test<T> =
    T extends `(${infer Rest}`
      ? [LParen, Rest]
      : T extends `${infer Char extends Alpha}${infer Rest}`
        ? [Character<Char>, Rest]
        : never
    ---
    type Test<T> =
    T extends `(${infer Rest}`
      ? [LParen, Rest]
      : T extends `${infer Char extends Alpha}${infer Rest}`
        ? [Character<Char>, Rest]
        : never
  """

  testCase '''
    coffee interpolation in template literal types
    ---
    "civet coffeeInterpolation"
    type Test<T> =
    T extends "(#{infer Rest}"
      ? [LParen, Rest]
      : T extends "#{infer Char extends Alpha}#{infer Rest}"
        ? [Character<Char>, Rest]
        : never
    ---
    type Test<T> =
    T extends `(${infer Rest}`
      ? [LParen, Rest]
      : T extends `${infer Char extends Alpha}${infer Rest}`
        ? [Character<Char>, Rest]
        : never
  '''
