import { testCase } from "../helper.civet"

describe "Template Literal Types", ->
  testCase """
    template string
    ---
    type Foo = `bar${Baz}qux`
    ---
    type Foo = `bar${Baz}qux`
  """

  testCase """
    use infer in template literal types
    ---
    type Test<T> =
    T extends `(${infer Rest}`
      ? [LParen, Rest]
      : T extends `${infer Char extends Alpha}${infer Rest}`
        ? [Character<Char>, Rest]
        : never
    ---
    type Test<T> =
    T extends `(${infer Rest}`
      ? [LParen, Rest]
      : T extends `${infer Char extends Alpha}${infer Rest}`
        ? [Character<Char>, Rest]
        : never
  """

  testCase '''
    coffee interpolation in template literal types
    ---
    "civet coffeeInterpolation"
    type Test<T> =
    T extends "(#{infer Rest}"
      ? [LParen, Rest]
      : T extends "#{infer Char extends Alpha}#{infer Rest}"
        ? [Character<Char>, Rest]
        : never
    ---
    type Test<T> =
    T extends `(${infer Rest}`
      ? [LParen, Rest]
      : T extends `${infer Char extends Alpha}${infer Rest}`
        ? [Character<Char>, Rest]
        : never
  '''

describe "template literals with type arguments", ->
  testCase '''
    typed `
    ---
    sql<User>`SELECT * FROM users WHERE id = ${id}`
    ---
    sql<User>`SELECT * FROM users WHERE id = ${id}`
  '''

  testCase '''
    typed '
    ---
    sql<User>'SELECT * FROM users WHERE id = "${x}"'
    ---
    sql<User>`SELECT * FROM users WHERE id = "\\${x}"`
  '''
