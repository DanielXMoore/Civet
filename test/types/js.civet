assert from assert
{ compile } from ../../source/main.civet
{ testCase } from ../helper.civet

describe "Types", ->
  describe "JS", ->
    testCase.js """
      omits interface declarations in JS mode
      ---
      interface User {
        name: string
        id: number
      }
      ---

    """

    testCase.js """
      omits 'as' in JS mode
      ---
      x := 3 as ID
      ---
      const x = 3
    """

    testCase.js """
      omits type suffix in JS mode
      ---
      const items: DocumentSymbol[] = []
      ---
      const items = []
    """

    testCase.js """
      omits readonly from class fiend const assignment in JS mode
      ---
      class A {
        x := 3
      }
      ---
      class A {
        x = 3
      }
    """

    testCase.js """
      omits implements in class declaration
      ---
      class A implements B {
        x := 3
      }
      ---
      class A {
        x = 3
      }
    """

    testCase.js """
      omits type params in class declaration
      ---
      class A<T extends string> extends C<T> implements B<T> {
        x := 3
      }
      ---
      class A extends C {
        x = 3
      }
    """

    testCase.js """
      injects constructor properties
      ---
      class A
        constructor(public foo = "hello")
          console.log("hello")
      ---
      class A {
        constructor(foo = "hello") {
          this.foo = foo;
          console.log("hello")
        }
      }
    """

    testCase.js """
      ignores parameter properties for non-constructors
      ---
      class A
        constructor(private foo)
          console.log(foo)
        bar(private baz = 10)
          console.log(baz)
      ---
      class A {
        constructor(foo) {
          this.foo = foo;
          console.log(foo)
        }
        bar(baz = 10) {
          return console.log(baz)
        }
      }
    """

    testCase.js """
      ignores abstract properties
      ---
      abstract class A
        foo = "str"
        abstract bar = 10
        abstract show(): string
        bar()
          @show @bar
      ---
      class A {
        foo = "str"
      \u0020\u0020
      \u0020\u0020
        bar() {
          return this.show(this.bar)
        }
      }
    """

    testCase.js """
      omits import type
      ---
      import type {S, T} from "foo"
      ---
    """

    testCase.js """
      omits export type
      ---
      export type {S, T}
      ---
    """

    testCase.js """
      omits export type from
      ---
      export type {S, T} from "foo"
      ---
    """

    testCase.js """
      omits import some types
      ---
      import { a, b, type S, type T, c, d } from "foo"
      ---
      import { a, b, c, d } from "foo"
    """

    testCase.js """
      omits export some types
      ---
      var a, b, c, d
      export { a, b, type S, type T, c, d }
      ---
      var a, b, c, d
      export { a, b, c, d }
    """

    testCase.js """
      omits export from some types
      ---
      export { a, b, type S, type T, c, d } from "foo"
      ---
      export { a, b, c, d } from "foo"
    """

    describe "this type is omitted in js", ->
      testCase.js """
        plain function
        ---
        function (this: T) {}
        ---
        (function () {})
      """

      testCase.js """
        plain function with @ shorthand
        ---
        function (@: T, x: X) {}
        ---
        (function ( x) {})
      """

    testCase.js """
      declare const is omitted in js
      ---
      declare const x: number
      ---

    """
