assert from assert
main from ../../source/main.coffee
{compile} := main

describe "Types", ->
  describe "JS", ->
    it "omits interface declarations in JS mode", ->
      js := compile """
        interface User {
          name: string
          id: number
        }
      """,
        js: true

      assert.equal js, """

      """

    it "omits 'as' in JS mode", ->
      js := compile """
        x := 3 as ID
      """,
        js: true

      assert.equal js, """
        const x = 3
      """

    it "omits type suffix in JS mode", ->
      js := compile """
        const items: DocumentSymbol[] = []
      """,
        js: true

      assert.equal js, """
        const items = []
      """

    it "omits readonly from  class fiend const assignment in JS mode", ->
      js := compile """
        class A {
          x := 3
        }
      """,
        js: true

      assert.equal js, """
        class A {
          x = 3
        }
      """

    it "omits implements in class declaration", ->
      js := compile """
        class A implements B {
          x := 3
        }
      """,
        js: true

      assert.equal js, """
        class A {
          x = 3
        }
      """

    it "omits type params in class declaration", ->
      js := compile """
        class A<T extends string> extends C<T> implements B<T> {
          x := 3
        }
      """,
        js: true

      assert.equal js, """
        class A extends C {
          x = 3
        }
      """

