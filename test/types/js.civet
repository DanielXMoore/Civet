assert from assert
{compile} from ../../source/main.coffee

describe "Types", ->
  describe "JS", ->
    it "omits interface declarations in JS mode", ->
      js := compile """
        interface User {
          name: string
          id: number
        }
      """,
        js: true

      assert.equal js, """

      """

    it "omits 'as' in JS mode", ->
      js := compile """
        x := 3 as ID
      """,
        js: true

      assert.equal js, """
        const x = 3
      """

    it "omits type suffix in JS mode", ->
      js := compile """
        const items: DocumentSymbol[] = []
      """,
        js: true

      assert.equal js, """
        const items = []
      """

    it "omits readonly from  class fiend const assignment in JS mode", ->
      js := compile """
        class A {
          x := 3
        }
      """,
        js: true

      assert.equal js, """
        class A {
          x = 3
        }
      """

    it "omits implements in class declaration", ->
      js := compile """
        class A implements B {
          x := 3
        }
      """,
        js: true

      assert.equal js, """
        class A {
          x = 3
        }
      """

    it "omits type params in class declaration", ->
      js := compile """
        class A<T extends string> extends C<T> implements B<T> {
          x := 3
        }
      """,
        js: true

      assert.equal js, """
        class A extends C {
          x = 3
        }
      """

    it "injects constructor properties", ->
      js := compile """
      class A
        constructor(public foo = "hello")
          console.log("hello")
      """, js: true
      assert.equal js, """
      class A {
        constructor(foo = "hello") {
          this.foo = foo;
          console.log("hello")
        }
      }
      """

    it "ignores parameter properties for non-constructors", ->
      js := compile """
      class A
        constructor(private foo)
          console.log(foo)
        bar(private baz = 10)
          console.log(baz)
      """, js: true
      assert.equal js, """
      class A {
        constructor(foo) {
          this.foo = foo;
          console.log(foo)
        }
        bar(baz = 10) {
          return console.log(baz)
        }
      }
      """

    it "ignores abstract properties", ->
      js := compile """
      abstract class A
        foo = "str"
        abstract bar = 10
        abstract show(): string
        bar()
          @show @bar
      """, js: true
      assert.equal js, """
      class A {
        foo = "str"
        
        
        bar() {
          return this.show(this.bar)
        }
      }
      """
