{testCase} from ../helper.civet

describe "[TS] class", ->
  testCase """
    example
    ---
    class UserAccount {
      name: string
      id: number

      constructor(name: string, id: number) {
        this.name = name
        this.id = id
      }
    }
    ---
    class UserAccount {
      name: string
      id: number

      constructor(name: string, id: number) {
        this.name = name
        this.id = id
      }
    }
  """

  testCase """
    method definition
    ---
    class UserAccount
      register(): number
        return this.id
    ---
    class UserAccount {
      register(): number {
        return this.id
      }
    }
  """

  testCase """
    nested
    ---
    class UserAccount
      name: string
      id: number

      constructor(name: string, id: number)
        @name = name
        @id = id
    ---
    class UserAccount {
      name: string
      id: number

      constructor(name: string, id: number) {
        this.name = name
        this.id = id
      }
    }
  """

  testCase """
    const assignment becomes readonly field
    ---
    class A
      x := 3
    ---
    class A {
      readonly x = 3
    }
  """

  testCase """
    readonly function field
    ---
    class X
      f: MyFuncType := -> return "hi"
    ---
    class X {
      readonly f: MyFuncType = function() { return "hi" }
    }
  """

  testCase """
    readonly static field
    ---
    class X
      static x := 3
    ---
    class X {
      static readonly x = 3
    }
  """

  testCase """
    readonly static field
    ---
    class X
      @x := 3
    ---
    class X {
      static readonly x = 3
    }
  """

  testCase """
    readonly and access params
    ---
    abstract class P
      @(
        readonly read: any,
        public pub: any,
        public readonly pub_read: any,
        protected pro: any,
        protected readonly pro_read: any,
        private priv: any,
        private readonly priv_read: any,
      ) {}
    ---
    abstract class P {
      constructor(
        readonly read: any,
        public pub: any,
        public readonly pub_read: any,
        protected pro: any,
        protected readonly pro_read: any,
        private priv: any,
        private readonly priv_read: any,
      ) {}
    }
  """

  testCase """
    implements
    ---
    class A implements I {}
    ---
    class A implements I {}
  """

  testCase """
    implements multiple
    ---
    class A implements I, J {}
    ---
    class A implements I, J {}
  """

  testCase """
    extends and implements
    ---
    class A extends B implements I, J {}
    ---
    class A extends B implements I, J {}
  """

  testCase """
    extends shorthand and implements
    ---
    class A < B implements I, J {}
    ---
    class A extends B implements I, J {}
  """
