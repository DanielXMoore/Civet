{testCase, throws} from ../helper.civet

describe "[TS] class", ->
  testCase """
    example
    ---
    class UserAccount {
      name: string
      id: number

      constructor(name: string, id: number) {
        this.name = name
        this.id = id
      }
    }
    ---
    class UserAccount {
      name: string
      id: number

      constructor(name: string, id: number) {
        this.name = name
        this.id = id
      }
    }
  """

  testCase """
    non-null assertion
    ---
    class UserAccount
      name!: string
      id!
      constructor()
        sideEffect(this)
    ---
    class UserAccount {
      name!: string
      id!
      constructor() {
        sideEffect(this)
      }
    }
  """

  throws """
    forbid ?!
    ---
    class UserAccount
      name?!: string
    ---
    ParseError
  """

  testCase """
    method definition
    ---
    class UserAccount
      register(): number
        return this.id
    ---
    class UserAccount {
      register(): number {
        return this.id
      }
    }
  """

  testCase """
    static members
    ---
    class UserAccount
      static nextId = 0
      static makeId(): number
        return this.nextId++
    ---
    class UserAccount {
      static nextId = 0
      static makeId(): number {
        return this.nextId++
      }
    }
  """

  testCase """
    override method
    ---
    class UserAccount
      override id(): number
        return this.id
    ---
    class UserAccount {
      override id(): number {
        return this.id
      }
    }
  """

  testCase """
    public static override method
    ---
    class UserAccount
      public static override nextId = 0
      public static override makeId(): number
        return this.nextId++
    ---
    class UserAccount {
      public static override nextId = 0
      public static override makeId(): number {
        return this.nextId++
      }
    }
  """

  testCase """
    method with implicit body
    ---
    class UserAccount
      register()
    ---
    class UserAccount {
      register(){}
    }
  """

  testCase """
    override method with implicit body
    ---
    class UserAccount
      id: number
      register(): void
      register(@id: number): void
    ---
    class UserAccount {
      id: number
      register(): void
      register(id1: number): void{this.id = id1;}
    }
  """

  testCase """
    constructor with implicit body
    ---
    class UserAccount
      id: number
      @(@id: number)
    ---
    class UserAccount {
      id: number
      constructor(id1: number){this.id = id1;}
    }
  """

  testCase """
    override constructor with implicit body
    ---
    class UserAccount
      id: number
      @()
      @(@id: number)
    ---
    class UserAccount {
      id: number
      constructor()
      constructor(id1: number){this.id = id1;}
    }
  """

  testCase """
    nested
    ---
    class UserAccount
      name: string
      id: number

      constructor(name: string, id: number)
        @name = name
        @id = id
    ---
    class UserAccount {
      name: string
      id: number

      constructor(name: string, id: number) {
        this.name = name
        this.id = id
      }
    }
  """

  testCase """
    const assignment becomes readonly field
    ---
    class A
      x := 3
    ---
    class A {
      readonly x = 3
    }
  """

  testCase """
    readonly function field
    ---
    class X
      f: MyFuncType := -> return "hi"
    ---
    class X {
      readonly f: MyFuncType = function() { return "hi" }
    }
  """

  testCase """
    readonly static field
    ---
    class X
      static x := 3
    ---
    class X {
      static readonly x = 3
    }
  """

  testCase """
    readonly static field
    ---
    class X
      @x := 3
    ---
    class X {
      static readonly x = 3
    }
  """

  testCase """
    readonly and access params
    ---
    abstract class P
      @(
        readonly read: any,
        public pub: any,
        public readonly pub_read: any,
        protected pro: any,
        protected readonly pro_read: any,
        private priv: any,
        private readonly priv_read: any,
      ) {}
    ---
    abstract class P {
      constructor(
        readonly read: any,
        public pub: any,
        public readonly pub_read: any,
        protected pro: any,
        protected readonly pro_read: any,
        private priv: any,
        private readonly priv_read: any,
      ) {}
    }
  """

  testCase """
    implements
    ---
    class A implements I {}
    ---
    class A implements I {}
  """

  testCase """
    implements multiple
    ---
    class A implements I, J {}
    ---
    class A implements I, J {}
  """

  testCase """
    extends and implements
    ---
    class A extends B implements I, J {}
    ---
    class A extends B implements I, J {}
  """

  testCase """
    extends shorthand and implements
    ---
    class A < B implements I, J {}
    ---
    class A extends B implements I, J {}
  """

  testCase """
    implements shorthand
    ---
    class A <: I {}
    ---
    class A implements I {}
  """

  testCase """
    implements shorthand multiple
    ---
    class A <: I, J {}
    ---
    class A implements I, J {}
  """

  testCase """
    extends and implements shorthand
    ---
    class A < B <: I {}
    ---
    class A extends B implements I {}
  """

  testCase """
    extends and implements shorthand without spaces
    ---
    class A<B<:I {}
    ---
    class A extends B implements I {}
  """

  describe "not extends from type conditions invalid for classes", ->
    throws """
      not extends
      ---
      class A not extends B
      ---
      ParseError
    """

    throws """
      !<
      ---
      class A !< B
      ---
      ParseError
    """

  testCase """
    arrow field definitions
    ---
    class
      x: ->
      y: =>
    ---
    (class {
      x: ()=>void
      y: ()=>void
    })
  """

  testCase """
    decorate export class
    ---
    @@decorator
    export class A {}
    ---
    @decorator
    export class A {}
  """

  testCase """
    decorate export class
    ---
    export @@decorator class A {}
    ---
    export @decorator class A {}
  """

  testCase """
    combo decorate
    ---
    @@decorator1
    export @@decorator2 class A {}
    ---
    @decorator1
    export @decorator2 class A {}
  """, wrapper: ''

  testCase """
    member initializer ending with type parameters
    ---
    class Fetcher
      cache = new Map<ID, Person>
    ---
    class Fetcher {
      cache = new Map<ID, Person>
    }
  """

  testCase """
    export default class decorator
    ---
    @@register export default class Foo
    ---
    @register export default class Foo {
    }
  """

  testCase """
    optional method signature
    ---
    class Animal
      quack?(): void
    ---
    class Animal {
      quack?(): void
    }
  """

  testCase """
    optional method
    ---
    class Animal
      quack?(): void
        console.log "quack?"
    ---
    class Animal {
      quack?(): void {
        console.log("quack?")
      }
    }
  """

  testCase.js """
    optional method JavaScript
    ---
    class Animal
      quack?(): void
        console.log "quack?"
    ---
    class Animal {
      quack() {
        console.log("quack?")
      }
    }
  """

  describe "automatic field typing from constructor", ->
    testCase """
      basic
      ---
      class UserAccount
        @(@name: string, @id: number)
      ---
      class UserAccount {
        name: string;id: number;constructor(name: string, id: number){this.name = name;this.id = id;}
      }
    """

    testCase """
      existing fields
      ---
      class UserAccount
        name: string | null
        id = 0
        @(@name: string, @id: number)
      ---
      class UserAccount {
        name: string | null
        id = 0
        constructor(name1: string, id1: number){this.name = name1;this.id = id1;}
      }
    """

    testCase """
      nested object fields
      ---
      class UserAccount
        @({@name:: string, @id:: number})
      ---
      class UserAccount {
        name: string;id: number;constructor({name, id}: {name: string, id: number}){this.name = name;this.id = id;}
      }
    """

    testCase """
      nested array fields
      ---
      class UserAccount
        @([@name:: string, @id:: number])
      ---
      class UserAccount {
        name: string;id: number;constructor([name, id]: [ string, number]){this.name = name;this.id = id;}
      }
    """

    testCase """
      override
      ---
      class UserAccount
        @(@name: string)
        @(@name: string, @id: number)
      ---
      class UserAccount {
        name: string;id: number;constructor(name: string)
        constructor(name1: string, id: number){this.name = name1;this.id = id;}
      }
    """

    testCase """
      private
      ---
      class UserAccount
        @(#name: string, #id: number)
      ---
      class UserAccount {
        #name: string;#id: number;constructor(name: string, id: number){this.#name = name;this.#id = id;}
      }
    """

    testCase.js """
      private JS
      ---
      class UserAccount
        @(#name: string, #id: number)
      ---
      class UserAccount {
        #name;#id;constructor(name, id){this.#name = name;this.#id = id;}
      }
    """
