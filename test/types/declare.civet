{testCase} from ../helper.civet

describe "[TS] declare", ->
  testCase """
    declare const
    ---
    declare const $: JQuery
    ---
    declare const $: JQuery
  """

  testCase """
    declare let
    ---
    declare let $: JQuery
    ---
    declare let $: JQuery
  """

  testCase """
    declare var
    ---
    declare var $: JQuery
    ---
    declare var $: JQuery
  """

  // Examples from https://www.typescriptlang.org/docs/handbook/declaration-files/by-example.html
  testCase """
    declare function
    ---
    declare function getWidget(n: number): Widget
    declare function getWidget(s: string): Widget[]
    ---
    declare function getWidget(n: number): Widget
    declare function getWidget(s: string): Widget[]
  """

  testCase """
    declare class with braces
    ---
    declare class Greeter {
      constructor(greeting: string);
      greeting: string;
      showGreeting(): void;
    }
    ---
    declare class Greeter {
      constructor(greeting: string);
      greeting: string;
      showGreeting(): void;
    }
  """

  testCase """
    declare class without braces
    ---
    declare class Greeter
      constructor(greeting: string)
      greeting: string
      showGreeting(): void
    ---
    declare class Greeter {
      constructor(greeting: string);
      greeting: string
      showGreeting(): void
    }
  """

  testCase """
    declare namespace
    ---
    declare namespace NodeJS {
      interface Module {
        _compile(content: string, filename: string): void
      }
    }
    ---
    declare namespace NodeJS {
      interface Module {
        _compile(content: string, filename: string): void
      }
    }
  """

  testCase """
    declare namespace with class with braces
    ---
    declare namespace NodeJS {
      class Greeter {
        constructor(greeting: string);
        greeting: string;
        showGreeting(): void;
      }
    }
    ---
    declare namespace NodeJS {
      class Greeter {
        constructor(greeting: string);
        greeting: string;
        showGreeting(): void;
      }
    }
  """

  testCase """
    declare namespace with class without braces
    ---
    declare namespace NodeJS
      class Greeter
        constructor(greeting: string)
        greeting: string
        showGreeting(): void
    ---
    declare namespace NodeJS {
      class Greeter {
        constructor(greeting: string);
        greeting: string
        showGreeting(): void
      }
    }
  """

  testCase """
    declare module with no content
    ---
    declare module "path"
    ---
    declare module "path"
  """

  // Example from https://www.typescriptlang.org/docs/handbook/modules.html
  testCase """
    declare module with braces
    ---
    declare module "path" {
      export function normalize(p: string): string;
      export function join(...paths: any[]): string;
      export var sep: string;
    }
    ---
    declare module "path" {
      export function normalize(p: string): string;
      export function join(...paths: any[]): string;
      export var sep: string;
    }
  """

  testCase """
    declare module without braces
    ---
    declare module "path"
      export function normalize(p: string): string
      export function join(...paths: any[]): string
      export var sep: string
    ---
    declare module "path" {
      export function normalize(p: string): string
      export function join(...paths: any[]): string
      export var sep: string
    }
  """

  testCase """
    declare module "url"
    ---
    declare module "url"
      export interface Url
        protocol?: string
        hostname?: string
        pathname?: string
      export function parse(
        urlStr: string,
        parseQueryString?,
        slashesDenoteHost?
      ): Url
    ---
    declare module "url" {
      export interface Url {
        protocol?: string
        hostname?: string
        pathname?: string
      }
      export function parse(
        urlStr: string,
        parseQueryString?,
        slashesDenoteHost?
      ): Url
    }
  """

  testCase """
    declare global with braces
    ---
    declare global {
      var count: number;
    }
    ---
    declare global {
      var count: number;
    }
  """

  testCase """
    declare global without braces
    ---
    declare global
      var count: number
    ---
    declare global {
      var count: number
    }
  """
