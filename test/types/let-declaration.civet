{testCase, throws} from ../helper.civet

describe "[TS] let declaration", ->
  testCase """
    array of empty object type
    ---
    let x: {}[]
    ---
    let x: {}[]
  """

  testCase """
    trailing JSX is not treated as type arguments
    ---
    let svg: SVGSVGElement
    <header>
    <svg ref={svg!}>
    ---
    let svg: SVGSVGElement
    <>
    <header />
    <svg ref={svg!} />
    </>
  """

  testCase """
    non-null assertion
    ---
    let ref!: HTMLDivElement
    ---
    let ref!: HTMLDivElement
  """

  testCase """
    non-null assertion
    ---
    let untyped!
    ---
    let untyped!
  """, wrapper: ''

  throws """
    forbid ?!
    ---
    let ref?!
    ---
    ParseError
  """

  testCase """
    let ? sets to undefined
    ---
    let n?
    ---
    let n = undefined
  """

  testCase """
    let ? ignored with initializer
    ---
    let n? = 5
    ---
    let n= 5
  """

  testCase """
    let ?: allows for undefined
    ---
    let n?: number
    ---
    let n: undefined | number
  """

  testCase """
    shorthand let ?: allows for undefined
    ---
    n?: number .= undefined
    ---
    let n: undefined | number = undefined
  """

  testCase """
    let ?: with spaces
    ---
    let n ? : number
    ---
    let n  : undefined | number
  """

  testCase """
    let with indented type
    ---
    let x:
      number | string
    ---
    let x:
      number | string
  """

  testCase """
    let with one-line conditional type
    ---
    let x: if T extends Animal then string else number
    ---
    let x: (T extends Animal? string : number)
  """

  testCase """
    let with indented conditional type
    ---
    let x:
      if T extends Animal
        string
      else
        number
    ---
    let x:
      (T extends Animal?
        string
      :
        number)
  """
