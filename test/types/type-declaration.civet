{testCase, throws} from ../helper.civet

describe "[TS] type declaration", ->
  testCase """
    simple
    ---
    type x = Y
    ---
    type x = Y
  """

  testCase """
    assignment shorthand
    ---
    x ::= Y
    ---
    type x = Y
  """

  testCase """
    newline
    ---
    type Fred =
      (a: string) => number
    ---
    type Fred =
      (a: string) => number
  """

  testCase """
    nested braceless type
    ---
    type Point =
      x: number
      y: number
    ---
    type Point = {
      x: number
      y: number
    }
  """

  testCase """
    deeply nested braceless type
    ---
    type Point =
      coords:
        x: number
        y: number
      color: string
    ---
    type Point = {
      coords: {
        x: number
        y: number
      }
      color: string
    }
  """

  testCase """
    nested braceless type, no equals
    ---
    type Point
      x: number
      y: number
    ---
    type Point = {
      x: number
      y: number
    }
  """

  testCase """
    inline braceless type
    ---
    type Point = x: number, y: number
    ---
    type Point = {x: number, y: number}
  """

  testCase """
    nested braceless type with inline braceless types
    ---
    type Point =
      x: a: number, b: number
      y: c: [string], d: =>
    ---
    type Point = {
      x: {a: number, b: number}
      y: {c: [string], d: ()=>void}
    }
  """

  testCase """
    nested braceless type with inline braceless types and trailing comma
    ---
    type Point =
      x: a: number, b: number,
      y: c: [string], d: =>
    ---
    type Point = {
      x: {a: number, b: number,}
      y: {c: [string], d: ()=>void}
    }
  """

  testCase """
    nested array
    ---
    type Foo
      [
        (x: string) => number
        (x: number) => number | string
      ]
    ---
    type Foo =
      [
        (x: string) => number,
        (x: number) => number | string
      ]
  """

  testCase """
    array type
    ---
    type X = Y[]
    ---
    type X = Y[]
  """

  testCase """
    array of braced object type
    ---
    type X = {}[]
    ---
    type X = {}[]
  """

  testCase """
    function type
    ---
    type X = (message: string) => void
    ---
    type X = (message: string) => void
  """

  testCase """
    type parameters
    ---
    type Z<X, Y> = Array<X>
    ---
    type Z<X, Y> = Array<X>
  """

  testCase """
    type parameters with assignment shorthand
    ---
    Z<X, Y> ::= Array<X>
    ---
    type Z<X, Y> = Array<X>
  """

  testCase """
    type parameters with inline interface
    ---
    const map: Map<string, {content: string}> = new Map
    ---
    const map: Map<string, {content: string}> = new Map
  """

  testCase """
    nested or after newline
    ---
    type A =
      B |
      C |
      D
    ---
    type A =
      B |
      C |
      D
  """

  testCase """
    nested or after newline, no equals
    ---
    type A
      B |
      C |
      D
    ---
    type A =
      B |
      C |
      D
  """

  testCase """
    nested or after newline, assignment shorthand
    ---
    A ::=
      B |
      C |
      D
    ---
    type A =
      B |
      C |
      D
  """

  testCase """
    binary ops
    ---
    type A = B | C
    ---
    type A = B | C
  """

  testCase """
    multiple ops
    ---
    type X = B | C | D
    type Y = B & C | D
    ---
    type X = B | C | D
    type Y = B & C | D
  """

  testCase """
    prefix |
    ---
    type X =
      | number
      | string
    ---
    type X =
      | number
      | string
  """

  testCase """
    prefix |, no equals
    ---
    type X
      | number
      | string
    ---
    type X =
      | number
      | string
  """

  testCase """
    typeof
    ---
    const data = [1, 2, 3]
    type Data = typeof data
    ---
    const data = [1, 2, 3]
    type Data = typeof data
  """

  testCase """
    typeof accepts non-type expressions
    ---
    type Data = typeof @data
    ---
    type Data = typeof this.data
  """

  testCase """
    typeof accepts non-type expressions: prototype
    ---
    "civet coffeePrototype"
    type Data = typeof Foo::data
    ---
    type Data = typeof Foo.prototype.data
  """

  testCase """
    typeof import()
    ---
    type T = typeof import 'foo'
    ---
    type T = typeof import('foo')
  """

  testCase """
    typeof accepts type arguments
    ---
    type S = T<number>
    x
    ---
    type S = T<number>
    x
  """

  throws """
    typeof does not accept binary expressions
    ---
    type Data = typeof 'hello' + 'world'
  """

  testCase """
    conditional
    ---
    type Example1 = Dog extends Animal ? number : string
    ---
    type Example1 = Dog extends Animal ? number : string
  """

  testCase """
    conditional infer
    ---
    type Example1 = Dog extends Animal<infer U> ? U : string
    ---
    type Example1 = Dog extends Animal<infer U> ? U : string
  """

  describe "extends shorthand", ->
    testCase """
      conditional
      ---
      type Example1 = Dog < Animal ? number : string
      ---
      type Example1 = Dog extends Animal ? number : string
    """

    testCase """
      conditional infer
      ---
      type Example1 = Dog < Animal<infer U> ? U : string
      ---
      type Example1 = Dog extends Animal<infer U> ? U : string
    """

    testCase """
      tight conditional
      ---
      type Example1 = Dog<Animal ? number : string
      ---
      type Example1 = Dog extends Animal ? number : string
    """

    testCase """
      tight conditional infer
      ---
      type Example1 = Dog<Animal<infer U> ? U : string
      ---
      type Example1 = Dog extends Animal<infer U> ? U : string
    """

  describe "not extends", ->
    testCase """
      not extends
      ---
      type Example1 = Dog not extends Animal ? number : string
      ---
      type Example1 = Dog extends Animal ? string : number
    """

    testCase """
      !<
      ---
      type Example1 = Dog !< Animal ? number : string
      ---
      type Example1 = Dog extends Animal ? string : number
    """

    testCase """
      not<
      ---
      type Example1 = Dog not< Animal ? number : string
      ---
      type Example1 = Dog extends Animal ? string : number
    """

  describe "if/else conditional", ->
    testCase """
      one-line
      ---
      type Example1 = if Dog extends Animal then number else string
      ---
      type Example1 = (Dog extends Animal? number : string)
    """

    testCase """
      one-line unless
      ---
      type Example1 = unless Dog extends Animal then number else string
      ---
      type Example1 = (Dog extends Animal? string : number)
    """

    testCase """
      one-line negated
      ---
      type Example1 = if Dog not extends Animal then number else string
      ---
      type Example1 = (Dog extends Animal? string : number)
    """

    testCase """
      one-line negated unless
      ---
      type Example1 = unless Dog not extends Animal then number else string
      ---
      type Example1 = (Dog extends Animal? number : string)
    """

    testCase """
      two-line
      ---
      type Example1 = if Dog extends Animal then number
      else string
      ---
      type Example1 = (Dog extends Animal? number
      : string)
    """

    testCase """
      one-line parenthesized
      ---
      type Example1 = if (Dog extends Animal) number else string
      ---
      type Example1 = (Dog extends Animal? number : string)
    """

    testCase """
      two-line parenthesized
      ---
      type Example1 = if (Dog extends Animal) number
      else string
      ---
      type Example1 = (Dog extends Animal? number
      : string)
    """

    testCase """
      one-line no-else
      ---
      type Example1 = if Dog extends Animal then number
      ---
      type Example1 = (Dog extends Animal? number:never)
    """

    testCase """
      one-line unless no-else
      ---
      type Example1 = unless Dog extends Animal then number
      ---
      type Example1 = (Dog extends Animal?never: number)
    """

    testCase """
      multi-line indented
      ---
      type Example1 = if Dog extends Animal
        number
      else
        string
      ---
      type Example1 = (Dog extends Animal?
        number
      :
        string)
    """

    testCase """
      multi-line extra indented
      ---
      type Example1 =
        if Dog extends Animal
          number
        else
          string
      ---
      type Example1 =
        (Dog extends Animal?
          number
        :
          string)
    """

    testCase """
      else matching
      ---
      type Example1 =
        if Dog extends Animal
          if Dog extends Cat
            number
        else
          string
      ---
      type Example1 =
        (Dog extends Animal?
          (Dog extends Cat?
            number:never)
        :
          string)
    """

  testCase """
    parens
    ---
    type A = (X & Y) | (T & U)
    ---
    type A = (X & Y) | (T & U)
  """

  testCase """
    tuple
    ---
    type Empty = []
    type Example1 = [number, string]
    ---
    type Empty = []
    type Example1 = [number, string]
  """

  testCase """
    indented tuple
    ---
    type Example1 = [
      number
      string
    ]
    ---
    type Example1 = [
      number,
      string
    ]
  """

  testCase """
    question mark
    ---
    export type TerminalNode = [TerminalOp, string, Handler?]
    ---
    export type TerminalNode = [TerminalOp, string, Handler?]
  """

  testCase """
    keyof
    ---
    type A = keyof B
    ---
    type A = keyof B
  """

  testCase """
    indexed access
    ---
    type Age = Person["age"]
    ---
    type Age = Person["age"]
  """

  describe "indexed access shorthand", ->
    testCase """
      dot string
      ---
      type Age = Person."age"
      ---
      type Age = Person["age"]
    """

    testCase """
      dot template
      ---
      type Age = Person.`age${x}`
      ---
      type Age = Person[`age${x}`]
    """

    testCase """
      dot number
      ---
      type Age = Person.0
      ---
      type Age = Person[0]
    """

    testCase """
      coffeePrototype
      ---
      "civet coffeePrototype"
      type Age = Person::age
      ---
      type Age = Person["age"]
    """

  testCase """
    index signature
    ---
    type Arrayish = { [n: number]: unknown }
    ---
    type Arrayish = { [n: number]: unknown }
  """

  testCase """
    mapped type
    ---
    type OptionsFlags<Type> = {
      [Property in keyof Type]: boolean
    }
    ---
    type OptionsFlags<Type> = {
      [Property in keyof Type]: boolean
    }
  """

  testCase """
    mapped type
    ---
    type OptionsFlags<Type> = {
      [Property in keyof Type]: boolean
    }
    ---
    type OptionsFlags<Type> = {
      [Property in keyof Type]: boolean
    }
  """

  testCase """
    mapped type modifiers
    ---
    type OptionsFlags<Type> = {
      -readonly [Property in keyof Type]-?: boolean
    }
    ---
    type OptionsFlags<Type> = {
      -readonly [Property in keyof Type]-?: boolean
    }
  """

  throws """
    mapped type modifiers need to modify something
    ---
    type OptionsFlags<Type> = {
      -readonly [Property in keyof Type]-: boolean
    }
  """

  throws """
    mapped type modifiers need to modify something
    ---
    type OptionsFlags<Type> = {
      -[Property in keyof Type]-?: boolean
    }
  """

  testCase """
    remapped type
    ---
    type MappedTypeWithNewProperties<Type> = {
      [Properties in keyof Type as NewKeyType]: Type[Properties]
    }
    ---
    type MappedTypeWithNewProperties<Type> = {
      [Properties in keyof Type as NewKeyType]: Type[Properties]
    }
  """

  testCase """
    complicated
    ---
    type EventConfig<Events extends { kind: string }> = {
      [E in Events as E["kind"]]: (event: E) => void
    }
    ---
    type EventConfig<Events extends { kind: string }> = {
      [E in Events as E["kind"]]: (event: E) => void
    }
  """

  testCase """
    readonly
    ---
    foo: readonly string[] := [ "foo", "bar" ]
    ---
    const foo: readonly string[] = [ "foo", "bar" ]
  """

  testCase """
    declare
    ---
    declare const {a, b}: any, {c, d}: any
    ---
    declare const {a, b}: any, {c, d}: any
  """

  testCase """
    export declare
    ---
    export declare const {a, b}: any, {c, d}: any
    ---
    export declare const {a, b}: any, {c, d}: any
  """

  testCase """
    with newline after open paren
    ---
    type SourceMapEntries = (
      [number, number, number, number, number] |
      [number, number, number, number] |
      [number]
    )[][]
    ---
    type SourceMapEntries = (
      [number, number, number, number, number] |
      [number, number, number, number] |
      [number]
    )[][]
  """

  testCase """
    splat in tuple
    ---
    type Test = [string, ...string[]] | [string, ... Array<string>]
    ---
    type Test = [string, ...string[]] | [string, ... Array<string>]
  """

  testCase """
    trailing splat in tuple
    ---
    type Test = [string, string[]...] | [string, Array<string> ...]
    ---
    type Test = [string, ...string[]] | [string, ... Array<string>]
  """

  testCase """
    tuples with optionals
    ---
    type Point = [number, number, number?]
    ---
    type Point = [number, number, number?]
  """

  testCase """
    named tuples
    ---
    type Point = [x: number, y: number, z?: number]
    ---
    type Point = [x: number, y: number, z?: number]
  """

  testCase """
    named tuples, nested
    ---
    type Point = [
      x: number
      y: number
      z?: number
    ]
    ---
    type Point = [
      x: number,
      y: number,
      z?: number
    ]
  """

  testCase """
    named splat
    ---
    type Test = [x: number, ...rest: string[]]
    ---
    type Test = [x: number, ...rest: string[]]
  """

  testCase """
    named splats
    ---
    type Test = [...nums: number[], strings...: string[]]
    ---
    type Test = [...nums: number[], ...strings: string[]]
  """

  describe "| undefined shorthand", ->
    testCase """
      ?
      ---
      type Name = string?
      ---
      type Name = (string | undefined)
    """

    testCase """
      ??
      ---
      type Name = string??
      ---
      type Name = (string | undefined | null)
    """

    testCase """
      ?? in tuple
      ---
      type Names = [string??]
      ---
      type Names = [(string | null)?]
    """
