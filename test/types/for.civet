{testCase} from ../helper.civet

describe "[TS] for", ->
  testCase """
    explicit declaration
    ---
    for var x: T of y
      console.log x
    ---
    for (const item of y) {var x: T = item;
      console.log(x)
    }
  """

  testCase """
    for..of
    ---
    for x: T of y
      console.log x
    ---
    for (const item of y) {const x: T = item;
      console.log(x)
    }
  """

  testCase """
    for each..of
    ---
    for each x: T of y
      console.log x
    ---
    for (let i = 0, len = y.length; i < len; i++) {const x: T = y[i];
      console.log(x)
    }
  """

  testCase """
    for..in
    ---
    for x: T in y
      console.log x
    ---
    for (const key in y) {const x: T = key;
      console.log(x)
    }
  """

  testCase """
    for..in with two declarations
    ---
    for x: T, y in z
      console.log x, y
    ---
    for (const key in z) {const x: T = key;const y = z[x];
      console.log(x, y)
    }
  """

  testCase """
    destructuring for..in with two declarations
    ---
    for [a, b]: T, value in z
      console.log x
    ---
    for (const key in z) {const [a, b]: T = key;const value = z[key];
      console.log(x)
    }
  """

  testCase """
    parenthesized
    ---
    for (x: T of y)
      console.log x
    ---
    for (const item of y) {const x: T = item;
      console.log(x)
    }
  """

  describe ":: typing of properties", ->
    testCase """
      array
      ---
      for [type:: TokenType, token] of Object.entries(tokens)
        console.log type, token
      ---
      for (const item of Object.entries(tokens)) {const [type, token]: [ TokenType,unknown] = item;
        console.log(type, token)
      }
    """

    testCase """
      object
      ---
      for {type:: TokenType, token} of items
        console.log type, token
      ---
      for (const item of items) {const {type, token}: {type: TokenType, token: unknown} = item;
        console.log(type, token)
      }
    """
