{testCase, throws} from ../helper.civet

describe "[TS] destructuring", ->
  testCase """
    basic
    ---
    const hello = ({ first, last }: Person) =>
      return `Hello ${first} ${last}!`
    ---
    const hello = ({ first, last }: Person) => {
      return `Hello ${first} ${last}!`
    }
  """

  describe ":: typing of properties", ->
    testCase """
      simple
      ---
      { first:: string, last?:: string } := person
      ---
      const { first, last }: { first: string, last?: string} = person
    """

    testCase """
      simple const
      ---
      const { first:: string, last?:: string } = person
      ---
      const { first, last }: { first: string, last?: string} = person
    """

    testCase """
      renamed
      ---
      { first: f:: string, last: l ?:: string } := person
      ---
      const { first: f, last: l }: { first: string, last ?: string} = person
    """

    testCase """
      at
      ---
      first := 'Hello'
      { @first:: string, @last?:: string } := person
      ---
      const first = 'Hello'
      const {first:  first1, last }: { first: string, last?: string} = person;this.first = first1;this.last = last;
    """

    testCase """
      rest
      ---
      { first:: string, ...rest:: { last?: string } } := person
      ---
      const { first, ...rest }: { first: string,} & ({ last?: string }) = person
    """

    throws """
      pin
      ---
      { ^foo:: string } := person
      ---
      ParseErrors: unknown:1:7 Pinned properties cannot have type annotations
    """

    testCase """
      function parameter
      ---
      function Component({
        first:: string
        last: l:: string
        ...rest:: OtherProps
      })
      ---
      function Component({
        first,
        last: l,
        ...rest
      }: {
        first: string,
        last: string,} & OtherProps){}
    """

    testCase """
      nested with outer type
      ---
      { name: {first, last}:: Name } := person
      ---
      const { name: {first, last} }: { name: Name} = person
    """

    testCase """
      nested objects
      ---
      { name: {first:: string, last?:: string} } := person
      ---
      const { name: {first, last} }: { name: {first: string, last?: string}} = person
    """

    testCase """
      objects with initializers
      ---
      { name: {first:: string = "Hello", last?:: string = "World"} } := person
      ---
      const { name: {first = "Hello", last = "World"} }: { name: {first?: string, last?: string}} = person
    """

    testCase """
      array
      ---
      [ first:: string, last?:: string ] := person
      ---
      const [ first, last ]: [ string,undefined | string] = person
    """

    testCase """
      array with some types
      ---
      [ first:: string, last ] := person
      ---
      const [ first, last ]: [ string,unknown] = person
    """

    testCase """
      array with rest
      ---
      [ first:: string, ...rest:: string[] ] := person
      ---
      const [ first, ...rest ]: [ string,... string[]] = person
    """

    testCase """
      object with nested array
      ---
      { name: [ first:: string, last?:: string ] } := person
      ---
      const { name: [ first, last ] }: { name: [ string,undefined | string]} = person
    """

    testCase """
      array with nested object
      ---
      [ { first:: string, last?:: string }, ...rest ] := people
      ---
      const [ { first, last }, ...rest ]: [{ first: string, last?: string},...unknown[]] = people
    """
