{testCase} from ../helper.civet

describe "[TS] function", ->
  testCase """
    -> has types
    ---
    const x = (a: number, b: number) : number ->
      return a + b
    ---
    const x = function(a: number, b: number) : number {
      return a + b
    }
  """

  testCase """
    => has types
    ---
    () : number => x
    (x) : number => x
    ---
    () : number => x
    (x) : number => x
  """

  testCase """
    interface method with void => shorthand
    ---
    interface Array<T>
      listen(fu: =>): void
    ---
    interface Array<T> {
      listen(fu: ()=>void): void
    }
  """

  testCase """
    no parens is application
    ---
    x => y
    ---
    x(() => y)
  """

  testCase """
    'function' has types
    ---
    function add(a: number, b: number) : number
      return a + b
    ---
    function add(a: number, b: number) : number {
      return a + b
    }
  """

  testCase """
    argumentless without parens
    ---
    function f: void
      console.log 'hi'
    ---
    function f(): void {
      console.log('hi')
    }
  """

  testCase """
    type parameters
    ---
    function add<T>(a: T, b: T) : T
      return a + b
    ---
    function add<T>(a: T, b: T) : T {
      return a + b
    }
  """

  testCase """
    arrow function type parameter
    ---
    const add = <T>(a: T, b: T) : T => a + b
    ---
    const add = <T,>(a: T, b: T) : T => a + b
  """

  testCase """
    arrow function type parameters
    ---
    const ignore = <T, U>(a: T, b: U) : void => null
    ---
    const ignore = <T, U>(a: T, b: U) : void => null
  """

  testCase """
    optional parameter
    ---
    const x = (a: number, b?: number) : number ->
      return a + b
    ---
    const x = function(a: number, b?: number) : number {
      return a + b
    }
  """

  testCase """
    asserts
    ---
    assert = (value: unknown): asserts value ->
      return !!value
    ---
    assert = function(value: unknown): asserts value {
      return !!value
    }
  """

  testCase """
    type predicate
    ---
    isCat = (animal: Cat | Dog): animal is Cat ->
      return typeof animal.numberOfLives === 'number'
    ---
    isCat = function(animal: Cat | Dog): animal is Cat {
      return typeof animal.numberOfLives === 'number'
    }
  """

  testCase """
    async function type
    ---
    async function() : X {
      return "x"
    }
    ---
    async function() : X {
      return "x"
    }
  """

  testCase """
    async generator function type
    ---
    async function* () : X {
      return "x"
    }
    ---
    async function* () : X {
      return "x"
    }
  """

  testCase """
    generator function type
    ---
    function* () : X {
      return "x"
    }
    ---
    function* () : X {
      return "x"
    }
  """

  testCase """
    no implicit return for void type
    ---
    (x): void ->
      console.log(x)
    ---
    function(x): void {
      console.log(x)
    }
  """

  testCase """
    overloads
    ---
    function add(a: number, b: number): number
    function add(a: string, b: string): string
    function add(a: number | string, b: number | string): number | string
      return a + b
    ---
    function add(a: number, b: number): number
    function add(a: string, b: string): string
    function add(a: number | string, b: number | string): number | string {
      return a + b
    }
  """

  testCase """
    complex
    ---
    declare function $C<T extends any[]>(...terms: { [I in keyof T]: Parser<T[I]> }): Parser<T[number]>
    ---
    declare function $C<T extends any[]>(...terms: { [I in keyof T]: Parser<T[I]> }): Parser<T[number]>
  """

  describe "application", ->
    testCase """
      type arguments
      ---
      x<T>()
      ---
      x<T>()
    """

    testCase """
      type arguments with implicit parens
      ---
      x<T> y
      ---
      x<T>(y)
    """

  describe "this type", ->
    testCase """
      interface method
      ---
      interface Object {
          state<T>(this: T): T
      }
      ---
      interface Object {
          state<T>(this: T): T
      }
    """

    testCase """
      interface method @ shorthand
      ---
      interface Object {
          state<T>(@: T): T
      }
      ---
      interface Object {
          state<T>(this: T): T
      }
    """

    testCase """
      plain function
      ---
      function (this: T) {}
      ---
      function (this: T) {}
    """

    testCase """
      plain function with @ shorthand
      ---
      function (@: T) {}
      ---
      function (this: T) {}
    """
