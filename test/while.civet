{testCase} from ./helper.civet

describe "while", ->
  testCase """
    basic
    ---
    while (x < 3)
      x++
    ---
    while (x < 3) {
      x++
    }
  """

  testCase """
    no space
    ---
    while(x < 3)
      x++
    ---
    while(x < 3) {
      x++
    }
  """

  testCase """
    optional parens
    ---
    while x < 3
      x++
    ---
    while (x < 3) {
      x++
    }
  """

  testCase """
    variable that starts with while isn't interpreted as block
    ---
    while2
    x
    ---
    while2
    x
  """

  testCase """
    empty
    ---
    while f x++
    ---
    while (f(x++));
  """

  testCase """
    until
    ---
    until (x < 3)
      x--
    ---
    while (!(x < 3)) {
      x--
    }
  """

  testCase """
    empty until
    ---
    until f x++
    ---
    while (!f(x++));
  """

  testCase """
    postfix while
    ---
    x() while y
    ---
    while (y) { x() }
  """

  testCase """
    postfix until
    ---
    x() until y
    ---
    while (!y) { x() }
  """

  testCase """
    postfix while with semicolon
    ---
    x() while y;
    ---
    while (y) { x() };
  """

  testCase """
    postfix until with semicolon
    ---
    x() until y;
    ---
    while (!y) { x() };
  """

  testCase """
    postfix while that could be an expression
    ---
    return while x
    ---
    while (x) { return }
  """

  describe "iteration results", ->
    testCase """
      semi-colon suppresses result push
      ---
      x = while y
        if y(1)
          a
        else
          b;
      ---
      const results=[];while (y) {
        if (y(1)) {
          results.push(a)
        }
        else {
          b;
        }
      };x = results
    """

  describe "condition decs", ->
    testCase """
      simple while
      ---
      while item := next()
        item++
      ---
      let ref;while ((ref = next())) {const item = ref;
        item++
      }
    """

    testCase """
      while
      ---
      while {x, y} := next()
        x++
      ---
      let ref;while ((ref = next()) && typeof ref === 'object' && 'x' in ref && 'y' in ref) {const {x, y} = ref;
        x++
      }
    """

    testCase """
      while with nonnull check
      ---
      while node? := next()
        node.visit()
      ---
      let ref;while ((ref= next()) != null) {const node = ref;
        node.visit()
      }
    """

    testCase """
      while with complex nonnull check
      ---
      while {x, y}? := next()
        x++
      ---
      let ref;while (((ref= next()) != null) && typeof ref === 'object' && 'x' in ref && 'y' in ref) {const {x, y} = ref;
        x++
      }
    """

    testCase """
      until
      ---
      until item := next()
        console.log "falsey"
      console.log "truthy", item
      ---
      let ref;while (!(ref = next())) {
        console.log("falsey")
      }const item = ref;
      console.log("truthy", item)
    """

    testCase """
      while with statement before
      ---
      x = 0
      while {x, y} := next()
        x++
      ---
      x = 0
      let ref;while ((ref = next()) && typeof ref === 'object' && 'x' in ref && 'y' in ref) {const {x, y} = ref;
        x++
      }
    """

    testCase """
      while inside function
      ---
      f = ->
        while {x, y} := next()
          x++
        ;
      ---
      f = function() {
        let ref;while ((ref = next()) && typeof ref === 'object' && 'x' in ref && 'y' in ref) {const {x, y} = ref;
          x++
        }
        ;
      }
    """

    testCase """
      while inside function
      ---
      f = ->
        a
        while {x, y} := next()
          x++
        ;
      ---
      f = function() {
        a
        let ref;while ((ref = next()) && typeof ref === 'object' && 'x' in ref && 'y' in ref) {const {x, y} = ref;
          x++
        }
        ;
      }
    """

    testCase """
      while* and until*
      ---
      while* x < 3
        x++
      until* x < 3
        x++
      ---
      (function*(){while (x < 3) {
        yield x++
      }})();
      (function*(){while (!(x < 3)) {
        yield x++
      }})()
    """
