{ testCase, throws, evalsTo } from "./helper.civet"

describe "range", ->
  testCase """
    [0..10]
    ---
    [0..10]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  """

  testCase """
    [0...10]
    ---
    [0...10]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
  """

  testCase """
    spaced
    ---
    [0 ... 10]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
  """

  testCase """
    inconsistent spacing makes function call
    ---
    [a ...b]
    ---
    [a(...b)]
  """

  testCase """
    [0..-10]
    ---
    [0..-10]
    ---
    []
  """

  testCase """
    [97524..97520]
    ---
    [97520..97524]
    [97524..97520]
    ---
    [97520, 97521, 97522, 97523, 97524];
    []
  """

  testCase """
    [0...256]
    ---
    [0...256]
    ---
    var range: (start: number, end: number) => number[] = (start, end) => {
      const length = end - start;
      if (length <= 0) return [];
      const arr = Array(length);
      for (let i = 0; i < length; ++i) {
        arr[i] = i + start;
      }
      return arr;
    };
    range(0,256)
  """

  it "evals to the correct ranges", ->
    closedAscendingArr := i for let i = 0; i <= 100; i++ // [0..100]
    halfClosedAscendingArr := i for let i = 0; i < 100; i++ // [0..<100]
    openAscendingArr := i for let i = 1; i < 100; i++ // [0<..<100]

    evalsTo '[0..100]', closedAscendingArr
    evalsTo '[0..<=100]', closedAscendingArr
    evalsTo '[0<=..<=100]', closedAscendingArr
    evalsTo '[0...100]', halfClosedAscendingArr
    evalsTo '[0..<100]', halfClosedAscendingArr
    evalsTo '[0<=..<100]', halfClosedAscendingArr
    evalsTo '[0<..<100]', openAscendingArr

    closedDescendingArr := closedAscendingArr.reverse()
    halfClosedDescendingArr := i for let i = 100; i > 0; i-- // [100>=..>0]
    openDescendingArr := openAscendingArr.reverse()

    evalsTo '[100>=..>=0]', closedDescendingArr
    evalsTo '[100>=..>0]', halfClosedDescendingArr
    evalsTo '[100>..>0]', openDescendingArr

    stringClosedAscendingArr := [' '..'~']
    stringHalfClosedAscendingArr := [' '...'~']
    stringOpenAscendingArr := ['!'..<'~']

    evalsTo "[' '..'~']", stringClosedAscendingArr
    evalsTo "[' '..<='~']", stringClosedAscendingArr
    evalsTo "[' '<=..<='~']", stringClosedAscendingArr
    evalsTo "[' '...'~']", stringHalfClosedAscendingArr
    evalsTo "[' '..<'~']", stringHalfClosedAscendingArr
    evalsTo "[' '<=..<'~']", stringHalfClosedAscendingArr
    evalsTo "[' '<..<'~']", stringOpenAscendingArr

    stringClosedDescendingArr := stringClosedAscendingArr.reverse()
    stringHalfClosedDescendingArr := ['~'>=..>' ']
    stringOpenDescendingArr := stringOpenAscendingArr.reverse()

    evalsTo "['~'>=..>=' ']", stringClosedDescendingArr
    evalsTo "['~'>=..>' ']", stringHalfClosedDescendingArr
    evalsTo "['~'>..>' ']", stringOpenDescendingArr

  testCase """
    [0..255]
    ---
    [0..255]
    ---
    var range: (start: number, end: number) => number[] = (start, end) => {
      const length = end - start;
      if (length <= 0) return [];
      const arr = Array(length);
      for (let i = 0; i < length; ++i) {
        arr[i] = i + start;
      }
      return arr;
    };
    range(0,255 + 1)
  """

  testCase """
    separators
    ---
    [100_000..100_001]
    ---
    [100000, 100001]
  """

  testCase """
    binary
    ---
    [0..0b10]
    ---
    [0, 1, 2]
  """

  testCase """
    binary with separators
    ---
    [0..0b10_10]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  """

  testCase """
    octal
    ---
    [0..0o10]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8]
  """

  testCase """
    hex
    ---
    [0..0xa]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  """

  testCase """
    negative hex
    ---
    [0..-0xa]
    ---
    []
  """

  testCase """
    float inclusive
    ---
    [0..5.1]
    ---
    [0, 1, 2, 3, 4, 5]
  """

  // This is weird but matches CoffeeScript
  testCase """
    float exclusive
    ---
    [0...5.1]
    ---
    [0, 1, 2, 3, 4]
  """

  testCase """
    [x - 5 .. x + 5]
    ---
    [x - 5 .. x + 5]
    ---
    var range: (start: number, end: number) => number[] = (start, end) => {
      const length = end - start;
      if (length <= 0) return [];
      const arr = Array(length);
      for (let i = 0; i < length; ++i) {
        arr[i] = i + start;
      }
      return arr;
    };
    range(x - 5,(x + 5) + 1 )
  """

  testCase """
    character range
    ---
    [' '..'~']
    ---
    var stringRange: (start: number, length: number, step: number) => string[] = (start, length, step) => {
      if (length <= 0) return [];
      const arr = Array(length);
      if (step > 0) {
        for (let i = 0; i < length; ++i) {
          arr[i] = String.fromCharCode(start + i);
        }
      } else {
        for (let i = 0; i < length; ++i) {
          arr[i] = String.fromCharCode(start - i);
        }
      }
      return arr;
    };
    stringRange(32, 95, 1)
  """

  testCase """
    ['a' .. 'f']
    ---
    ['a' .. 'f']
    ---
    ["a", "b", "c", "d", "e", "f"]
  """

  testCase """
    ["f" .. "a"]
    ---
    ["f" .. "a"]
    ---
    []
  """

  testCase """
    ["a".."z"]
    ---
    ["a".."z"]
    ---
    ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
  """

  testCase """
    ["Z".."A"]
    ---
    ["Z".."A"]
    ---
    []
  """

  testCase """
    ["Z" .. "a"]
    ---
    ["Z" .. "a"]
    ---
    ["Z", "[", "\\\\", "]", "^", "_", "`", "a"]
  """

  testCase """
    [" " .. "/"]
    ---
    [" " .. "/"]
    ---
    [" ", "!", "\\"", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/"]
  """

  testCase """
    semicolons
    ---
    f()
    [0...10]
    [0...n]
    ---
    var range: (start: number, end: number) => number[] = (start, end) => {
      const length = end - start;
      if (length <= 0) return [];
      const arr = Array(length);
      for (let i = 0; i < length; ++i) {
        arr[i] = i + start;
      }
      return arr;
    };
    f();
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    range(0,n)
  """

  describe "inequalities on range", ->
    testCase """
      ..< with numbers
      ---
      [0..<10]
      ---
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    """

    testCase """
      ..<= with numbers
      ---
      [0..<=10]
      ---
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    """

    testCase """
      ..≤ with numbers
      ---
      [0..≤10]
      ---
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    """

    testCase """
      <.. with numbers
      ---
      [0<..10]
      ---
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    """

    testCase """
      <=.. with numbers
      ---
      [0<=..10]
      ---
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    """

    testCase """
      <..< with numbers
      ---
      [0<..<10]
      ---
      [1, 2, 3, 4, 5, 6, 7, 8, 9]
    """

    throws """
      <..> with numbers
      ---
      [0<..>10]
      ---
      ParseErrors: unknown:1:4 <..> uses inconsistent < vs. >
    """

    testCase """
      ..< null with numbers
      ---
      [10..<0]
      ---
      []
    """

    testCase """
      ..> with numbers
      ---
      [10..>0]
      ---
      [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
    """

    testCase """
      ..>= with numbers
      ---
      [10..>=0]
      ---
      [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
    """

    testCase """
      ..< with strings
      ---
      ['a'..<'g']
      ---
      ["a", "b", "c", "d", "e", "f"]
    """

    testCase """
      <.. with strings
      ---
      ['a'<..'g']
      ---
      ["b", "c", "d", "e", "f", "g"]
    """

    testCase """
      <..< with strings
      ---
      ['a'<..<'g']
      ---
      ["b", "c", "d", "e", "f"]
    """

    testCase """
      ..< long with strings
      ---
      [' '..<'~']
      ---
      var stringRange: (start: number, length: number, step: number) => string[] = (start, length, step) => {
        if (length <= 0) return [];
        const arr = Array(length);
        if (step > 0) {
          for (let i = 0; i < length; ++i) {
            arr[i] = String.fromCharCode(start + i);
          }
        } else {
          for (let i = 0; i < length; ++i) {
            arr[i] = String.fromCharCode(start - i);
          }
        }
        return arr;
      };
      stringRange(32, 94, 1)
    """

    testCase """
      <.. long with strings
      ---
      [' '<..'~']
      ---
      var stringRange: (start: number, length: number, step: number) => string[] = (start, length, step) => {
        if (length <= 0) return [];
        const arr = Array(length);
        if (step > 0) {
          for (let i = 0; i < length; ++i) {
            arr[i] = String.fromCharCode(start + i);
          }
        } else {
          for (let i = 0; i < length; ++i) {
            arr[i] = String.fromCharCode(start - i);
          }
        }
        return arr;
      };
      stringRange(33, 94, 1)
    """

    testCase """
      <..< long with strings
      ---
      [' '<..<'~']
      ---
      var stringRange: (start: number, length: number, step: number) => string[] = (start, length, step) => {
        if (length <= 0) return [];
        const arr = Array(length);
        if (step > 0) {
          for (let i = 0; i < length; ++i) {
            arr[i] = String.fromCharCode(start + i);
          }
        } else {
          for (let i = 0; i < length; ++i) {
            arr[i] = String.fromCharCode(start - i);
          }
        }
        return arr;
      };
      stringRange(33, 93, 1)
    """

    throws """
      <..> with strings
      ---
      ['a'<..>'g']
      ---
      ParseErrors: unknown:1:6 <..> uses inconsistent < vs. >
    """

    testCase """
      ..< null with strings
      ---
      ['g'..<'a']
      ---
      []
    """

    testCase """
      ..> with strings
      ---
      ['g'..>'a']
      ---
      ["g", "f", "e", "d", "c", "b"]
    """

    testCase """
      ..>= with strings
      ---
      ['g'..>='a']
      ---
      ["g", "f", "e", "d", "c", "b", "a"]
    """

    testCase """
      ..< with variables
      ---
      [a..<b]
      ---
      var range: (start: number, end: number) => number[] = (start, end) => {
        const length = end - start;
        if (length <= 0) return [];
        const arr = Array(length);
        for (let i = 0; i < length; ++i) {
          arr[i] = i + start;
        }
        return arr;
      };
      range(a,b)
    """

    testCase """
      ..<= with variables
      ---
      [a..<=b]
      ---
      var range: (start: number, end: number) => number[] = (start, end) => {
        const length = end - start;
        if (length <= 0) return [];
        const arr = Array(length);
        for (let i = 0; i < length; ++i) {
          arr[i] = i + start;
        }
        return arr;
      };
      range(a,b + 1)
    """

    testCase """
      <.. with variables
      ---
      [a<..b]
      ---
      var range: (start: number, end: number) => number[] = (start, end) => {
        const length = end - start;
        if (length <= 0) return [];
        const arr = Array(length);
        for (let i = 0; i < length; ++i) {
          arr[i] = i + start;
        }
        return arr;
      };
      range(a + 1,b + 1)
    """

    testCase """
      <..< with variables
      ---
      [a<..<b]
      ---
      var range: (start: number, end: number) => number[] = (start, end) => {
        const length = end - start;
        if (length <= 0) return [];
        const arr = Array(length);
        for (let i = 0; i < length; ++i) {
          arr[i] = i + start;
        }
        return arr;
      };
      range(a + 1,b)
    """

    throws """
      <..> with variables
      ---
      [a<..>b]
      ---
      ParseErrors: unknown:1:4 <..> uses inconsistent < vs. >
    """

    testCase """
      ..> with variables
      ---
      [a..>b]
      ---
      var revRange: (start: number, end: number) => number[] = (start, end) => {
        const length = start - end;
        if (length <= 0) return [];
        const arr = Array(length);
        for (let i = 0; i < length; ++i) {
          arr[i] = start - i;
        }
        return arr;
      };
      revRange(a,b)
    """

    testCase """
      >.. with variables
      ---
      [a>..b]
      ---
      var revRange: (start: number, end: number) => number[] = (start, end) => {
        const length = start - end;
        if (length <= 0) return [];
        const arr = Array(length);
        for (let i = 0; i < length; ++i) {
          arr[i] = start - i;
        }
        return arr;
      };
      revRange(a - 1,b - 1)
    """

    testCase """
      >.. with expressions
      ---
      [a ?? aa >.. b ?? bb]
      ---
      var revRange: (start: number, end: number) => number[] = (start, end) => {
        const length = start - end;
        if (length <= 0) return [];
        const arr = Array(length);
        for (let i = 0; i < length; ++i) {
          arr[i] = start - i;
        }
        return arr;
      };
      revRange((a ?? aa) - 1,(b ?? bb) - 1 )
    """

    testCase """
      >..> with variables
      ---
      [a>..>b]
      ---
      var revRange: (start: number, end: number) => number[] = (start, end) => {
        const length = start - end;
        if (length <= 0) return [];
        const arr = Array(length);
        for (let i = 0; i < length; ++i) {
          arr[i] = start - i;
        }
        return arr;
      };
      revRange(a - 1,b)
    """

    testCase """
      <..< spaced out
      ---
      [a /*1*/ < /*2*/ .. /*3*/ < /*4*/ b]
      ---
      var range: (start: number, end: number) => number[] = (start, end) => {
        const length = end - start;
        if (length <= 0) return [];
        const arr = Array(length);
        for (let i = 0; i < length; ++i) {
          arr[i] = i + start;
        }
        return arr;
      };
      range(a + 1, /*4*/ b /*1*/  /*2*/ )
    """
