{ testCase, throws } from "./helper.civet"

describe "range", ->
  testCase """
    [0..10]
    ---
    [0..10]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  """

  testCase """
    [0...10]
    ---
    [0...10]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
  """

  testCase """
    spaced
    ---
    [0 ... 10]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
  """

  testCase """
    inconsistent spacing makes function call
    ---
    [a ...b]
    ---
    [a(...b)]
  """

  testCase """
    [0..-10]
    ---
    [0..-10]
    ---
    [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]
  """

  testCase """
    [97524..97520]
    ---
    [97524..97520]
    ---
    [97524, 97523, 97522, 97521, 97520]
  """

  testCase """
    [0...256]
    ---
    [0...256]
    ---
    ((s, e) => {let step = e > s ? 1 : -1; return Array.from({length: Math.abs(e - s)}, (_, i) => s + i * step)})(0,256)
  """

  testCase """
    [0..255]
    ---
    [0..255]
    ---
    ((s, e) => {let step = e > s ? 1 : -1; return Array.from({length: Math.abs(e - s) + 1}, (_, i) => s + i * step)})(0,255)
  """

  testCase """
    separators
    ---
    [100_000..100_001]
    ---
    [100000, 100001]
  """

  testCase """
    binary
    ---
    [0..0b10]
    ---
    [0, 1, 2]
  """

  testCase """
    binary with separators
    ---
    [0..0b10_10]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  """

  testCase """
    octal
    ---
    [0..0o10]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8]
  """

  testCase """
    hex
    ---
    [0..0xa]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  """

  testCase """
    negative hex
    ---
    [0..-0xa]
    ---
    [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]
  """

  testCase """
    float inclusive
    ---
    [0..5.1]
    ---
    [0, 1, 2, 3, 4, 5]
  """

  // This is weird but matches CoffeeScript
  testCase """
    float exclusive
    ---
    [0...5.1]
    ---
    [0, 1, 2, 3, 4]
  """

  testCase """
    [x - 5 .. x + 5]
    ---
    [x - 5 .. x + 5]
    ---
    ((s, e) => {let step = e > s ? 1 : -1; return Array.from({length: Math.abs(e - s) + 1}, (_, i) => s + i * step)})(x - 5 , x + 5)
  """

  testCase """
    character range
    ---
    [' '..'~']
    ---
    Array.from({length: 95}, (_, i) => String.fromCharCode(32 + i))
  """

  testCase """
    ['a' .. 'f']
    ---
    ['a' .. 'f']
    ---
    ["a", "b", "c", "d", "e", "f"]
  """

  testCase """
    ["f" .. "a"]
    ---
    ["f" .. "a"]
    ---
    ["f", "e", "d", "c", "b", "a"]
  """

  testCase """
    ["a".."z"]
    ---
    ["a".."z"]
    ---
    ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
  """

  testCase """
    ["Z".."A"]
    ---
    ["Z".."A"]
    ---
    ["Z", "Y", "X", "W", "V", "U", "T", "S", "R", "Q", "P", "O", "N", "M", "L", "K", "J", "I", "H", "G", "F", "E", "D", "C", "B", "A"]
  """

  testCase """
    ["Z" .. "a"]
    ---
    ["Z" .. "a"]
    ---
    ["Z", "[", "\\\\", "]", "^", "_", "`", "a"]
  """

  testCase """
    [" " .. "/"]
    ---
    [" " .. "/"]
    ---
    [" ", "!", "\\"", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/"]
  """

  testCase """
    semicolons
    ---
    f()
    [0...10]
    [0...n]
    ---
    f();
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    ((s, e) => {let step = e > s ? 1 : -1; return Array.from({length: Math.abs(e - s)}, (_, i) => s + i * step)})(0,n)
  """

  describe "inequalities on range", ->
    testCase """
      ..< with numbers
      ---
      [0..<10]
      ---
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    """

    testCase """
      ..<= with numbers
      ---
      [0..<=10]
      ---
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    """

    testCase """
      ..≤ with numbers
      ---
      [0..≤10]
      ---
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    """

    testCase """
      <.. with numbers
      ---
      [0<..10]
      ---
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    """

    testCase """
      <=.. with numbers
      ---
      [0<=..10]
      ---
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    """

    testCase """
      <..< with numbers
      ---
      [0<..<10]
      ---
      [1, 2, 3, 4, 5, 6, 7, 8, 9]
    """

    throws """
      <..> with numbers
      ---
      [0<..>10]
      ---
      ParseErrors: unknown:1:1 <..> uses inconsistent < vs. >
    """

    testCase """
      ..< null with numbers
      ---
      [10..<0]
      ---
      []
    """

    testCase """
      ..> with numbers
      ---
      [10..>0]
      ---
      [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
    """

    testCase """
      ..>= with numbers
      ---
      [10..>=0]
      ---
      [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
    """

    testCase """
      ..< with strings
      ---
      ['a'..<'g']
      ---
      ["a", "b", "c", "d", "e", "f"]
    """

    testCase """
      <.. with strings
      ---
      ['a'<..'g']
      ---
      ["b", "c", "d", "e", "f", "g"]
    """

    testCase """
      <..< with strings
      ---
      ['a'<..<'g']
      ---
      ["b", "c", "d", "e", "f"]
    """

    testCase """
      ..< long with strings
      ---
      [' '..<'~']
      ---
      Array.from({length: 94}, (_, i) => String.fromCharCode(32 + i))
    """

    testCase """
      <.. long with strings
      ---
      [' '<..'~']
      ---
      Array.from({length: 94}, (_, i) => String.fromCharCode(33 + i))
    """

    testCase """
      <..< long with strings
      ---
      [' '<..<'~']
      ---
      Array.from({length: 93}, (_, i) => String.fromCharCode(33 + i))
    """

    testCase """
      <..< long with strings
      ---
      [' '<..<'~']
      ---
      Array.from({length: 93}, (_, i) => String.fromCharCode(33 + i))
    """

    throws """
      <..> with strings
      ---
      ['a'<..>'g']
      ---
      ParseErrors: unknown:1:1 <..> uses inconsistent < vs. >
    """

    testCase """
      ..< null with strings
      ---
      ['g'..<'a']
      ---
      []
    """

    testCase """
      ..> with strings
      ---
      ['g'..>'a']
      ---
      ["g", "f", "e", "d", "c", "b"]
    """

    testCase """
      ..>= with strings
      ---
      ['g'..>='a']
      ---
      ["g", "f", "e", "d", "c", "b", "a"]
    """

    testCase """
      ..< with variables
      ---
      [a..<b]
      ---
      ((s, e) => Array.from({length: e - s}, (_, i) => s + i))(a,b)
    """

    testCase """
      ..<= with variables
      ---
      [a..<=b]
      ---
      ((s, e) => Array.from({length: e - s + 1}, (_, i) => s + i))(a,b)
    """

    testCase """
      <.. with variables
      ---
      [a<..b]
      ---
      ((s, e) => Array.from({length: e - s}, (_, i) => s + i))(a + 1,b)
    """

    testCase """
      <..< with variables
      ---
      [a<..<b]
      ---
      ((s, e) => Array.from({length: e - s - 1}, (_, i) => s + i))(a + 1,b)
    """

    throws """
      <..> with variables
      ---
      [a<..>b]
      ---
      ParseErrors: unknown:1:7 <..> uses inconsistent < vs. >
    """

    testCase """
      ..> with variables
      ---
      [a..>b]
      ---
      ((s, e) => Array.from({length: s - e}, (_, i) => s - i))(a,b)
    """

    testCase """
      >.. with variables
      ---
      [a>..b]
      ---
      ((s, e) => Array.from({length: s - e}, (_, i) => s - i))(a - 1,b)
    """

    testCase """
      >.. with expressions
      ---
      [a ?? aa >..b]
      ---
      ((s, e) => Array.from({length: s - e}, (_, i) => s - i))((a ?? aa) - 1 ,b)
    """

    testCase """
      >..> with variables
      ---
      [a>..>b]
      ---
      ((s, e) => Array.from({length: s - e - 1}, (_, i) => s - i))(a - 1,b)
    """

    testCase """
      <..< spaced out
      ---
      [a /*1*/ < /*2*/ .. /*3*/ < /*4*/ b]
      ---
      ((s, e) => Array.from({length: e - s - 1}, (_, i) => s + i))(a + 1 /*1*/  /*2*/ , /*3*/  /*4*/ b)
    """
