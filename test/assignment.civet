{testCase, throws} from ./helper.civet

describe "assignment", ->
  testCase """
    assignment
    ---
    a = b
    ---
    a = b
  """

  testCase """
    mutation
    ---
    a += b
    a -= b
    ---
    a += b
    a -= b
  """

  testCase """
    allows newlines
    ---
    a =
    b
    ---
    a =
    b
  """

  testCase """
    array destructuring
    ---
    [a, b] = c
    ---
    [a, b] = c
  """

  testCase """
    array destructuring rest element
    ---
    [a, ...b] = c
    ---
    [a, ...b] = c
  """

  testCase """
    a = b == c
    ---
    a = b == c
    ---
    a = b == c
  """

  testCase """
    a = b === c
    ---
    a = b === c
    ---
    a = b === c
  """

  testCase """
    a = b is c
    ---
    a = b is c
    ---
    a = b === c
  """

  testCase """
    array destructuring with non-end rest element
    ---
    [a, ...b, c] = d
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    [a, ...b] = d, [c] = splice.call(b, -1)
  """

  testCase """
    object destructuring
    ---
    {a, b} = c
    ---
    ({a, b} = c)
  """

  testCase """
    object destructuring rest property
    ---
    {a, b, ...c} = d
    ---
    ({a, b, ...c} = d)
  """

  throws """
    object destructuring with multiple rest properties
    ---
    {a, b, ...c, ...d} = e
  """

  testCase """
    destructuring nested object with multiple keys per line
    ---
    {
      a, b
      c, d
    } := x
    ---
    const {
      a, b,
      c, d
    } = x
  """

  testCase """
    object destructuring reorder non-end rest property
    ---
    {a, ...b, c} = d
    ---
    ({a, c, ...b} = d)
  """

  testCase """
    @prop destructuring
    ---
    {@a, b} = c
    ---
    ({a: this.a, b} = c)
  """

  testCase """
    const assignment shorthand
    ---
    a := b
    {a, b} := c
    ---
    const a = b;
    const {a, b} = c
  """

  testCase """
    let assignment shorthand
    ---
    a .= b
    {a, b} .= c
    ---
    let a = b;
    let {a, b} = c
  """

  testCase """
    const assignment nested object with implied braces
    ---
    a :=
      b: c
      d: e
    ---
    const a = {
      b: c,
      d: e,
    }
  """

  testCase """
    empty non-end rest element
    ---
    [a, ..., b] = d
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    [a, ...ref] = d, [b] = splice.call(ref, -1)
  """

  testCase """
    nested non-end rest element
    ---
    { x, y: [b, ...c, d] } = e
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    ({ x, y: [b, ...c] } = e), [d] = splice.call(c, -1)
  """

  testCase """
    nested @binding
    ---
    { x, y: [b, ...@c, d] } = e
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    ({ x, y: [b, ...c] } = e), [d] = splice.call(c, -1), this.c = c
  """

  testCase """
    const assignment non-end rest property
    ---
    {a, ...b, c} := d
    ---
    const {a, c, ...b} = d
  """

  testCase """
    const assignment non-end rest element
    ---
    [a, ...b, c] := d
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    const [a, ...b] = d, [c] = splice.call(b, -1)
  """

  testCase """
    const assignment with non-end rest element and @ binding
    ---
    [@a, ...b, c] := d
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    const [a, ...b] = d, [c] = splice.call(b, -1);this.a = a
  """

  testCase """
    const assignment with non-end rest element and pre and post @ bindings
    ---
    [@a, ...b, @c] := d
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    const [a, ...b] = d, [c] = splice.call(b, -1);this.a = a;this.c = c
  """

  testCase """
    const assignment non-end rest @ element
    ---
    [a, ...@b, c] := d
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    const [a, ...b] = d, [c] = splice.call(b, -1);this.b = b
  """

  testCase """
    const assignment non-end rest element nested rest property
    ---
    [a, ...b, {c, ...d, e}] := f
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    const [a, ...b] = f, [{c, e, ...d}] = splice.call(b, -1)
  """

  testCase """
    const assignment non-end rest element nested rest property nested rest element
    ---
    [a, ...b, {c, ...d, e: [x, y..., z]}] := f
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    const [a, ...b] = f, [{c, e: [x, ...y], ...d}] = splice.call(b, -1), [z] = splice.call(y, -1)
  """

  testCase """
    const assignment nested object with explicit braces
    ---
    a := {
      b: c
    }
    ---
    const a = {
      b: c
    }
  """

  testCase """
    assignment of object with object method
    ---
    x := {
      environment: 'node'
      retrieveFile(pathOrUrl: string)
        return 'wat'
    }
    ---
    const x = {
      environment: 'node',
      retrieveFile(pathOrUrl: string) {
        return 'wat'
      }
    }
  """

  describe.skip "TOMAYBE", ->
    testCase """
      multiple single line const assignments
      ---
      x := 1, y := 2
      ---
      const x = 1, y = 2
    """

  testCase """
    assign nested object
    ---
    const DefaultCompilerOptions =
      allowNonTsExtensions: true
      allowJs: true
      target: ts.ScriptTarget.Latest
      moduleResolution: ts.ModuleResolutionKind.NodeJs
      module: ts.ModuleKind.CommonJS
      allowSyntheticDefaultImports: true
      experimentalDecorators: true
    ---
    const DefaultCompilerOptions = {
      allowNonTsExtensions: true,
      allowJs: true,
      target: ts.ScriptTarget.Latest,
      moduleResolution: ts.ModuleResolutionKind.NodeJs,
      module: ts.ModuleKind.CommonJS,
      allowSyntheticDefaultImports: true,
      experimentalDecorators: true,
    }
  """

  testCase """
    all assignment operators
    ---
    a **= b
    a *= b
    a /= b
    a %= b
    a += b
    a -= b
    a <<= b
    a >>>= b
    a >>= b
    a &&= b
    a &= b
    a ^= b
    a ||= b
    a |= b
    a ??= b
    a ?= b
    a = b
    ---
    a **= b
    a *= b
    a /= b
    a %= b
    a += b
    a -= b
    a <<= b
    a >>>= b
    a >>= b
    a &&= b
    a &= b
    a ^= b
    a ||= b
    a |= b
    a ??= b
    a ??= b
    a = b
  """

  testCase """
    word assignment operators
    ---
    a and= b
    a or= b
    ---
    a &&= b
    a ||= b
  """

  testCase """
    xor assignment
    ---
    a xor= b
    a ^^= b
    ---
    var xor: (a: unknown, b: unknown) => boolean = (a, b) => a ? !b && a : b;
    a = xor(a, b)
    a = xor(a, b)
  """

  testCase """
    xnor assignment
    ---
    a xnor= b
    a !^= b
    a !^^= b
    ---
    var xnor: (a: unknown, b: unknown) => boolean = (a, b) => a ? b : !b || a;
    a = xnor(a, b)
    a = xnor(a, b)
    a = xnor(a, b)
  """

  // TOMAYBE: Static semantics https://262.ecma-international.org/#sec-static-semantics-assignmenttargettype
  testCase """
    illegal assignment with function call
    ---
    a() = b
    ---
    a() = b
  """

  describe "inner assignment operators", ->
    testCase """
      initialize and increment
      ---
      (x ?= 0) += 1
      ---
      (x ??= 0), x += 1
    """

    testCase """
      double initialize and increment
      ---
      (x ?= 0) += (y ?= 0) += 1
      ---
      (x ??= 0), (y ??= 0), x += y += 1
    """

    testCase """
      add and multiply
      ---
      (x += 1) *= 2
      ---
      (x += 1), x *= 2
    """

    testCase """
      parenthesized prefix ++ and multiply
      ---
      (++x) *= 2
      ---
      (++x), x *= 2
    """

    testCase """
      parenthesized suffix ++ and multiply
      ---
      (x++) *= 2
      ---
      x *= 2, (x++)
    """

    testCase """
      prefix ++ and multiply
      ---
      ++x *= 2
      ---
      ++x, x *= 2
    """

    testCase """
      suffix ++ and multiply
      ---
      x++ *= 2
      ---
      x *= 2, x++
    """

    testCase """
      initialize and prefix ++
      ---
      ++(x ?= 0)
      ---
      (x ??= 0), ++x
    """

    testCase """
      initialize and suffix ++
      ---
      (x ?= 0)++
      ---
      (x ??= 0), x++
    """

    testCase """
      double ++
      ---
      ++x++
      ---
      ++x, x++
    """

  describe "function assignment operator", ->
    testCase """
      space on both sides
      ---
      x.y min= z()
      ---
      x.y = min(x.y, z())
    """

    throws """
      need space on left
      ---
      {x}min= y
    """

    testCase """
      need space on right
      ---
      x min=y
      ---
      x(min=y)
    """

    testCase """
      can't start a line
      ---
      x
      min=y
      ---
      x
      min=y
    """

    throws """
      not form doesn't work
      ---
      x not min= y
    """
