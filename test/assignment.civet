{evalsTo, testCase, throws} from ./helper.civet

describe "assignment", ->
  testCase """
    assignment
    ---
    a = b
    ---
    a = b
  """

  testCase """
    mutation
    ---
    a += b
    a -= b
    ---
    a += b
    a -= b
  """

  testCase """
    increment/decrement
    ---
    a++
    ++a
    b--
    --b
    ---
    a++
    ++a
    b--
    --b
  """

  testCase """
    Unicode increment
    ---
    a⧺
    ⧺a
    ---
    a++
    ++a
  """

  testCase """
    Unicode decrement
    ---
    a—
    —a
    ---
    a--
    --a
  """

  testCase """
    allows newlines
    ---
    a =
    b
    ---
    a =
    b
  """

  testCase """
    array destructuring
    ---
    [a, b] = c
    ---
    [a, b] = c
  """

  testCase """
    array destructuring rest element
    ---
    [a, ...b] = c
    ---
    [a, ...b] = c
  """

  testCase """
    a = b == c
    ---
    a = b == c
    ---
    a = b == c
  """

  testCase """
    a = b === c
    ---
    a = b === c
    ---
    a = b === c
  """

  testCase """
    a = b is c
    ---
    a = b is c
    ---
    a = b === c
  """

  testCase """
    array destructuring with non-end rest element
    ---
    [a, ...b, c] = d
    ---
    [a, ...b] = d, [c] = b.splice(-1)
  """

  testCase """
    object destructuring
    ---
    {a, b} = c
    ---
    ({a, b} = c)
  """

  testCase """
    object destructuring rest property
    ---
    {a, b, ...c} = d
    ---
    ({a, b, ...c} = d)
  """

  throws """
    object destructuring with multiple rest properties
    ---
    {a, b, ...c, ...d} = e
    ---
    ParseErrors: Multiple rest properties in object pattern
  """

  testCase """
    destructuring nested object with multiple keys per line
    ---
    {
      a, b
      c, d
    } := x
    ---
    const {
      a, b,
      c, d
    } = x
  """

  testCase """
    object destructuring reorder non-end rest property
    ---
    {a, ...b, c} = d
    ---
    ({a, c, ...b} = d)
  """

  testCase """
    @prop destructuring
    ---
    {@a, b} = c
    ---
    ({a: this.a, b} = c)
  """

  testCase """
    const assignment shorthand
    ---
    a := b
    {c, d} := a
    ---
    const a = b
    const {c, d} = a
  """

  testCase """
    const assignment with postfix
    ---
    x := y*2 for y of [0..9]
    ---
    const x =(()=>{const results=[];for (let i = 0; i <= 9; ++i) { const y = i;results.push( y*2) }return results})()
  """

  testCase """
    let assignment shorthand
    ---
    a .= b
    {c, d} .= a
    ---
    let a = b
    let {c, d} = a
  """

  testCase """
    let assignment with postfix
    ---
    x .= y*2 for y of [0..9]
    ---
    let x =(()=>{const results=[];for (let i = 0; i <= 9; ++i) { const y = i;results.push( y*2) }return results})()
  """

  testCase """
    const assignment nested object with implied braces
    ---
    a :=
      b: c
      d: e
    ---
    const a = {
      b: c,
      d: e,
    }
  """

  testCase """
    empty non-end rest element
    ---
    [a, ..., b] = d
    ---
    [a, ...ref] = d, [b] = ref.splice(-1)
  """

  testCase """
    non-end rest element with post rest trailing comma
    ---
    [a, ..., b,] = d
    ---
    [a, ...ref] = d, [b,] = ref.splice(-2)
  """

  testCase """
    non-end rest element with post rest elisions
    ---
    [a, ..., b,,,] = d
    ---
    [a, ...ref] = d, [b,,,] = ref.splice(-4)
  """

  testCase """
    nested non-end rest element
    ---
    { x, y: [b, ...c, d] } = e
    ---
    ({ x, y: [b, ...c] } = e), [d] = c.splice(-1)
  """

  testCase """
    nested @binding
    ---
    { x, y: [b, ...@c, d] } = e
    ---
    ({ x, y: [b, ...c] } = e), [d] = c.splice(-1), this.c = c
  """

  testCase """
    const assignment non-end rest property
    ---
    {a, ...b, c} := d
    ---
    const {a, c, ...b} = d
  """

  testCase """
    const assignment non-end rest element
    ---
    [a, ...b, c] := d
    ---
    const [a, ...b] = d, [c] = b.splice(-1)
  """

  testCase """
    const assignment with non-end rest element and @ binding
    ---
    [@a, ...b, c] := d
    ---
    const [a, ...b] = d, [c] = b.splice(-1);this.a = a;
  """

  testCase """
    const assignment with non-end rest element and pre and post @ bindings
    ---
    [@a, ...b, @c] := d
    ---
    const [a, ...b] = d, [c] = b.splice(-1);this.a = a;this.c = c;
  """

  testCase """
    const assignment non-end rest @ element
    ---
    [a, ...@b, c] := d
    ---
    const [a, ...b] = d, [c] = b.splice(-1);this.b = b;
  """

  testCase """
    const assignment non-end rest element nested rest property
    ---
    [a, ...b, {c, ...d, e}] := f
    ---
    const [a, ...b] = f, [{c, e, ...d}] = b.splice(-1)
  """

  testCase """
    const assignment non-end rest element nested rest property nested rest element
    ---
    [a, ...b, {c, ...d, e: [x, y..., z]}] := f
    ---
    const [a, ...b] = f, [{c, e: [x, ...y], ...d}] = b.splice(-1), [z] = y.splice(-1)
  """

  testCase """
    const assignment nested object with explicit braces
    ---
    a := {
      b: c
    }
    ---
    const a = {
      b: c
    }
  """

  testCase """
    assignment of object with object method
    ---
    x := {
      environment: 'node'
      retrieveFile(pathOrUrl: string)
        return 'wat'
    }
    ---
    const x = {
      environment: 'node',
      retrieveFile(pathOrUrl: string) {
        return 'wat'
      }
    }
  """

  describe.skip "TOMAYBE", ->
    testCase """
      multiple single line const assignments
      ---
      x := 1, y := 2
      ---
      const x = 1, y = 2
    """

  testCase """
    assign nested object
    ---
    const DefaultCompilerOptions =
      allowNonTsExtensions: true
      allowJs: true
      target: ts.ScriptTarget.Latest
      moduleResolution: ts.ModuleResolutionKind.NodeJs
      module: ts.ModuleKind.CommonJS
      allowSyntheticDefaultImports: true
      experimentalDecorators: true
    ---
    const DefaultCompilerOptions = {
      allowNonTsExtensions: true,
      allowJs: true,
      target: ts.ScriptTarget.Latest,
      moduleResolution: ts.ModuleResolutionKind.NodeJs,
      module: ts.ModuleKind.CommonJS,
      allowSyntheticDefaultImports: true,
      experimentalDecorators: true,
    }
  """

  testCase """
    all assignment operators
    ---
    a **= b
    a *= b
    a /= b
    a %= b
    a += b
    a -= b
    a <<= b
    a >>>= b
    a >>= b
    a &&= b
    a &= b
    a ^= b
    a ||= b
    a |= b
    a ??= b
    a ?= b
    a = b
    ---
    a **= b
    a *= b
    a /= b
    a %= b
    a += b
    a -= b
    a <<= b
    a >>>= b
    a >>= b
    a &&= b
    a &= b
    a ^= b
    a ||= b
    a |= b
    a ??= b
    a ??= b
    a = b
  """

  testCase """
    word assignment operators
    ---
    a and= b
    a or= b
    ---
    a &&= b
    a ||= b
  """

  testCase """
    xor assignment
    ---
    a xor= b
    a ^^= b
    ---
    type Falsy = false | 0 | '' | 0n | null | undefined;
    var xor: <A, B>(a: A, b: B) => A extends Falsy ? B : B extends Falsy ? A : (false | (A & Falsy extends never ? never : B) | (B & Falsy extends never ? never : A)) = (a, b) => (a ? !b && a : b) as any;
    a = xor(a, b)
    a = xor(a, b)
  """

  testCase """
    xnor assignment
    ---
    a xnor= b
    a !^= b
    a !^^= b
    ---
    type Falsy = false | 0 | '' | 0n | null | undefined;
    var xnor: <A, B>(a: A, b: B) => A & Falsy extends never ? B : (true | (B extends Falsy ? never : A) | (A extends Falsy ? never : B)) = (a, b) => (a ? b : !b || a) as any;
    a = xnor(a, b)
    a = xnor(a, b)
    a = xnor(a, b)
  """

  // TOMAYBE: Static semantics https://262.ecma-international.org/#sec-static-semantics-assignmenttargettype
  testCase """
    illegal assignment with function call
    ---
    a() = b
    ---
    a() = b
  """, wrapper: ''

  describe "inner assignment operators", ->
    testCase """
      initialize and increment
      ---
      (x ?= 0) += 1
      ---
      ((x ??= 0), x += 1)
    """

    testCase """
      double initialize and increment
      ---
      (x ?= 0) += (y ?= 0) += 1
      ---
      ((x ??= 0), ((y ??= 0), x += y += 1))
    """

    testCase """
      add and multiply
      ---
      (x += 1) *= 2
      ---
      ((x += 1), x *= 2)
    """

    testCase """
      parenthesized prefix ++ and multiply
      ---
      (++x) *= 2
      ---
      ((++x), x *= 2)
    """

    testCase """
      parenthesized suffix ++ and multiply
      ---
      (x++) *= 2
      ---
      (x *= 2, (x++))
    """

    testCase """
      prefix ++ and multiply
      ---
      ++x *= 2
      ---
      (++x, x *= 2)
    """

    testCase """
      suffix ++ and multiply
      ---
      x++ *= 2
      ---
      (x *= 2, x++)
    """

    testCase """
      initialize and prefix ++
      ---
      ++(x ?= 0)
      ---
      ((x ??= 0), ++x)
    """

    testCase """
      initialize and suffix ++
      ---
      (x ?= 0)++
      ---
      ((x ??= 0), x++)
    """

    testCase """
      double ++
      ---
      ++x++
      ---
      (++x, x++)
    """

    testCase """
      complex example
      ---
      (counts[match[1]] ??= 0) max= parseInt match[2], 10
      ---
      ((counts[match[1]] ??= 0), counts[match[1]] = max(counts[match[1]], parseInt(match[2], 10)))
    """

    testCase """
      inside function application
      ---
      f ++x *= 3
      ---
      f((++x, x *= 3))
    """

  describe "function assignment operator", ->
    testCase """
      space on both sides
      ---
      x.y min= z()
      ---
      x.y = min(x.y, z())
    """

    testCase """
      without space on left
      ---
      (x)min= y
      ---
      (x)= min((x), y)
    """

    testCase """
      need space on right
      ---
      x min=y
      ---
      x(min=y)
    """

    testCase """
      can't start a line
      ---
      x
      min=y
      ---
      x
      min=y
    """

    testCase """
      not form is treated as late assignment
      ---
      x not min= y
      ---
      x(!(min= y))
    """

  describe "++=", ->
    testCase """
      ++=
      ---
      x ++= y
      ---
      var concatAssign: <B, A extends {push: (this: A, b: B) => void} | (B extends unknown[] ? {push: (this: A, ...b: B) => void} : never)>(lhs: A, rhs: B) => A = (lhs, rhs) => (((rhs as any)?.[Symbol.isConcatSpreadable] ?? Array.isArray(rhs)) ? (lhs as any).push.apply(lhs, rhs as any) : (lhs as any).push(rhs), lhs);
      concatAssign(x, y)
    """

    it "++=", ->
      evalsTo """
        x := [1, 2]
        x ++= [3, 4]
        x ++= 5
        x ++=
          [Symbol.isConcatSpreadable]: true,
          0: 6
          1: 7
          length: 2
        x ++=
          0: 8
          length: 1
        x
      """, [1, 2, 3, 4, 5, 6, 7, {0: 8, length: 1}]

  testCase """
    %% operator rhs
    ---
    index = (@index + 1) %% 8
    ---
    var modulo: (a: number, b: number) => number = (a, b) => (a % b + b) % b;
    index = modulo((this.index + 1), 8)
  """

  testCase """
    is in on rhs
    ---
    x = y is in z
    ---
    x = z.includes(y)
  """

  testCase """
    ?. on lhs
    ---
    x?.y = z
    ---
    x != null ? x.y = z : void 0
  """

  testCase """
    ?. complex exp on lhs
    ---
    x?.y?.z = a
    ---
    let ref;x != null && (ref = x.y) != null ? ref.z = a : void 0
  """

  testCase """
    ?. multiple assignments
    ---
    x?.y = a = b
    ---
    x != null ? x.y = a = b : void 0
  """

  testCase """
    ?. multiple assignments with ref
    ---
    x.y?.z = a.b?.c = d
    ---
    let ref;(ref = x.y) != null ? ref.z = (ref = a.b) != null ? ref.c = d : void 0 : void 0
  """

  testCase """
    optional call expression
    ---
    f?().x.y?.z = 1
    ---
    let ref;f != null && (ref = f().x.y) != null ? ref.z = 1 : void 0
  """

  testCase """
    optional index expression
    ---
    x.z?[y] = 1
    ---
    let ref;(ref = x.z) != null ? ref[y] = 1 : void 0
  """

  testCase """
    optional negative index
    ---
    x.-1?[y] = 1
    ---
    let ref;(ref = x[x.length-1]) != null ? ref[y] = 1 : void 0
  """
