{testCase} from ./helper.civet

describe "unary expression", ->
  testCase """
    delete
    ---
    delete x.y
    ---
    delete x.y
  """

  testCase """
    void
    ---
    void x
    ---
    void x
  """

  testCase """
    typeof
    ---
    typeof x
    ---
    typeof x
  """

  testCase """
    not
    ---
    not a
    ---
    !a
  """

  testCase """
    not with extra space
    ---
    not  a
    ---
    ! a
  """

  testCase """
    not without space
    ---
    not(a)
    ---
    !(a)
  """

  testCase """
    ! with existence
    ---
    !a?
    !!a?
    ---
    (a == null)
    !(a == null)
  """

  testCase """
    not with existence
    ---
    not a?
    not not a?
    ---
    (a == null)
    !(a == null)
  """

  testCase """
    existence with binary op
    ---
    x? + y?
    ---
    (x != null) + (y != null)
  """

  testCase """
    late assignment
    ---
    !x = 1
    ---
    !(x = 1)
  """

  testCase """
    expressionized statement
    ---
    !debugger
    ---
    !(()=>{debugger})()
  """
