{testCase} from ./helper.civet

describe "do..while/until", ->
  testCase """
    basic
    ---
    do
      console.log(i++)
    while (i < 10)
    ---
    do {
      console.log(i++)
    }
    while (i < 10)
  """

  testCase """
    optional parens
    ---
    do
      console.log(i++)
    while i < 10
    ---
    do {
      console.log(i++)
    }
    while (i < 10)
  """

  testCase """
    empty
    ---
    do
    while i++ < 10
    ---
    do {}
    while (i++ < 10)
  """

  testCase """
    until
    ---
    do
      console.log(i++)
    until (i > 10)
    ---
    do {
      console.log(i++)
    }
    while (!(i > 10))
  """

  testCase """
    empty until
    ---
    do
    until i++ < 10
    ---
    do {}
    while (!(i++ < 10))
  """

  testCase """
    single line
    ---
    do console.log(i++) while i < 10
    ---
    do { console.log(i++) } while (i < 10)
  """

  testCase """
    generator
    ---
    do* i++ while i < 10
    ---
    do { yield i++ } while (i < 10)
  """, wrapper: """
    function* wrapper() {
      CODE
    }
  """

describe "do", ->
  testCase """
    basic
    ---
    x := 1
    do
      y := x * x
      console.log y * y
    ---
    const x = 1
    {
      const y = x * x
      console.log(y * y)
    }
  """

  testCase """
    basic braced
    ---
    x := 1
    do {
      y := x * x
      console.log y * y
    }
    ---
    const x = 1
    {
      const y = x * x
      console.log(y * y)
    }
  """

  testCase """
    empty
    ---
    do
    ---
    {}
  """

  testCase """
    empty assigned
    ---
    x = do
    ---
    let ref;{ref = void 0;};x = ref
  """

  testCase """
    braces in a single line
    ---
    do { x } = y
    do { x } := y
    ---
    { ({ x } = y) }
    { const { x } = y }
  """

  testCase """
    expression
    ---
    x := 1
    z := do
      y := x * x
      y * y
    ---
    const x = 1
    let ref;{
      const y = x * x
      ref = y * y
    };const z =ref
  """

  testCase """
    explicitly returned
    ---
    function f(x)
      x = x * x
      return do
        y := x * x
        y * y
    ---
    function f(x) {
      x = x * x
      return (()=>{{
        const y = x * x
        return y * y
      }})()
    }
  """

  testCase """
    implicitly returned
    ---
    function f(x)
      x = x * x
      do
        y := x * x
        y * y
    ---
    function f(x) {
      x = x * x
      {
        const y = x * x
        return y * y
      }
    }
  """

  testCase """
    pushed
    ---
    list :=
      for x of items
        do
          y := x * x
          y * y
    ---
    const results=[];for (const x of items) {
        {
          const y = x * x
          results.push(y * y)
        }
      };const list =results
  """

  testCase """
    auto async
    ---
    async function f(x)
      return do
        y := await x
        y * y
    ---
    async function f(x) {
      return (await (async ()=>{{
        const y = await x
        return y * y
      }})())
    }
  """

  testCase """
    async do one-line
    ---
    async do (await getList()).length
    ---
    (async ()=>{{ return (await getList()).length }})()
  """

  testCase """
    async do one-line declaration
    ---
    async do len := (await getList()).length
    ---
    (async ()=>{{ const len = (await getList()).length;return len }})()
  """

  testCase """
    async do
    ---
    async do
      (await getList()).length
    ---
    (async ()=>{{
      return (await getList()).length
    }})()
  """

  testCase """
    async do example
    ---
    await Promise.all(
      for item of array
        async do
          data = await op1(item)
          await op2(item, data)
    )
    ---
    await Promise.all(
      (()=>{const results=[];for (const item of array) {
        results.push((async ()=>{{
          data = await op1(item)
          return await op2(item, data)
        }})())
      }return results})()
    )
  """

  testCase """
    async do assignment
    ---
    promise := async do
      result := await fetch url
      await result.json()
    ---
    const promise = (async ()=>{{
      const result = await fetch(url)
      return await result.json()
    }})()
  """

  testCase """
    async do with trailing then
    ---
    async do
      result := await fetch url
      await result.json()
    .then (out) =>
      console.log out
    ---
    (async ()=>{{
      const result = await fetch(url)
      return await result.json()
    }})()
    .then((out) => {
      return console.log(out)
    })
  """

  testCase """
    yield
    ---
    f = (x) ->
      y = do
        yield x
    ---
    f = function*(x) {
      let ref;{
        ref = yield x
      };y = ref
    }
  """

  testCase """
    yield expression
    ---
    f = (x) ->
      y = 1 + do
        yield x
    ---
    f = function*(x) {
      y = 1 + (yield* (function*(){{
        yield x
      }})())
    }
  """

  testCase """
    await yield expression
    ---
    f = (x) ->
      y = 1 + do
        yield await x
    ---
    f = function*(x) {
      y = 1 + (yield* (async function*(){{
        yield await x
      }})())
    }
  """

  testCase """
    generator
    ---
    nums := do*
      yield 1
      yield 2
      yield 3
    ---
    const nums = (function*(){{
      yield 1
      yield 2
      yield 3
    }})()
  """
