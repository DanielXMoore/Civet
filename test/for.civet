{testCase, throws} from ./helper.civet

describe "for", ->
  testCase """
    basic
    ---
    for (var i = 0; i < 10; i++) console.log(i)
    ---
    for (var i = 0; i < 10; i++) console.log(i)
  """

  testCase """
    basic braced
    ---
    for (var i = 0; i < 10; i++) {
      console.log(i)
    }
    ---
    for (var i = 0; i < 10; i++) {
      console.log(i)
    }
  """

  testCase """
    of
    ---
    for (a of x) console.log(i)
    ---
    for (const a of x) console.log(i)
  """

  testCase """
    of braced
    ---
    for (a of x) {
      console.log(i)
    }
    ---
    for (const a of x) {
      console.log(i)
    }
  """

  testCase """
    optional parens
    ---
    for var i = 0; i < 10; i++
      console.log(i)
    ---
    for (var i = 0; i < 10; i++) {
      console.log(i)
    }
  """

  testCase """
    empty
    ---
    for (;;)
      console.log("hi")
    ---
    for (;;) {
      console.log("hi")
    }
  """

  testCase """
    empty no parens
    ---
    for ;;
      console.log("hi")
    ---
    for (;;) {
      console.log("hi")
    }
  """

  // TODO: This is dubious
  testCase """
    optional parens inline
    ---
    for var i = 0; i < 10; i++ console.log(i)
    ---
    for (var i = 0; i < 10; i++) console.log(i)
  """

  testCase """
    in
    ---
    for (var i in x) console.log(i)
    ---
    for (var i in x) console.log(i)
  """

  testCase """
    const of range one-line
    ---
    for (i of [1..10]) console.log(i)
    ---
    for (let i1 = 1; i1 <= 10; ++i1) { const i = i1; console.log(i)}
  """

  testCase """
    const of range
    ---
    for i of [1..10]
      console.log(i)
    ---
    for (let i1 = 1; i1 <= 10; ++i1) {
      const i = i1;
      console.log(i)
    }
  """

  testCase """
    var of range
    ---
    for var i of [1..10]
      console.log(i)
    ---
    for (let i1 = 1; i1 <= 10; ++i1) {
      var i = i1;
      console.log(i)
    }
  """

  testCase """
    let of range
    ---
    for let i of [1..10]
      console.log(i)
    ---
    for (let i1 = 1, i = i1; i1 <= 10; i = ++i1) {
      console.log(i)
    }
  """

  testCase """
    range without declaration
    ---
    for [1..10]
      console.log("hello")
    ---
    for (let i = 1; i <= 10; ++i) {
      console.log("hello")
    }
  """

  testCase """
    exclusive range without declaration
    ---
    for [1...10]
      console.log("hello")
    ---
    for (let i = 1; i < 10; ++i) {
      console.log("hello")
    }
  """

  testCase """
    spaced exclusive range without declaration
    ---
    for [1 ... 10]
      console.log("hello")
    ---
    for (let i = 1; i <  10; ++i) {
      console.log("hello")
    }
  """

  testCase """
    character range
    ---
    for letter of ['a'..'z']
      letter
    ---
    for (let i = 97; i <= 122; ++i) {
      const letter = String.fromCharCode(i);
      letter
    }
  """

  describe "", ->
    testCase """
      binding lefthandside
      ---
      for a.b of x
        console.log(a)
      ---
      for (a.b of x) {
        console.log(a)
      }
    """

  testCase """
    in optional parens
    ---
    for var i in x
      console.log(i)
    ---
    for (var i in x) {
      console.log(i)
    }
  """

  testCase """
    of
    ---
    for (var i of x) console.log(i)
    ---
    for (var i of x) console.log(i)
  """

  testCase """
    of optional parens
    ---
    for var i of x
      console.log(i)
    ---
    for (var i of x) {
      console.log(i)
    }
  """

  testCase """
    in implied declaration
    ---
    for i in x
      console.log(i)
    ---
    for (const i in x) {
      console.log(i)
    }
  """

  testCase """
    of implied declaration
    ---
    for i of x
      console.log(i)
    ---
    for (const i of x) {
      console.log(i)
    }
  """

  testCase """
    of implied declaration with binding pattern
    ---
    for [i, j] of x
      console.log(i)
    ---
    for (const [i, j] of x) {
      console.log(i)
    }
  """

  testCase """
    of optional parens await
    ---
    for await var i of x
      console.log(i)
    ---
    for await (var i of x) {
      console.log(i)
    }
  """

  testCase """
    of with two implicit declarations
    ---
    for item, index of array
      console.log `${index}. ${item}`
    ---
    let i = 0;for (const item of array) {
      const index = i++;
      console.log(`${index}. ${item}`)
    }
  """

  testCase """
    of with two explicit declarations
    ---
    for var item, let index of array
      console.log `${index}. ${item}`
    ---
    let i = 0;for (var item of array) {
      let index = i++;
      console.log(`${index}. ${item}`)
    }
  """

  testCase """
    in with two implicit declarations
    ---
    for key, value in array
      console.log `${key}: ${value}`
    ---
    for (const key in array) {
      const value = array[key];
      console.log(`${key}: ${value}`)
    }
  """

  testCase """
    in with two explicit declarations
    ---
    for var key, let value in object
      console.log `${key}: ${value}`
    ---
    for (var key in object) {
      let value = object[key];
      console.log(`${key}: ${value}`)
    }
  """

  testCase """
    in with pattern matching key and value
    ---
    for var [a, b], let [x, y] in object
      console.log `${a}, ${b}: ${x}, ${y}`
    ---
    for (const key in object) {
      var [a, b] = key;
      let [x, y] = object[key];
      console.log(`${a}, ${b}: ${x}, ${y}`)
    }
  """

  testCase """
    in with two explicit declarations and complex object
    ---
    for var key, let value in getObject()
      console.log `${key}: ${value}`
    ---
    let ref;for (var key in ref = getObject()) {
      let value = ref[key];
      console.log(`${key}: ${value}`)
    }
  """

  describe "each..of", ->
    testCase """
      each..of
      ---
      for each item of array
        console.log item
      ---
      for (let i = 0, len = array.length; i < len; i++) {
        const item = array[i];
        console.log(item)
      }
    """

    throws """
      foreach doesn't work
      ---
      foreach item of getArray()
        console.log item
    """

    testCase """
      each of with autolet
      ---
      "civet autoLet"
      for each e of array
        console.log e
      ---
      for (let i = 0, len = array.length; i < len; i++) {
        const e = array[i];
        console.log(e)
      }
    """

    testCase """
      each..of with complex expression
      ---
      for each item of getArray()
        console.log item
      ---
      for (let ref = getArray(), i = 0, len = ref.length; i < len; i++) {
        const item = ref[i];
        console.log(item)
      }
    """

    testCase """
      each..of with two implicit declarations
      ---
      for each item, index of getArray()
        console.log item
      ---
      for (let ref = getArray(), i = 0, len = ref.length; i < len; i++) {
        const index = i;
        const item = ref[i];
        console.log(item)
      }
    """

    testCase """
      each..of with two explicit declarations
      ---
      for each var item, let index of array
        console.log item
      ---
      for (let i = 0, len = array.length; i < len; i++) {
        let index = i;
        var item = array[i];
        console.log(item)
      }
    """

  describe "own..in", ->
    testCase """
      own..in
      ---
      for own key in object
        console.log key
      ---
      var hasProp: <T>(object: T, prop: PropertyKey) => boolean = ({}.constructor as any).hasOwn;
      for (const key in object) {
        if (!hasProp(object, key)) continue;
        console.log(key)
      }
    """

    testCase """
      own..in with complex expression
      ---
      for own key in getObject()
        console.log key
      ---
      var hasProp: <T>(object: T, prop: PropertyKey) => boolean = ({}.constructor as any).hasOwn;
      let ref;for (const key in ref = getObject()) {
        if (!hasProp(ref, key)) continue;
        console.log(key)
      }
    """

    testCase """
      own..in with two implicit declarations
      ---
      for own key, value in object
        console.log key, value
      ---
      var hasProp: <T>(object: T, prop: PropertyKey) => boolean = ({}.constructor as any).hasOwn;
      for (const key in object) {
        if (!hasProp(object, key)) continue;
        const value = object[key];
        console.log(key, value)
      }
    """

    testCase """
      own..in with two implicit declarations and complex expression
      ---
      for own key, value in getObject()
        console.log key, value
      ---
      var hasProp: <T>(object: T, prop: PropertyKey) => boolean = ({}.constructor as any).hasOwn;
      let ref;for (const key in ref = getObject()) {
        if (!hasProp(ref, key)) continue;
        const value = ref[key];
        console.log(key, value)
      }
    """

    testCase """
      own..in with two explicit declarations
      ---
      for own var key, let value in object
        console.log key, value
      ---
      var hasProp: <T>(object: T, prop: PropertyKey) => boolean = ({}.constructor as any).hasOwn;
      for (var key in object) {
        if (!hasProp(object, key)) continue;
        let value = object[key];
        console.log(key, value)
      }
    """

  testCase """
    postfix
    ---
    console.log(i) for let i = 0; i < 10; i++
    ---
    for (let i = 0; i < 10; i++) { console.log(i) }
  """

  testCase """
    postfix for in
    ---
    console.log(i) for i in x
    ---
    for (const i in x) { console.log(i) }
  """

  testCase """
    postfix for of
    ---
    console.log(i) for i of x
    ---
    for (const i of x) { console.log(i) }
  """

  testCase """
    postfix for of with unindented next line
    ---
    console.log(i) for i of x
    nextLine
    ---
    for (const i of x) { console.log(i) }
    nextLine
  """

  testCase """
    postfix for of with dedented next line
    ---
    for x of y
      console.log(i) for i of x
    nextLine
    ---
    for (const x of y) {
      for (const i of x) { console.log(i) }
    }
    nextLine
  """

  describe "expression", ->
    testCase """
      basic
      ---
      x = for (let i = 0; i < 10; i++)
        i
      ---
      const results=[];for (let i = 0; i < 10; i++) {
        results.push(i)
      };x = results
    """

    testCase """
      inline body
      ---
      x = for (let i = 0; i < 10; i++) i
      ---
      const results=[];for (let i = 0; i < 10; i++) results.push(i);x = results
    """

    testCase """
      assignment expression in last statement
      ---
      x := for i .= 0; i < x; i += 1
        i
      ---
      const results=[];for (let i = 0; i < x; i += 1) {
        results.push(i)
      };const x =results
    """

    testCase """
      with results in scope
      ---
      x = for (let i = 0; i < 10; i++)
        results.push(i)
      ---
      const results1=[];for (let i = 0; i < 10; i++) {
        results1.push(results.push(i))
      };x = results1
    """

    testCase """
      if then else
      ---
      check :=
        for i of [0..7]
          if true then 'yes' else 'no'
      ---
      const results=[];for (let i1 = 0; i1 <= 7; ++i1) {
          const i = i1;
          if (true) results.push('yes'); else results.push('no')
        };const check =results
    """

    testCase """
      pushing switch results
      ---
      x = for (let i = 0; i < 10; i++)
        switch i
          when 0 then 1
          when 1 then 2
          else 3; 4
      ---
      const results=[];for (let i = 0; i < 10; i++) {
        switch(i) {
          case 0: { results.push(1);break;
          }
          case 1: { results.push(2);break;
          }
          default: { 3; results.push(4) }
        }
      };x = results
    """

    testCase """
      async for
      ---
      async for x of y
        await x
      ---
      (async ()=>{const results=[];for (const x of y) {
        results.push(await x)
      }return results})()
    """

    testCase """
      trailing method calls
      ---
      sorted :=
        for item of list
          item.toString()
        .sort()
        .reverse()
      ---
      const sorted =
        (()=>{const results=[];for (const item of list) {
          results.push(item.toString())
        }return results})()
        .sort()
        .reverse()
    """

    testCase """
      trailing method calls after dedent
      ---
      sorted :=
        for item of list
          item.toString()
      .sort()
      .reverse()
      ---
      const sorted =
        (()=>{const results=[];for (const item of list) {
          results.push(item.toString())
        }return results})()
      .sort()
      .reverse()
    """

    testCase """
      of with two implicit declarations
      ---
      strings :=
        for item, index of array
          `${index}. ${item}`
      ---
      let i = 0;const results=[];for (const item of array) {
          const index = i++;
          results.push(`${index}. ${item}`)
        };const strings =results
    """

    testCase """
      of with two implicit declarations inside function with parens
      ---
      function f
        (for item, index of array
          `${index}. ${item}`
        )
      ---
      function f() {
        return (()=>{const results=[];let i = 0;for (const item of array) {
          const index = i++;
          results.push(`${index}. ${item}`)
        }return results})()
      }
    """
