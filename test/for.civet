{testCase} from ./helper.civet

describe "for", ->
  testCase """
    basic
    ---
    for (var i = 0; i < 10; i++) console.log(i)
    ---
    for (var i = 0; i < 10; i++) console.log(i)
  """

  testCase """
    basic braced
    ---
    for (var i = 0; i < 10; i++) {
      console.log(i)
    }
    ---
    for (var i = 0; i < 10; i++) {
      console.log(i)
    }
  """

  testCase """
    of
    ---
    for (a of x) console.log(i)
    ---
    for (const a of x) console.log(i)
  """

  testCase """
    of braced
    ---
    for (a of x) {
      console.log(i)
    }
    ---
    for (const a of x) {
      console.log(i)
    }
  """

  testCase """
    optional parens
    ---
    for var i = 0; i < 10; i++
      console.log(i)
    ---
    for (var i = 0; i < 10; i++) {
      console.log(i)
    }
  """

  testCase """
    empty
    ---
    for (;;)
      console.log("hi")
    ---
    for (;;) {
      console.log("hi")
    }
  """

  testCase """
    empty no parens
    ---
    for ;;
      console.log("hi")
    ---
    for (;;) {
      console.log("hi")
    }
  """

  // TODO: This is dubious
  testCase """
    optional parens inline
    ---
    for var i = 0; i < 10; i++ console.log(i)
    ---
    for (var i = 0; i < 10; i++) console.log(i)
  """

  testCase """
    in
    ---
    for (var i in x) console.log(i)
    ---
    for (var i in x) console.log(i)
  """

  testCase """
    const of range one-line
    ---
    for (i of [1..10]) console.log(i)
    ---
    for (let i1 = 1; i1 <= 10; ++i1) { const i = i1; console.log(i)}
  """

  testCase """
    const of range
    ---
    for i of [1..10]
      console.log(i)
    ---
    for (let i1 = 1; i1 <= 10; ++i1) {
      const i = i1;
      console.log(i)
    }
  """

  testCase """
    var of range
    ---
    for var i of [1..10]
      console.log(i)
    ---
    for (let i1 = 1; i1 <= 10; ++i1) {
      var i = i1;
      console.log(i)
    }
  """

  testCase """
    let of range
    ---
    for let i of [1..10]
      console.log(i)
    ---
    for (let i1 = 1, i = i1; i1 <= 10; i = ++i1) {
      console.log(i)
    }
  """

  testCase """
    range without declaration
    ---
    for [1..10]
      console.log("hello")
    ---
    for (let i = 1; i <= 10; ++i) {
      console.log("hello")
    }
  """

  describe "", ->
    testCase """
      binding lefthandside
      ---
      for a.b of x
        console.log(a)
      ---
      for (a.b of x) {
        console.log(a)
      }
    """

  testCase """
    in optional parens
    ---
    for var i in x
      console.log(i)
    ---
    for (var i in x) {
      console.log(i)
    }
  """

  testCase """
    of
    ---
    for (var i of x) console.log(i)
    ---
    for (var i of x) console.log(i)
  """

  testCase """
    of optional parens
    ---
    for var i of x
      console.log(i)
    ---
    for (var i of x) {
      console.log(i)
    }
  """

  testCase """
    in implied declaration
    ---
    for i in x
      console.log(i)
    ---
    for (const i in x) {
      console.log(i)
    }
  """

  testCase """
    of implied declaration
    ---
    for i of x
      console.log(i)
    ---
    for (const i of x) {
      console.log(i)
    }
  """

  testCase """
    of implied declaration with binding pattern
    ---
    for [i, j] of x
      console.log(i)
    ---
    for (const [i, j] of x) {
      console.log(i)
    }
  """

  testCase """
    of optional parens await
    ---
    for await var i of x
      console.log(i)
    ---
    for await (var i of x) {
      console.log(i)
    }
  """

  testCase """
    postfix
    ---
    console.log(i) for let i = 0; i < 10; i++
    ---
    for (let i = 0; i < 10; i++) { console.log(i) }
  """

  testCase """
    postfix for in
    ---
    console.log(i) for i in x
    ---
    for (const i in x) { console.log(i) }
  """

  testCase """
    postfix for of
    ---
    console.log(i) for i of x
    ---
    for (const i of x) { console.log(i) }
  """

  testCase """
    postfix for of with unindented next line
    ---
    console.log(i) for i of x
    nextLine
    ---
    for (const i of x) { console.log(i) }
    nextLine
  """

  testCase """
    postfix for of with dedented next line
    ---
    for x of y
      console.log(i) for i of x
    nextLine
    ---
    for (const x of y) {
      for (const i of x) { console.log(i) }
    }
    nextLine
  """

  describe "expression", ->
    testCase """
      basic
      ---
      x = for (let i = 0; i < 10; i++)
        i
      ---
      x = (()=>{const results=[];for (let i = 0; i < 10; i++) {
        results.push(i)
      }; return results})()
    """

    testCase """
      with results in scope
      ---
      x = for (let i = 0; i < 10; i++)
        results.push(i)
      ---
      x = (()=>{const results1=[];for (let i = 0; i < 10; i++) {
        results1.push(results.push(i))
      }; return results1})()
    """

    testCase """
      pushing switch results
      ---
      x = for (let i = 0; i < 10; i++)
        switch i
          when 0 then 1
          when 1 then 2
          else 3; 4
      ---
      x = (()=>{const results=[];for (let i = 0; i < 10; i++) {
        switch(i) {
          case 0: { results.push(1);break;
          }
          case 1: { results.push(2);break;
          }
          default: { 3; results.push(4) }
        }
      }; return results})()
    """

    testCase """
      async for
      ---
      async for x of y
        await x
      ---
      (async ()=>{const results=[];for (const x of y) {
        results.push(await x)
      }; return results})()
    """
