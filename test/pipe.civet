{ testCase, throws } from ./helper.civet

describe "pipe", ->
  testCase """
    pipe expression
    ---
    a |> fn
    ---
    fn(a)
  """

  testCase """
    chained pipe expression
    ---
    a |> foo |> bar
    ---
    bar(foo(a))
  """

  testCase """
    pipe expression with shorthand functions
    ---
    a |> & + 1 |> bar
    ---
    bar(a + 1)
  """

  testCase """
    pipe expression with async shorthand functions
    ---
    a |> & + await foo() |> bar
    ---
    bar(a + await foo())
  """

  testCase """
    pipe expression with right operator section
    ---
    a |> (+ 1) |> bar
    ---
    bar(a+ 1)
  """

  testCase """
    pipe expression with left operator section
    ---
    a |> (1+) |> bar
    ---
    bar(1+a)
  """

  testCase """
    nested pipelines
    ---
    (a |> & + 1) |> (b |> bar)
    ---
    (bar(b))((a + 1))
  """

  testCase """
    multi line trailing
    ---
    x + 1 |>
      & * 2 |>
      foo |>
      baz(1)
    ---
    baz(1)(foo((x + 1) * 2))
  """

  testCase """
    multi line trailing with comments
    ---
    x + 1 |> // Next step:
      & * 2 |> // Subsequent step:
      foo |> /* Last step: */
      baz(1)
    ---
    baz(1) /* Last step: */
      (foo // Subsequent step:
      ((x + 1) * 2 // Next step:
      ))
  """

  testCase """
    multi line leading
    ---
    x + 1
    |> & * 2
    |> foo
    |> baz(1)
    ---
    baz(1)(foo((x + 1) * 2))
  """

  testCase """
    multi line leading with comments
    ---
    x + 1
    |> & * 2 // Adds two
    |> foo // Processes through foo
    |> baz(1)
    ---
    baz // Processes through foo
    (1)(foo // Adds two
    ((x + 1) * 2))
    """

  testCase """
    multi line with assignment
    ---
    x = y
    |> z = w
    |> v
    ---
    x = v((z = w)(y))
  """

  testCase """
    await in pipeline
    ---
    x + 1
    |> performAsyncOp
    |> await
    |> foo
    ---
    foo(await performAsyncOp(x + 1))
  """

  testCase """
    yield in pipeline
    ---
    x + 1
    |> yield
    |> foo
    ---
    foo(yield x + 1)
  """, wrapper: """
    function* f() {
      CODE
    }
  """

  testCase """
    return in pipeline
    ---
    x + 1
    |> foo
    |> return
    ---
    return foo(x + 1)
  """

  testCase """
    return.value in pipeline
    ---
    function f(x)
      return := x
      x + 1
      |> foo
      |> return.value
    ---
    function f(x) {
      const ret = x;
      (ret)(foo(x + 1))
      return ret
    }
  """

  testCase """
    return pipeline expression
    ---
    return a |> fn
    ---
    return fn(a)
  """

  testCase """
    as T in pipeline
    ---
    fetch()
    |> as Response
    |> .json()
    |> as! MyRecord
    ---
    ((fetch() as Response).json()) as unknown as MyRecord
  """

  // TODO: reduce excess parens
  testCase """
    no nested pipelines in implicit arguments
    ---
    array |> .sort ((x, y) => x - y) |> .join ',' |> console.log
    ---
    console.log((array.sort(((x, y) => x - y))).join(','))
  """

  testCase """
    pipeline within thin arrow function
    ---
    -> import("../package.json") |> await |> .version
    ---
    (async function() { return (await import("../package.json")).version })
  """

  // This example doesn't need to be wrapped in braces, but thicc pipes do
  testCase """
    pipeline within fat arrow function
    ---
    => import("../package.json") |> await |> .version
    ---
    async () => { return (await import("../package.json")).version }
  """

  testCase """
    nested pipelines within nested arguments
    ---
    func |> .call @,
      arg1 |> op1 |> op2
      arg2 |> op3 |> op4
    ---
    func.call(this,
      op2(op1(arg1)),
      op4(op3(arg2)),)
  """

  testCase """
    as
    ---
    id
    |> (@ as any) as (id: ID) => string
    ---
    ((this as any) as (id: ID) => string)(id)
  """

  throws """
    pipe after return is error
    ---
    a |> b |> return |> c
  """

  testCase """
    automatic semicolon insertion before parenthesized pipe
    ---
    init()
    readFile()
    |> .content
    |> .value
    ---
    init();
    (readFile().content).value
  """

  testCase """
    pipe to new
    ---
    x |> new Foo
    x |> new Foo(x)
    ---
    new Foo(x)
    new Foo(x)(x)
  """

  testCase """
    pipe to await op
    ---
    x |> await.all
    ---
    await Promise.all(x)
  """

  testCase """
    // @ts-expect-error comment
    ---
    x; // c
    // @ts-expect-error
    foo ?=
      bar()
      ||> baz
      ||> qux
    ---
    x; // c
    // @ts-expect-error
    let ref;foo ??=(baz((ref = \n  bar())),qux(ref),ref)
  """

  describe "ampersand", ->
    testCase """
      ampersand pipes
      ---
      & |> f |> g
      ---
      $ => g(f($))
    """

    testCase """
      with chained implicit ampersand blocks
      ---
      doTheThing := & |> .map .myprop |> .map .toUpperCase()
      ---
      const doTheThing = $ => ($.map($1 => $1.myprop)).map($2 => $2.toUpperCase())
    """

    testCase """
      unwraps
      ---
      x |> (& |> f)
      ---
      f(x)
    """

    throws """
      ampersand must be at the beginning
      ---
      x |> & |> f
    """

    testCase """
      typed
      ---
      &: number |> (+ 1) |> &/2 |> Math.ceil
      ---
      ($: number) => Math.ceil(($+ 1)/2)
    """

  describe "thicc", ->
    testCase """
      basic
      ---
      x ||> f
      ---
      (f(x),x)
    """

    testCase """
      thick pipe first
      ---
      x ||> f |> g
      ---
      (f(x),g(x))
    """

    testCase """
      thick pipe second
      ---
      x
      |> f
      ||> g
      ---
      let ref;(g((ref = f(x))),ref)
    """

    testCase """
      return
      ---
      count |> &+1
      ||> (c) => console.log c
      |> return
      ---
      let ref;((c) => console.log(c))((ref = count+1));return ref
    """

    testCase """
      complex return
      ---
      fetch url |> await
      ||> ({status}) =>
            console.log `Fetched ${url} with ${status}`
      |> .json() |> await
      ||> (json) =>
            console.log `Parsed JSON ${json}`
      |> return
      ---
      let ref;(({status}) => {
            return console.log(`Fetched ${url} with ${status}`)
      })((ref = await fetch(url))),((json) => {
            return console.log(`Parsed JSON ${json}`)
      })((ref = await ref.json()));return ref
    """, wrapper: """
      async function f() {
        CODE
      }
    """

    testCase """
      two thick pipes
      ---
      x
      ||> f
      ||> g
      ---
      (f(x),g(x),x)
    """

    testCase """
      thick pipe in declaration
      ---
      x := y + 1 ||> console.log
      ---
      let ref;const x =( console.log((ref = y + 1)),ref)
    """

    testCase """
      array operations with explicit calls
      ---
      array ||> .push(3) ||> .shift() ||> .sort()
      ---
      (array.push(3),array.shift(),array.sort(),array)
    """

    testCase """
      array operations with implicit calls
      ---
      array ||> .push 3 ||> .shift() ||> .sort()
      ---
      (array.push(3),array.shift(),array.sort(),array)
    """

    testCase """
      wraps with parens
      ---
      pendingExecs.set id,
        pendingExecs.get(id) || [] ||> .push exec
      ---
      let ref;pendingExecs.set(id,
        ((ref = pendingExecs.get(id) || []).push(exec),ref),)
    """

    testCase """
      multi-line array operations with implicit calls
      ---
      array
      ||> .push 3
      ||> .shift()
      ||> .sort()
      ---
      (array.push(3),array.shift(),array.sort(),array)
    """

    testCase """
      multi-line with assignments
      ---
      document.createElement('div')
      ||> .className = 'civet'
      ||> .appendChild document.createTextNode 'Civet'
      ---
      let ref;((ref = document.createElement('div')).className = 'civet',ref.appendChild(document.createTextNode('Civet')),ref)
    """

    testCase """
      ref with implicit return
      ---
      ->
        x + 1 ||> a.add
      ---
      (function() {
        let ref;return (a.add((ref = x + 1)),ref)
      })
    """

    testCase """
      within fat arrow function
      ---
      => import("../package.json") |> await ||> .init()
      ---
      async () => { let ref;return ((ref = await import("../package.json")).init(),ref) }
    """

  describe "|>= assignment", ->
    testCase """
      accessignment
      ---
      document.title |>= &.toUpperCase()
      ---
      document.title = document.title.toUpperCase()
    """

    testCase """
      deep accessignment uses ref
      ---
      document.app.title |>= &.toUpperCase()
      ---
      let ref;ref = document.app,ref.title = ref.title.toUpperCase()
    """

    testCase """
      accessignment with ref
      ---
      f().b |>= foo
      ---
      let ref;ref = f(),ref.b = foo(ref.b)
    """

    // TODO: glob accessignment
    testCase.skip """
      accessignment with glob
      ---
      f().{x,y} |>= foo
      ---
      let ref;ref=f(),({x:ref.x,y:ref.y} = foo({x:ref.x,y:ref.y}))
    """

    testCase """
      slice accessignment
      ---
      array[0..1] |>= foo
      ---
      array.splice(0, 1 + 1 - 0, ...foo(array.slice(0, 1 + 1 || 1/0)))
    """

    testCase """
      assignment with many steps
      ---
      lhs |>= func1 |> func2 |> func3 |> func4
      ---
      lhs = func4(func3(func2(func1(lhs))))
    """

    throws """
      can't assign to function calls
      ---
      f() |>= foo
    """

    testCase """
      snug unary ops
      ---
      foo.bar |>= await?.baz()
      foo.bar |>= void?.baz()
      ---
      foo.bar = await foo.bar?.baz()
      foo.bar = void foo.bar?.baz()
    """

    testCase """
      snug unary ops with await op
      ---
      foo.bar |>= await.all?.baz()
      ---
      foo.bar = await Promise.all(foo.bar?.baz())
    """

    testCase """
      assign to index
      ---
      body.children[1] |>= .filter [, e] => !exps.includes e
      ---
      let ref;ref = body.children,ref[1] = ref[1].filter(([, e]) => !exps.includes(e))
    """

    testCase """
      assign to negative index
      ---
      body.children.-1 |>= .filter [, e] => !exps.includes e
      ---
      let ref;(ref = body.children)[ref.length-1] = (ref = body.children)[ref.length-1].filter(([, e]) => !exps.includes(e))
    """

  describe "assignment outside of first position", ->
    throws """
      pipe then assign
      ---
      a |> b |>= c
    """

    throws """
      multiple assigns
      ---
      a |>= b |>= c |>= d |>= e
    """

  testCase """
    inside StatementExpression
    ---
    fooResult := try
      foo() ||> bar
    ---
    let ref;let ref1;try {
      ref1 = (bar((ref = foo())),ref)
    } catch(e) {ref1 = void 0;};const fooResult =ref1
  """

  testCase.js """
    pipe to as in JS mode
    ---
    x |> as Foo
    ---
    x\u0020
  """
