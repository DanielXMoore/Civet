{ testCase, throws } from ./helper.civet

describe "pipe", ->
  testCase """
    pipe expression
    ---
    a |> fn
    ---
    fn(a)
  """

  testCase """
    chained pipe expression
    ---
    a |> foo |> bar
    ---
    bar(foo(a))
  """

  testCase """
    pipe expression with shorthand functions
    ---
    a |> & + 1 |> bar
    ---
    bar(($ => $ + 1)(a))
  """

  testCase """
    nested pipelines
    ---
    (a |> & + 1) |> (b |> bar)
    ---
    (bar(b))((($ => $ + 1)(a)))
  """

  testCase """
    multi line trailing
    ---
    x + 1 |>
      & * 2 |>
      foo |>
      baz(1)
    ---
    baz(1)(foo(($ => $ * 2)(x + 1)))
  """

  testCase """
    multi line trailing with comments
    ---
    x + 1 |> // Next step:
      & * 2 |> // Subsequent step:
      foo |> /* Last step: */
      baz(1)
    ---
    baz(1) /* Last step: */
      (foo // Subsequent step:
      (($ => $ * 2 // Next step:
      )(x + 1)))
  """

  testCase """
    multi line leading
    ---
    x + 1
    |> & * 2
    |> foo
    |> baz(1)
    ---
    baz(1)(foo(($ => $ * 2)(x + 1)))
  """

  testCase """
    multi line leading with comments
    ---
    x + 1
    |> & * 2 // Adds two
    |> foo // Processes through foo
    |> baz(1)
    ---
    baz // Processes through foo
    (1)(foo // Adds two
    (($ => $ * 2)(x + 1)))
    """

  testCase """
    await in pipeline
    ---
    x + 1
    |> performAsyncOp
    |> await
    |> foo
    ---
    foo(await performAsyncOp(x + 1))
  """

  testCase """
    yield in pipeline
    ---
    x + 1
    |> yield
    |> foo
    ---
    foo(yield x + 1)
  """

  testCase """
    return in pipeline
    ---
    x + 1
    |> foo
    |> return
    ---
    return foo(x + 1)
  """

  describe "thicc", ->
    testCase """
      basic
      ---
      x ||> f
      ---
      f(x),x
    """

    testCase """
      thick pipe first
      ---
      x ||> f |> g
      ---
      f(x),g(x)
    """

    // TODO: ref to avoid duplicate evaluation of f(x)
    // let ref
    // g(ref=f(x)),ref
    testCase """
      thick pipe second
      ---
      x
      |> f
      ||> g
      ---
      g(f(x)),f(x)
    """

    testCase """
      two thick pipes
      ---
      x
      ||> f
      ||> g
      ---
      f(x),g(x),x
    """

    // TODO: unwrap &.block
    testCase """
      accessignment
      ---
      document.title |>= &.toUpperCase()
      ---
      document.title = ($ => $.toUpperCase())(document.title)
    """

    // TODO: unwrap &.blocks
    testCase """
      thicc
      ---
      array ||> .push(3) ||> .shift() ||> .sort()
      ---
      ($ => $.push(3))(array),($1 => $1.shift())(array),($2 => $2.sort())(array),array
    """

    // TODO: arrows inside an implicit function call
    // aren't exactly intuitive
    testCase """
      thicc
      ---
      array ||> .push 3 ||> .shift() ||> .sort()
      ---
      ($ => $.push(($1 => $1.shift())(3),($2 => $2.sort())(3),3))(array),array
    """

    // TODO: Definitely should not go inside implicit call here
    testCase """
      thicc multi-line
      ---
      array
      ||> .push 3
      ||> .shift()
      ||> .sort()
      ---
      ($ => $.push(($1 => $1.shift())(3),($2 => $2.sort())(3),3))(array),array
    """

    testCase """
      pipe assignment
      ---
      lhs |>= func1 |> func2 |> func3 |> func4
      ---
      lhs = func4(func3(func2(func1(lhs))))
    """

  describe "assignment outside of first position", ->
    it "doesn't allow assignment outside of first position", ->
      throws """
        a |> b |>= c
      """

      throws """
        a |>= b |>= c |>= d |>= e
      """
