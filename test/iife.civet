{testCase} from ./helper.civet

describe "iife directive", ->
  testCase """
    implicit return
    ---
    "civet iife"
    x := 5
    x * x
    ---
    (()=>{const x = 5
    return x * x})()
  """

  testCase """
    loop
    ---
    "civet iife"
    i .= 5
    while i < 10
      i++
    ---
    (()=>{let i = 5
    const results=[];while (i < 10) {
      results.push(i++)
    };return results;})()
  """

  testCase """
    async
    ---
    "civet iife"
    fetch 'https://civet.dev'
    |> await
    |> .status
    |> console.log
    ---
    (async ()=>{return console.log((await fetch('https://civet.dev')).status)})()
  """

describe "repl directive", ->
  testCase """
    top-level declarations
    ---
    "civet repl"
    x := 5
    y := 10
    ---
    var x;var y;(()=>{x = 5
    y = 10;return y})()
  """

  testCase """
    inner declarations
    ---
    "civet repl"
    if true
      x := 5
    else
      y .= 10
    ---
    (()=>{if (true) {
      const x = 5;return x
    }
    else {
      let y = 10;return y
    }})()
  """

  testCase """
    inner var declarations
    ---
    "civet repl"
    if true
      var x = 5
    else
      var y = 10
    ---
    var x;var y;(()=>{if (true) {
       x = 5;return x
    }
    else {
       y = 10;return y
    }})()
  """

  testCase """
    var declarations in functions
    ---
    "civet repl"
    function f()
      var x = 5
    => var y = f()
    ---
    function f() {
      var x = 5;return x
    }(()=>{
    return () => { var y = f();return y }})()
  """

  testCase """
    top-level functions
    ---
    "civet repl"
    f()
    function f() console.log 'hi'
    ---
    function f() { return console.log('hi') }(()=>{f()
    ;return f})()
  """

  testCase """
    inner functions
    ---
    "civet repl"
    if true
      function f() console.log 'hi'
    else
      function f() console.log 'bye'
    f()
    ---
    var f;var f;(()=>{if (true) {
      f=function f() { return console.log('hi') }
    }
    else {
      f=function f() { return console.log('bye') }
    }
    return f()})()
  """

  testCase """
    top-level class
    ---
    "civet repl"
    class C
    new C
    ---
    var C;(()=>{C=class C {
    }
    return new C})()
  """

  testCase """
    returned top-level class
    ---
    "civet repl"
    class C
    ---
    var C;(()=>{return C=class C {
    }})()
  """

  testCase """
    inner classesj
    ---
    "civet repl"
    if true
      class C
        value = 'yes'
      new C
    else
      class C
        value = 'no'
      new C
    ---
    (()=>{if (true) {
      class C {
        value = 'yes'
      }
      return new C
    }
    else {
      class C {
        value = 'no'
      }
      return new C
    }})()
  """
