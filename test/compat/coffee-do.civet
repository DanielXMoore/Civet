{testCase} from ../helper.civet

describe "coffeeDo", ->
  testCase """
    it invokes
    ---
    "civet coffeeDo"
    do x
    ---
    (x)()
  """

  testCase """
    invoke inline function
    ---
    "civet coffeeDo"
    do ->
      x = 1
    ---
    (function() {
      return x = 1
    })()
  """

  // https://coffeescript.org/#try:do%20x%20%3D%20y
  testCase """
    binds lower than assignment
    ---
    "civet coffeeDo"
    do x = y
    ---
    (x = y)()
  """

  // https://coffeescript.org/#try:do%20x%20%2B%20y
  testCase """
    it binds tighter than binary ops
    ---
    "civet coffeeDo"
    do x + y
    ---
    (x)() + y
  """

  // https://coffeescript.org/#try:await%20do%20x
  testCase """
    unary ops before do
    ---
    "civet coffeeDo"
    await do x
    ---
    await (x)()
  """

  // https://coffeescript.org/#try:do%20(x)%20-%3E%0A%20%20setTimeout%20%3D%3E%20console.log%20x
  testCase """
    argument
    ---
    "civet coffeeDo"
    do (x) ->
      setTimeout => console.log x
    ---
    (function(x) {
      return setTimeout(() => console.log(x))
    })(x)
  """

  testCase """
    arguments
    ---
    "civet coffeeDo"
    do (x, y) ->
      setTimeout => console.log x, y
    ---
    (function(x, y) {
      return setTimeout(() => console.log(x, y))
    })(x, y)
  """

  // https://coffeescript.org/#try:do%20(x%20%3D%20f())%20-%3E%0A%20%20setTimeout%20%3D%3E%20console.log%20x
  testCase """
    assigned argument
    ---
    "civet coffeeDo"
    do (x = f()) ->
      setTimeout => console.log x
    ---
    (function(x) {
      return setTimeout(() => console.log(x))
    })( f())
  """

  testCase """
    assigned arguments
    ---
    "civet coffeeDo"
    do (x, y = f(), z = 10, w) ->
      setTimeout => console.log x, y, z, w
    ---
    (function(x, y, z, w) {
      return setTimeout(() => console.log(x, y, z, w))
    })(x, f(), 10, w)
  """

  testCase """
    typed arguments
    ---
    "civet coffeeDo"
    do (x: number, y: string) ->
      setTimeout => console.log x, y
    ---
    (function(x: number, y: string) {
      return setTimeout(() => console.log(x, y))
    })(x, y)
  """

  testCase """
    fat arrow
    ---
    "civet coffeeDo"
    do (x, y = f(), z = 10, w) =>
      setTimeout => console.log x, y, z, w
    ---
    ((x, y, z, w) => {
      return setTimeout(() => console.log(x, y, z, w))
    })(x, f(), 10, w)
  """
