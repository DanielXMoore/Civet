{ testCase } from "../helper.civet"

describe "coffeeRange", ->
  testCase """
    [0..10]
    ---
    "civet coffeeRange"
    [0..10]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  """

  testCase """
    [0...10]
    ---
    "civet coffeeRange"
    [0...10]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
  """

  testCase """
    [0..-10]
    ---
    "civet coffeeRange"
    [0..-10]
    ---
    [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]
  """

  testCase """
    [0...256]
    ---
    "civet coffeeRange"
    [0...256]
    ---
    ((s, e) => {let step = e > s ? 1 : -1; return Array.from({length: Math.abs(e - s)}, (_, i) => s + i * step)})(0,256)
  """

  testCase """
    [0..255]
    ---
    "civet coffeeRange"
    [0..255]
    ---
    ((s, e) => {let step = e > s ? 1 : -1; return Array.from({length: Math.abs(e - s) + 1}, (_, i) => s + i * step)})(0,255)
  """

  testCase """
    hex
    ---
    [0..0xa]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  """

  testCase """
    negative hex
    ---
    "civet coffeeRange"
    [0..-0xa]
    ---
    [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]
  """

  testCase """
    [x - 5 .. x + 5]
    ---
    "civet coffeeRange"
    [x - 5 .. x + 5]
    ---
    ((s, e) => {let step = e > s ? 1 : -1; return Array.from({length: Math.abs(e - s) + 1}, (_, i) => s + i * step)})(x - 5 , x + 5)
  """

  testCase """
    ['a' .. 'f']
    ---
    "civet coffeeRange"
    ['a' .. 'f']
    ---
    ["a", "b", "c", "d", "e", "f"]
  """

  testCase """
    ["f" .. "a"]
    ---
    "civet coffeeRange"
    ["f" .. "a"]
    ---
    ["f", "e", "d", "c", "b", "a"]
  """

  testCase """
    ["Z".."A"]
    ---
    "civet coffeeRange"
    ["Z".."A"]
    ---
    ["Z", "Y", "X", "W", "V", "U", "T", "S", "R", "Q", "P", "O", "N", "M", "L", "K", "J", "I", "H", "G", "F", "E", "D", "C", "B", "A"]
  """

  testCase """
    ..< with numbers
    ---
    "civet coffeeRange"
    [0..<10]
    [10..<0]
    ---
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    []
  """

  testCase """
    ..< with strings
    ---
    "civet coffeeRange"
    ['a'..<'g']
    ['g'..<'a']
    ---
    ["a", "b", "c", "d", "e", "f"];
    []
  """

  testCase """
    ..< with variables
    ---
    "civet coffeeRange"
    [a..<b]
    ---
    var range: (start: number, end: number) => number[] = (start, end) => {
      const length = end - start;
      if (length <= 0) return [];
      const arr = Array(length);
      for (let i = 0; i < length; ++i) {
        arr[i] = i + start;
      }
      return arr;
    };
    range(a,b)
  """
