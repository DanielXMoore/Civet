{testCase} from ../helper.civet

describe "coffeeOf", ->
  testCase """
    in becomes indexOf
    ---
    "civet coffee-compat"
    a in b
    ---
    const indexOf: <T>(this: T[], searchElement: T) => boolean = [].indexOf as any
    indexOf.call(b, a) >= 0
  """

  testCase """
    it works with access
    ---
    "civet coffeeCompat"
    s.type in coffeetypes
    ---
    const indexOf: <T>(this: T[], searchElement: T) => boolean = [].indexOf as any
    indexOf.call(coffeetypes, s.type) >= 0
  """

  testCase """
    not in
    ---
    "civet coffee-compat"
    a not in b
    ---
    const indexOf: <T>(this: T[], searchElement: T) => boolean = [].indexOf as any
    indexOf.call(b, a) < 0
  """

  testCase """
    indexOf doesn't collide with other refs
    ---
    "civet coffee-compat"
    import {indexOf} from 'lodash'
    a in b
    ---
    const indexOf1: <T>(this: T[], searchElement: T) => boolean = [].indexOf as any
    import {indexOf} from 'lodash'
    indexOf1.call(b, a) >= 0
  """

  testCase """
    indexOf precedence
    ---
    "civet coffee-compat"
    a in b or c
    ---
    const indexOf: <T>(this: T[], searchElement: T) => boolean = [].indexOf as any
    indexOf.call(b, a) >= 0 || c
  """

  testCase """
    indexOf chained comparisons
    ---
    "civet coffee-compat"
    a in b in d
    ---
    const indexOf: <T>(this: T[], searchElement: T) => boolean = [].indexOf as any
    indexOf.call(b, a) >= 0 && indexOf.call(d, b) >= 0
  """

  testCase """
    indexOf with auto var dec
    ---
    "civet coffee-compat"
    a = 3
    a in b
    ---
    var a
    const indexOf: <T>(this: T[], searchElement: T) => boolean = [].indexOf as any
    a = 3
    indexOf.call(b, a) >= 0
  """

  testCase """
    a of b
    ---
    "civet coffee-compat"
    a of b
    ---
    a in b
  """

  testCase """
    a not of b
    ---
    "civet coffee-compat"
    a not of b
    ---
    !(a in b)
  """

  testCase """
    converts is not to === !
    ---
    "civet coffee-compat"
    a is not b
    ---
    a === !b
  """
