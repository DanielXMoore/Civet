{testCase} from ../helper.civet

describe "coffeeForLoops", ->
  testCase """
    for in
    ---
    "civet coffee-compat"
    for a in b
      a.i
    ---
    var a
    for (let i = 0, len = b.length; i < len; i++) {
      a = b[i]
      a.i
    }
  """

  testCase """
    for in i in scope
    ---
    "civet coffee-compat"
    for a in b
      a[i]++
    ---
    var a
    for (let i1 = 0, len = b.length; i1 < len; i1++) {
      a = b[i1]
      a[i]++
    }
  """

  testCase """
    for in range fixed
    ---
    "civet coffee-compat"
    for a in [1..10]
      console.log a
    ---
    var a
    for (let i = a = 1, asc = 1 <= 10; asc ? i <= 10 : i >= 10; a = asc ? ++i : --i) {
      console.log(a)
    }
  """

  testCase """
    for in range variable end
    ---
    "civet coffee-compat"
    for a in [1..b]
      console.log a
    ---
    var a
    for (let i = a = 1, asc = 1 <= b; asc ? i <= b : i >= b; a = asc ? ++i : --i) {
      console.log(a)
    }
  """

  testCase """
    for in range start and end variable
    ---
    "civet coffee-compat"
    for a in [x...y]
      console.log a
    ---
    var a
    for (let i = a = x, asc = x <= y; asc ? i < y : i > y; a = asc ? ++i : --i) {
      console.log(a)
    }
  """

  testCase """
    for in in variable range with literal step
    ---
    "civet coffee-compat"
    for a in [x..y] by 2
      console.log a
    ---
    var a
    for (let i = a = x; 2 !== 0 && (2 > 0 ? i <= y : i >= y); a = i += 2) {
      console.log(a)
    }
  """

  testCase """
    for in range start and end variable with step
    ---
    "civet coffee-compat"
    for a in [x...y] by z
      console.log a
    ---
    var a
    for (let i = a = x, step = z; step !== 0 && (step > 0 ? i < y : i > y); a = i += step) {
      console.log(a)
    }
  """

  testCase """
    for in expression
    ---
    "civet coffee-compat"
    for a in b.x
      a.x
    ---
    var a
    for (let ref = b.x, i = 0, len = ref.length; i < len; i++) {
      a = ref[i]
      a.x
    }
  """

  testCase """
    postfix
    ---
    "civet coffeeCompat"
    coffees = (s for s in scripts when s.type in coffeetypes)
    ---
    var coffees, s
    const indexOf: <T>(this: T[], searchElement: T) => boolean = [].indexOf as any
    coffees = (()=>{const results=[];for (let i = 0, len = scripts.length; i < len; i++) {
      s = scripts[i]
      if (!(indexOf.call(coffeetypes, s.type) >= 0)) continue
      results.push(s)
    }; return results})()
  """

  testCase """
    for in, index
    ---
    "civet coffee-compat"
    for a, i in b
      a.x
    ---
    var a, i
    for (let i1 = 0, len = b.length; i1 < len; i1++) {
      a = b[i=i1]
      a.x
    }
  """

  testCase """
    for in postfix splat
    ---
    "civet coffee-compat"
    for x in [a...]
      x
    ---
    var x
    for (let ref = [...a], i = 0, len = ref.length; i < len; i++) {
      x = ref[i]
      x
    }
  """

  testCase """
    for in when
    ---
    "civet coffee-compat"
    for a in b when a > 0
      a.x
    ---
    var a
    for (let i = 0, len = b.length; i < len; i++) {
      a = b[i]
      if (!(a > 0)) continue
      a.x
    }
  """

  testCase """
    multiple for in
    ---
    "civet coffee-compat"
    for a in b
      a.x

    for c in d
      c.x
    ---
    var a, c
    for (let i = 0, len = b.length; i < len; i++) {
      a = b[i]
      a.x
    }

    for (let i = 0, len = d.length; i < len; i++) {
      c = d[i]
      c.x
    }
  """

  testCase """
    nested for in loop
    ---
    "civet coffee-compat"
    for a in b
      for c in d
        a.x
    ---
    var a, c
    for (let i1 = 0, len1 = b.length; i1 < len1; i1++) {
      a = b[i1]
      for (let i = 0, len = d.length; i < len; i++) {
        c = d[i]
        a.x
      }
    }
  """

  testCase """
    for of
    ---
    "civet coffee-compat"
    for a of b
      console.log a
    ---
    var a
    for (a in b) {
      console.log(a)
    }
  """

  testCase """
    for own of
    ---
    "civet coffee-compat"
    for own a of b
      console.log a
    ---
    var a
    const hasProp: <T>(this: T, prop: keyof T) => boolean = {}.hasOwnProperty as any
    for (a in b) {
      if (!hasProp.call(b, a)) continue
      console.log(a)
    }
  """

  testCase """
    for own of postfix
    ---
    "civet coffee-compat"
    log(a) for own a of b when a != "y"
    ---
    var a
    const hasProp: <T>(this: T, prop: keyof T) => boolean = {}.hasOwnProperty as any
    for (a in b) {
      if (!hasProp.call(b, a)) continue
      if (!(a !== "y")) continue
      log(a)
    }
  """

  testCase """
    for from
    ---
    "civet coffee-compat"
    for a from b
      console.log a
    ---
    var a
    for (a of b) {
      console.log(a)
    }
  """

  testCase """
    for from destructuring
    ---
    "civet coffee-compat"
    for {a, b} from c
      console.log a
    ---
    var a, b
    for ({a, b} of c) {
      console.log(a)
    }
  """
