{testCase} from ../helper.civet

describe "auto-var", ->
  testCase """
    multiple assignment
    ---
    "civet auto-var"
    a = b = c = d
    a = 2
    ---
    var a, b, c
    a = b = c = d
    a = 2
  """

  testCase """
    assignment to variable indexed array
    ---
    "civet auto-var"
    a[x] = 1
    ---
    a[x] = 1
  """

  testCase """
    with a declaration
    ---
    "civet auto-var"
    let b = 2
    a = 1
    b = a
    ---
    var a
    let b = 2
    a = 1
    b = a
  """

  testCase """
    with a var declaration
    ---
    "civet auto-var"
    var b = 2
    a = 1
    b = a
    ---
    var a
    var b = 2
    a = 1
    b = a
  """

  testCase """
    with a binding pattern
    ---
    "civet auto-var"
    let [a, b] = [1, 2]
    a = 3
    ---
    let [a, b] = [1, 2]
    a = 3
  """

  testCase """
    with import named binding
    ---
    "civet auto-var"
    import {a, b} from 'c'
    a = 1
    ---
    import {a, b} from 'c'
    a = 1
  """

  testCase """
    with default import
    ---
    "civet auto-var"
    import a from 'b'
    a = 1
    ---
    import a from 'b'
    a = 1
  """

  testCase """
    with default and named import
    ---
    "civet auto-var"
    import a, {b, c} from 'd'
    a = 1
    b = 2
    ---
    import a, {b, c} from 'd'
    a = 1
    b = 2
  """

  testCase """
    with an array destructuring assignment
    ---
    "civet auto-var"
    [a, b] = [1, 2]
    ---
    var a, b
    [a, b] = [1, 2]
  """

  testCase """
    with nested array destructuring assignment
    ---
    "civet auto-var"
    [
      a
      b
    ] = [1, 2]
    ---
    var a, b
    [
      a,
      b
    ] = [1, 2]
  """

  testCase """
    with an object destructuring assignment
    ---
    "civet auto-var"
    {a, b} = {a: 1, b: 2}
    ---
    var a, b
    ({a, b} = {a: 1, b: 2})
  """

  testCase """
    with nested object destructuring assignment
    ---
    "civet auto-var"
    {
      a
      b
    } = {a: 1, b: 2}
    ---
    var a, b
    ({
      a,
      b
    } = {a: 1, b: 2})
  """

  testCase """
    with destructuring assignment renaming
    ---
    "civet auto-var"
    {a: b, c: d} = {a: 1, c: 2}
    ---
    var b, d
    ({a: b, c: d} = {a: 1, c: 2})
  """

  testCase """
    with destructuring assignment nested renaming
    ---
    "civet auto-var"
    {
      a: {b: c}
      d: e
    } = {a: 1, c: 2}
    ---
    var c, e
    ({
      a: {b: c},
      d: e
    } = {a: 1, c: 2})
  """

  testCase """
    with destructuring assignment object in array in object
    ---
    "civet auto-var"
    {
      a: [b, {c}]
      d: e
    } = {a: 1, c: 2}
    ---
    var b, c, e
    ({
      a: [b, {c}],
      d: e
    } = {a: 1, c: 2})
  """

  testCase """
    for i loop
    ---
    "civet auto-var"
    for i = 0; i < 10; i++
      a = i
    ---
    var i, a
    for (i = 0; i < 10; i++) {
      a = i
    }
  """

  testCase """
    for in loop with let dec
    ---
    "civet auto-var"
    for let a in b
      a = c = 1
    ---
    var c
    for (let a in b) {
      a = c = 1
    }
  """

  testCase """
    for loop implied const
    ---
    "civet auto-var"
    for a in b
      a = c = 1
    ---
    var c
    for (const a in b) {
      a = c = 1
    }
  """

  testCase """
    chained assignment
    ---
    "civet auto-var"
    a = b = c = 1
    ---
    var a, b, c
    a = b = c = 1
  """

  testCase """
    chained assignment with a declaration
    ---
    "civet auto-var"
    let a = 1
    a = b = c = 1
    ---
    var b, c
    let a = 1
    a = b = c = 1
  """

  testCase """
    chained assignment with destructuring
    ---
    "civet auto-var"
    {a, b} = c = d
    ---
    var a, b, c
    ({a, b} = c = d)
  """

  testCase """
    chained assignment with destructuring in other order
    ---
    "civet auto-var"
    a = {b, c} = d
    ---
    var a, b, c
    a = ({b, c} = d)
  """

  testCase """
    chained assignment with destructuring and a declaration
    ---
    "civet auto-var"
    let a = 1
    {a, b} = c = d
    ---
    var b, c
    let a = 1;
    ({a, b} = c = d)
  """

  testCase """
    multiple chained destructuring assignments
    ---
    "civet auto-var"
    {a, b} = {c, d} = x
    ---
    var a, b, c, d
    ({a, b} = {c, d} = x)
  """

  testCase """
    nested function
    ---
    "civet auto-var"
    x = 1
    a = ->
      x = 2
      y = 1
      b = ->
        x = 3
        y = 2
        z = 1
    ---
    var x, a
    x = 1
    a = function() {
      var y, b
      x = 2
      y = 1
      return b = function() {
        var z
        x = 3
        y = 2
        return z = 1
      }
    }
  """

  testCase """
    sibling function declaration with nested block in first function
    ---
    "civet auto-var"
    function f
      if true
        i = 5
    function g
      i = 10
    ---
    function f() {
      var i
      if (true) {
        return i = 5
      }
      return
    }
    function g() {
      var i
      return i = 10
    }
  """

  testCase """
    function with parameters
    ---
    "civet auto-var"
    a = (b, c) ->
      x = 1
      c = 2
    ---
    var a
    a = function(b, c) {
      var x
      x = 1
      return c = 2
    }
  """

  testCase """
    nested blocks
    ---
    "civet auto-var"
    x = 1
    {
      x = 2
      y = 1
      {
        x = 3
        y = 2
        z = 1
      }
      {
        z = 2
      }
    }
    ---
    var x, y, z
    x = 1
    {
      x = 2
      y = 1
      {
        x = 3
        y = 2
        z = 1
      }
      {
        z = 2
      }
    }
  """

  testCase """
    export implicit var dec
    ---
    "civet auto-var"
    a = 1
    export a = 2
    ---
    a = 1
    export var a = 2
  """

  testCase """
    var dec inside block
    ---
    "civet auto-var"
    a = 1
    {
      var a = 2
    }
    ---
    var a
    a = 1
    {
      var a = 2
    }
  """
