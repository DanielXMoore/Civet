{testCase} from ../helper.civet

describe "coffeeClasses", ->
  testCase """
    colon function
    ---
    "civet coffeeClasses"
    exports.Lexer = class Lexer
      tokenize: (code, opts = {}) ->
        @literate = opts.literate
    ---
    exports.Lexer = class Lexer {
      tokenize(code, opts = {}) {
        return this.literate = opts.literate
      }
    }
  """

  testCase """
    colon fat arrow function
    ---
    "civet coffeeClasses"
    exports.Lexer = class Lexer
      tokenize: (code, opts = {}) =>
        @literate = opts.literate
      lit: => @literate
    ---
    exports.Lexer = class Lexer {
      tokenize(code, opts = {}) {
        return this.literate = opts.literate
      };
      lit() {return  this.literate}
    }
  """

  testCase """
    implicit async
    ---
    "civet coffeeClasses"
    class Foo
      bar: ->
        await x
    ---
    class Foo {
      async bar() {
        return await x
      }
    }
  """

  testCase """
    implicit generator
    ---
    "civet coffeeClasses"
    class Foo
      bar: ->
        yield x
    ---
    class Foo {
      *bar() {
        yield x
      }
    }
  """

  testCase """
    private static class fields
    ---
    "civet coffeeCompat"
    class API
      HTTP_GET = 'GET'
      HTTP_HEAD = 'HEAD'
      HTTP_VERBS = [HTTP_GET, HTTP_HEAD]
      callApi: ->
        console.log HTTP_VERBS[0]
    ---
    var API;
    API = (()=>{
      var HTTP_GET, HTTP_HEAD, HTTP_VERBS;
      HTTP_GET = 'GET'
      HTTP_HEAD = 'HEAD'
      HTTP_VERBS = [HTTP_GET, HTTP_HEAD]
      return class API {
      callApi() {
        return console.log(HTTP_VERBS[0]);
      }
    }})()
  """
