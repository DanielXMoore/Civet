{testCase} from ../helper.civet

describe "coffeeClasses", ->
  testCase """
    colon function
    ---
    "civet coffeeClasses"
    exports.Lexer = class Lexer
      tokenize: (code, opts = {}) ->
        @literate = opts.literate
    ---
    exports.Lexer = class Lexer {
      tokenize(code, opts = {}) {
        return this.literate = opts.literate
      }
    }
  """

  testCase """
    colon fat arrow function
    ---
    "civet coffeeClasses"
    exports.Lexer = class Lexer
      tokenize: (code, opts = {}) =>
        @literate = opts.literate
      lit: => @literate
    ---
    exports.Lexer = class Lexer {
      constructor(){
      this.tokenize = this.tokenize.bind(this);
      this.lit = this.lit.bind(this);}
      tokenize(code, opts = {}) {
        return this.literate = opts.literate
      }
      lit() {return  this.literate}
    }
  """

  testCase """
    colon fat arrow function with super constructor
    ---
    "civet coffeeClasses"
    class Foo extends Bar
      constructor: ->
        super()
        @count = 0
      inc: => @count++
      dec: => @count--
    ---
    class Foo extends Bar {
      constructor() {
        super()
      this.inc = this.inc.bind(this);
      this.dec = this.dec.bind(this);
        this.count = 0
      }
      inc() {return  this.count++}
      dec() {return  this.count--}
    }
  """

  testCase """
    implicit async
    ---
    "civet coffeeClasses"
    class Foo
      bar: ->
        await x
    ---
    class Foo {
      async bar() {
        return await x
      }
    }
  """

  testCase """
    implicit generator
    ---
    "civet coffeeClasses"
    class Foo
      bar: ->
        yield x
    ---
    class Foo {
      *bar() {
        yield x
      }
    }
  """

  testCase """
    private static class fields
    ---
    "civet coffeeCompat"
    class API
      HTTP_GET = 'GET'
      HTTP_HEAD = 'HEAD'
      HTTP_VERBS = [HTTP_GET, HTTP_HEAD]
      callApi: ->
        console.log HTTP_VERBS[0]
    ---
    var API;
    API = (()=>{
      var HTTP_GET, HTTP_HEAD, HTTP_VERBS;
      HTTP_GET = 'GET'
      HTTP_HEAD = 'HEAD'
      HTTP_VERBS = [HTTP_GET, HTTP_HEAD]
      return class API {
      callApi() {
        return console.log(HTTP_VERBS[0])
      }
    }})()
  """

  testCase """
    private static class functions
    ---
    "civet coffeeCompat"
    class MathOps
      ADD = (a, b) -> a + b
      increment: (value) ->
        console.log ADD(value, 1)
    ---
    var MathOps;
    MathOps = (()=>{
      var ADD;
      ADD = function(a, b) { return a + b }
      return class MathOps {
      increment(value) {
        return console.log(ADD(value, 1))
      }
    }})()
  """

  testCase """
    private static class fat-arrow functions
    ---
    "civet coffeeCompat"
    class MathOps
      ADD = (a, b) => a + b
      increment: (value) ->
        console.log ADD(value, 1)
    ---
    var MathOps;
    MathOps = (()=>{
      var ADD;
      ADD = (a, b) => a + b
      return class MathOps {
      increment(value) {
        return console.log(ADD(value, 1))
      }
    }})()
  """

  testCase """
    public static class function assignment
    ---
    "civet coffeeClasses"
    class MathOps
      @add = (a, b) -> a + b
    ---
    class MathOps {
      static add(a, b) { return a + b }
    }
  """

  testCase """
    public static class fat-arrow function assignment
    ---
    "civet coffeeClasses"
    class MathOps
      @add = (a, b) => a + b
    ---
    class MathOps {
      static add(a, b) {return  a + b}
    }
  """

  testCase """
    public static class field assignment
    ---
    "civet coffeeClasses"    
    class MathOps
      @PI = 3.14      
      circleArea: (radius) ->
        MathOps.PI * radius * radius
    ---
    class MathOps {
      static PI = 3.14      
      circleArea(radius) {
        return MathOps.PI * radius * radius
      }
    }
  """
