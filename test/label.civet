{testCase, throws, wrapper} from ./helper.civet

describe "labels", ->
  testCase """
    labeled assignment
    ---
    :foo a = 1
    ---
    foo: a = 1
  """

  testCase """
    labeled loop
    ---
    :foo loop
      i++
    ---
    foo: while(true) {
      i++
    }
  """

  testCase """
    labeled for loop
    ---
    :foo for item of items
      process item
    ---
    foo: for (const item of items) {
      process(item)
    }
  """

  describe "break/continue", ->
    wrapper """
      foo: while(true) {
        CODE
      }
    """

    testCase """
      labeled break
      ---
      break foo
      ---
      break foo
    """

    testCase """
      labeled break with colon
      ---
      break :foo
      ---
      break foo
    """

    testCase """
      labeled continue
      ---
      continue foo
      ---
      continue foo
    """

    testCase """
      labeled continue with colon
      ---
      continue :foo
      ---
      continue foo
    """

  testCase """
    labeled break example
    ---
    :outer loop
      :inner loop
        break outer
    ---
    outer: while(true) {
      inner: while(true) {
        break outer
      }
    }
  """

  testCase """
    label not type
    ---
    let foo
    :label a = 1
    ---
    let foo
    label: a = 1
  """

  testCase """
    label not else:
    ---
    switch foo
      else
        :label a = 1
    ---
    switch(foo) {
      default: {
        label: a = 1
      }
    }
  """

  testCase """
    reserved word label
    ---
    :and while x
      break :and
    ---
    and: while (x) {
      break and
    }
  """

  throws """
    reserved word label without colon
    ---
    :and while x
      break and
    ---
    ParseError
  """

  testCase """
    loop label
    ---
    :loop while x
      break :loop
    ---
    loop: while (x) {
      break loop
    }
  """

  describe "implicit labels via loop/for/while/until/do", ->
    testCase """
      break/continue loop
      ---
      loop
        for item of list
          if finished()
            break loop
          else
            continue loop
      ---
      _loop: while(true) {
        for (const item of list) {
          if (finished()) {
            break _loop
          }
          else {
            continue _loop
          }
        }
      }
    """

    testCase """
      nested break/continue loop
      ---
      loop
        continue loop if false
        loop
          loop
            break loop
          break loop
        break loop
      ---
      _loop: while(true) {
        if (false) { continue _loop }
        _loop1: while(true) {
          _loop2: while(true) {
            break _loop2
          }
          break _loop1
        }
        break _loop
      }
    """

    testCase """
      break for
      ---
      for x of y
        loop
          break for
      ---
      _for: for (const x of y) {
        while(true) {
          break _for
        }
      }
    """

    testCase """
      break while/until
      ---
      while cond1
        until cond2
          if cond3
            break while
          else
            break until
      ---
      _while: while (cond1) {
        _until: while (!cond2) {
          if (cond3) {
            break _while
          }
          else {
            break _until
          }
        }
      }
    """

    testCase """
      break do..while/until
      ---
      do
        do
          break do
        while cond1
        break do
      while cond2
      ---
      _do: do {
        _do1: do {
          break _do1
        }
        while (cond1)
        break _do
      }
      while (cond2)
    """

    throws """
      don't exit functions
      ---
      loop
        function f()
          break loop
      ---
      ParseErrors: unknown:3:11 No matching 'loop' iteration found above 'break loop'
    """

    throws """
      don't exit arrow functions
      ---
      loop
        =>
          continue loop
      ---
      ParseErrors: unknown:3:14 No matching 'loop' iteration found above 'continue loop'
    """

    throws """
      match
      ---
      loop
        while true
          break for
          continue until
          break do
      ---
      ParseErrors: unknown:3:11 No matching 'for' iteration found above 'break for'
      unknown:4:14 No matching 'until' iteration found above 'continue until'
      unknown:5:11 No matching 'do' iteration found above 'break do'
    """
