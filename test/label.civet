{testCase, throws, wrapper} from ./helper.civet

describe "labels", ->
  testCase """
    labeled assignment
    ---
    :foo a = 1
    ---
    foo: a = 1
  """

  testCase """
    labeled loop
    ---
    :foo loop
      i++
    ---
    foo: while(true) {
      i++
    }
  """

  testCase """
    labeled for loop
    ---
    :foo for item of items
      process item
    ---
    foo: for (const item of items) {
      process(item)
    }
  """

  describe "break/continue", ->
    wrapper """
      foo: while(true) {
        CODE
      }
    """

    testCase """
      labeled break
      ---
      break foo
      ---
      break foo
    """

    testCase """
      labeled break with colon
      ---
      break :foo
      ---
      break foo
    """

    testCase """
      labeled continue
      ---
      continue foo
      ---
      continue foo
    """

    testCase """
      labeled continue with colon
      ---
      continue :foo
      ---
      continue foo
    """

  testCase """
    labeled break example
    ---
    :outer loop
      :inner loop
        break outer
    ---
    outer: while(true) {
      inner: while(true) {
        break outer
      }
    }
  """

  testCase """
    label not type
    ---
    let foo
    :label a = 1
    ---
    let foo
    label: a = 1
  """

  testCase """
    label not else:
    ---
    switch foo
      else
        :label a = 1
    ---
    switch(foo) {
      default: {
        label: a = 1
      }
    }
  """

  testCase """
    reserved word label
    ---
    :and while x
      break :and
    ---
    and: while (x) {
      break and
    }
  """

  throws """
    reserved word label without colon
    ---
    :and while x
      break and
    ---
    ParseError
  """

  testCase """
    loop label
    ---
    :loop while x
      break loop
    ---
    loop: while (x) {
      break loop
    }
  """
