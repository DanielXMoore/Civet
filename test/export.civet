{testCase, throws} from ./helper.civet

describe "export", ->
  testCase """
    default
    ---
    export default x
    ---
    export default x
  """

  testCase """
    const
    ---
    export const x = 3
    ---
    export const x = 3
  """

  testCase """
    export default thin arrow function
    ---
    export default x:= ->
    ---
    const x= function() {};export default x
  """

  testCase """
    export default anonymous function
    ---
    export default function(){}
    ---
    export default (function(){})
  """

  testCase """
    export default anonymous thin arrow function
    ---
    export default ->
    ---
    export default function() {}
  """

  testCase """
    export default anonymous thick arrow function
    ---
    export default =>
    ---
    export default () => {}
  """

  describe "export default extensions", ->
    testCase """
      export default const
      ---
      export default const x = 5
      ---
      const x = 5;export default x
    """

    testCase """
      export default const shorthand
      ---
      export default x := 5
      ---
      const x = 5;export default x
    """

    testCase """
      export default let
      ---
      export default let x = 5
      ---
      let x = 5;export default x
    """

    testCase """
      export default let shorthand
      ---
      export default x .= 5
      ---
      let x = 5;export default x
    """

    testCase """
      export default var
      ---
      export default var x = 5
      ---
      var x = 5;export default x
    """

    throws """
      export default multi const
      ---
      export default const x = 5, y = 10
      ---
      ParseErrors: unknown:1:36 export default with 2 variable declaration (should be 1)
    """

  testCase """
    multiple export statements on one line
    ---
    export const x = 3; export const y = 4
    ---
    export const x = 3; export const y = 4
  """

  testCase """
    named
    ---
    export {}
    export {a}
    export {a,}
    export {a, b, c}
    ---
    export {}
    export {a}
    export {a,}
    export {a, b, c}
  """

  testCase """
    unbraced named
    ---
    export a
    export a,
      b,
      c
    export a, b, c
    ---
    export {a}
    export {a,
      b,
      c}
    export {a, b, c}
  """

  throws """
    unbraced named with trailing comma
    ---
    export a,
    ---
    ParseError
  """

  testCase """
    from
    ---
    export {a} from "./cool.js"
    export * from "./cool.js"
    ---
    export {a} from "./cool.js"
    export * from "./cool.js"
  """

  testCase """
    export x =
    ---
    export x = 3
    ---
    export var x = 3
  """

  testCase """
    export multiple implicit var decs
    ---
    export x = 3, y = 4
    ---
    export var x = 3, y = 4
  """

  testCase """
    implicit braces from
    ---
    export a, b, c from "./cool.js"
    ---
    export {a, b, c} from "./cool.js"
  """

  testCase """
    export name is from
    ---
    export from
    ---
    export {from}
  """

  testCase """
    export name from after comma
    ---
    export a, from
    ---
    export {a, from}
  """

  testCase """
    export name from after comma with from
    ---
    export a, from from y
    ---
    export {a, from} from "y"
  """

  testCase """
    from as
    ---
    export * as x from "./cool.js"
    ---
    export * as x from "./cool.js"
  """

  testCase """
    optional comma
    ---
    export {
      a
      b,
      c
      d }
    ---
    export {
      a,
      b,
      c,
      d }
  """

  testCase """
    optional comma as
    ---
    export {
      a as A
      b as B,
      c as C
      d as D}
    ---
    export {
      a as A,
      b as B,
      c as C,
      d as D}
  """

  testCase """
    braceless as
    ---
    export a as A, b as B, c as C, d as D
    ---
    export {a as A, b as B, c as C, d as D}
  """

  testCase """
    maintains comments and whitespace
    ---
    /**/ export /**/ { // cool
      a as /**/ A /**/ // ahoy
      /**/b as B, // ye
         /**/c as C // hey
      d as D /**/} // yo
    ---
    /**/ export /**/ { // cool
      a as /**/ A, /**/ // ahoy
      /**/b as B, // ye
         /**/c as C, // hey
      d as D /**/} // yo
  """

  testCase """
    export from with assertion
    ---
    export { s } from ./stuff.json with type: "json"
    ---
    export { s } from "./stuff.json" with {type: "json"}
  """

  describe "from ... export", ->
    testCase """
      top-level explicit from
      ---
      from "./module" export {x}
      from ./module export {y}
      from node:fs export { readFile }
      from ./module export * as module
      from ./module export a, b
      from ./module export type T1, T2
      from ./module export type { Type1, Type2 }
      from ./package.json with {type: "json"} export { version }
      ---
      export {x} from "./module"
      export {y} from "./module"
      export { readFile } from "node:fs"
      export * as module from "./module"
      export {a, b} from "./module"
      export type {T1, T2} from "./module"
      export type { Type1, Type2 } from "./module"
      export { version } from "./package.json" with {type: "json"}
    """

    testCase """
      top-level implicit from
      ---
      from "./module" export {x}
      from ./module export {y}
      from node:fs export { readFile }
      from ./module export * as module
      from ./module export a, b
      from ./module export type T1, T2
      from ./module export type { Type1, Type2 }
      from ./package.json with {type: "json"} export { version }
      ---
      export {x} from "./module"
      export {y} from "./module"
      export { readFile } from "node:fs"
      export * as module from "./module"
      export {a, b} from "./module"
      export type {T1, T2} from "./module"
      export type { Type1, Type2 } from "./module"
      export { version } from "./package.json" with {type: "json"}
    """
