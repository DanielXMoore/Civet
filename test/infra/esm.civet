{ load as tsLoad } from ts-node/esm

{ initialize, resolve, load } from ../../source/esm.civet
{ pathToFileURL } from url

assert from assert

describe "esm", =>
  it "should resolve", =>
    next := =>

    resolve("somefile.civet", {}, next)
    resolve("somefile.js", {}, next)

  it "should load config", =>
    initialize config: './test/infra/config/civetconfig.json'
    next := (_url: string, sourceEtc: {source: string}) => sourceEtc
    context :=
      format: "civet"
    sourcePath := "./test/infra/config/needs-coffee.civet"
    url := pathToFileURL(sourcePath).href

    result := await load url, context, next
    assert result, "compiled"
    assert result.source?.includes("?? div"), "compiled CoffeeScript"

  it "should load with ts-node", =>
    // Also test configuration via `initialize`
    initialize
      parseOptions: strict: true
      config: false

    // This sets up a hacky loader next vaguely like the one in node's esm loading
    next := (url: string, context: {source: string}) ->
      // This simulates Node.js loading the modified source returned from the previous context
      defaultLoad := async =>
        return {
          source: context.source
        }

      return await tsLoad url, context, defaultLoad

    context :=
      format: "civet"
    sourcePath := "./source/esm.civet"
    url := pathToFileURL(sourcePath).href

    result := await load url, context, next

    assert result

    // Avoid including the directive directly for proper testing
    strictPattern := '"use ' + 'strict"'
    assert result.source.includes(strictPattern), "initialize configuration"

    // console.log result.source
