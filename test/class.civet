{testCase} from ./helper.civet

describe "class", ->
  testCase """
    basic
    ---
    class X {}
    ---
    class X {}
  """

  testCase """
    member function
    ---
    class X {
      f() {
        return "hi"
      }
    }
    ---
    class X {
      f() {
        return "hi"
      }
    }
  """

  testCase """
    indented member function
    ---
    class X
      f()
        return "hi"
    ---
    class X {
      f() {
        return "hi"
      }
    }
  """

  testCase """
    private field
    ---
    class X {
      #p1 = 3
      #privateField
    }
    ---
    class X {
      #p1 = 3
      #privateField
    }
  """

  testCase """
    function field
    ---
    class X
      f: MyFuncType = -> return "hi"
    ---
    class X {
      f: MyFuncType = function() { return "hi" }
    }
  """

  testCase """
    method named get
    ---
    class Fetcher
      get(id: ID)
        @cache.get id
    ---
    class Fetcher {
      get(id: ID) {
        return this.cache.get(id)
      }
    }
  """

  testCase """
    get private method
    ---
    class X {
      get #x ()
        return "yo"
    }
    ---
    class X {
      get #x () {
        return "yo"
      }
    }
  """

  testCase """
    set private method
    ---
    class X {
      set #x (v)
        return
    }
    ---
    class X {
      set #x (v) {
        return
      }
    }
  """

  testCase """
    set private method with inline comments
    ---
    class X {
      set /**/ #x (v)
        return
    }
    ---
    class X {
      set /**/ #x (v) {
        return
      }
    }
  """

  testCase """
    static method shorthand
    ---
    class A
      @y()
        return 3
    ---
    class A {
      static y() {
        return 3
      }
    }
  """

  testCase """
    static get method shorthand
    ---
    class A
      @get y()
        return 3
    ---
    class A {
      static get y() {
        return 3
      }
    }
  """

  testCase """
    static block
    ---
    class X {
      static
        x = 1
    }
    ---
    class X {
      static {
        x = 1
      }
    }
  """

  testCase """
    static block shorthand
    ---
    class X
      @
        x = 1
    ---
    class X {
      static  {
        x = 1
      }
    }
  """

  testCase """
    static block with explicit braces
    ---
    class X
      @{
        x = 1
      }
    ---
    class X {
      static {
        x = 1
      }
    }
  """

  testCase """
    extends shorthand
    ---
    class A < B
      static
        x = 3
    ---
    class A extends B {
      static {
        x = 3
      }
    }
  """

  testCase """
    extends shorthand with whitespace and comments
    ---
    class A /*ye*/ <B
    ---
    class A /*ye*/ extends B {
    }
  """

  testCase """
    extends shorthand with whitespace and comments after <
    ---
    class A< /*ye*/ B
    ---
    class A extends /*ye*/ B {
    }
  """

  testCase """
    cramped extends shorthand
    ---
    class A<B
    ---
    class A extends B {
    }
  """

  testCase """
    extends shorthand with type params
    ---
    class A < B<T>
    ---
    class A extends B<T> {
    }
  """

  testCase """
    extends with braces
    ---
    class A extends B {
      static
        x = 3
    }
    ---
    class A extends B {
      static {
        x = 3
      }
    }
  """

  testCase """
    extends doesn't call with member type declarations
    ---
    class A extends B
      x: number
    ---
    class A extends B {
      x: number
    }
  """

  testCase """
    extends with if expression
    ---
    class A extends if x then B else C
      x: number
    ---
    class A extends ((x)? B : C) {
      x: number
    }
  """

  testCase """
    with type params
    ---
    class Foo<T> {}
    ---
    class Foo<T> {}
  """

  testCase """
    with multiple type params
    ---
    class Foo<T1, T2> {}
    ---
    class Foo<T1, T2> {}
  """

  testCase """
    with multiple type params on separate lines
    ---
    class Foo<
      T1,
      T2
    > {}
    ---
    class Foo<
      T1,
      T2
    > {}
  """

  testCase """
    with newline delimited type params
    ---
    class Foo<
      T1
      T2
    > {}
    ---
    class Foo<
      T1,
      T2
    > {}
  """

  testCase """
    with initialized type params
    ---
    class D<T = any> {}
    ---
    class D<T = any> {}
  """

  testCase """
    with extends and initialized type params
    ---
    class D<T extends object = {}> {}
    ---
    class D<T extends object = {}> {}
  """

  testCase """
    extends parent with type params
    ---
    class A extends B<T>
      foo()
        "foo"
    ---
    class A extends B<T> {
      foo() {
        return "foo"
      }
    }
  """

  testCase """
    constrained type params
    ---
    class A extends B<T extends { id: string }>
      foo()
        "foo"
    ---
    class A extends B<T extends { id: string }> {
      foo() {
        return "foo"
      }
    }
  """

  testCase """
    implements interface
    ---
    class A implements B
      foo = 1
    ---
    class A implements B {
      foo = 1
    }
  """

  testCase """
    implements interface with type args
    ---
    class A implements B<C>
      foo = 1
    ---
    class A implements B<C> {
      foo = 1
    }
  """

  testCase """
    multiple implements
    ---
    class A implements B, C
      foo = 1
    ---
    class A implements B, C {
      foo = 1
    }
  """

  testCase """
    extends obj member class
    ---
    class A extends Foo.Bar.Baz
      foo()
        1
    ---
    class A extends Foo.Bar.Baz {
      foo() {
        return 1
      }
    }
  """

  testCase """
    extends dynamic returned class
    ---
    class A extends Foo({ x: 10 })
      foo()
        1
    ---
    class A extends Foo({ x: 10 }) {
      foo() {
        return 1
      }
    }
  """

  testCase """
    extends with multiple type args
    ---
    class A extends B<T1, T2> implements C<T3, T4, T5>
      x = 10

      foo()
        @x
    ---
    class A extends B<T1, T2> implements C<T3, T4, T5> {
      x = 10

      foo() {
        return this.x
      }
    }
  """

  testCase """
    static field
    ---
    class A
      static x = 3
    ---
    class A {
      static x = 3
    }
  """

  testCase """
    static field shorthand
    ---
    class A
      @x = 3
    ---
    class A {
      static x = 3
    }
  """

  testCase """
    static field named static
    ---
    class A
      static static = 3
    ---
    class A {
      static static = 3
    }
  """

  testCase """
    field with name that starts with static
    ---
    class A
      staticField = 3
    ---
    class A {
      staticField = 3
    }
  """

  testCase """
    static field with name that starts with static
    ---
    class A
      static staticField = 3
    ---
    class A {
      static staticField = 3
    }
  """

  testCase """
    constuctor '@' shortand
    ---
    class A
      @()
        @x = 3
    ---
    class A {
      constructor() {
        this.x = 3
      }
    }
  """

  testCase """
    method with non-end rest
    ---
    class A
      f (..., a)
        a
    ---
    const splice: <T>(this: T[], start: number, deleteCount?: number) => T[] = [].splice as any
    class A {
      f (...ref) {
        let [a] = splice.call(ref, -1);
        return a
      }
    }
  """

  testCase """
    super with accessors
    ---
    class A
      f()
        super().foo() + super()(1)
    ---
    class A {
      f() {
        return super().foo() + super()(1)
      }
    }
  """

  testCase """
    super properties
    ---
    class A
      f()
        super.id
    ---
    class A {
      f() {
        return super.id
      }
    }
  """

  testCase """
    super splice
    ---
    class A
      f()
        super[i...j]
    ---
    class A {
      f() {
        return super.slice(i, j)
      }
    }
  """

  describe "anonymous", ->
    testCase """
      anonymous with static
      ---
      class
        @a = 5
      ---
      class {
        static a = 5
      }
    """

    testCase """
      anonymous with constructor
      ---
      class
        @(@a=5)
      ---
      class {
        constructor(a=5) {this.a = a;}
      }
    """

    testCase """
      empty constructor body
      ---
      class
        constructor(x);
      ---
      class {
        constructor(x) {; }
      }
    """

  describe "decorators", ->
    testCase """
      method with decorators
      ---
      class A
        @@a
        @@b
        f()
          return 3
      ---
      class A {
        @a
        @b
        f() {
          return 3
        }
      }
    """

    testCase """
      method with decorators and parameters
      ---
      class A
        @@a(1, 2)
        @@b(3, 4)
        f()
          return 3

        @@c(5)
        static p(x: number)
          x
      ---
      class A {
        @a(1, 2)
        @b(3, 4)
        f() {
          return 3
        }

        @c(5)
        static p(x: number) {
          return x
        }
      }
    """

    testCase """
      multiple decorators on same line
      ---
      class A
        @@a @@b
        f()
          return 3
      ---
      class A {
        @a @b
        f() {
          return 3
        }
      }
    """

    testCase """
      class decorator
      ---
      @@a
      class A
        f()
          return 3
      ---
      @a
      class A {
        f() {
          return 3
        }
      }
    """

    testCase """
      property decorator
      ---
      class A
        @@foo
        static x = 10

        @@foo({ x: 10 })
        y = 20
      ---
      class A {
        @foo
        static x = 10

        @foo({ x: 10 })
        y = 20
      }
    """

    testCase """
      ts access modifiers
      ---
      class Foo
        protected x = 10

        @@foo()
        protected y = 20
      ---
      class Foo {
        protected x = 10

        @foo()
        protected y = 20
      }
    """

    testCase """
      decorator call expression
      ---
      @@entity.name "dog"
      class Dog
      ---
      @entity.name("dog")
      class Dog {
      }
    """

  testCase """
    constructor params
    ---
    class Foo
      constructor(
        public y: string,
        a: number,
        x = 20
      ) {}
    ---
    class Foo {
      constructor(
        public y: string,
        a: number,
        x = 20
      ) {}
    }
  """

  testCase """
    abstract classes
    ---
    abstract class Foo
      abstract foo = "bar"
      abstract bar: string = "baz"
    ---
    abstract class Foo {
      abstract foo = "bar"
      abstract bar: string = "baz"
    }
  """

  testCase """
    abstract methods
    ---
    abstract class Foo
      abstract bat(): number
      squeal()
        console.log "yelp"
    ---
    abstract class Foo {
      abstract bat(): number
      squeal() {
        return console.log("yelp")
      }
    }
  """

  testCase """
    readonly properties
    ---
    abstract class Foo
      readonly str = "content"
      abstract readonly num = 10
    ---
    abstract class Foo {
      readonly str = "content"
      abstract readonly num = 10
    }
  """

  testCase """
    interspersed comments
    ---
    @@foo // c0
    abstract /* c1 */ class /* c2 */ Foo // C3
      readonly /* c4 */ str = "comment" /* c9 */
      abstract /* c6 */ readonly /* c7 */ num = 10 // c8
    ---
    @foo // c0
    abstract /* c1 */ class /* c2 */ Foo { // C3
      readonly /* c4 */ str = "comment" /* c9 */
      abstract /* c6 */ readonly /* c7 */ num = 10
    } // c8
  """

  describe "implicit async", ->
    testCase """
      implicit async
      ---
      class A
        f()
          await 3
      ---
      class A {
        async f() {
          return await 3
        }
      }
    """

    testCase """
      does not double insert implicit async
      ---
      class A
        async f()
          await 3
      ---
      class A {
        async f() {
          return await 3
        }
      }
    """

  describe "implicit generator", ->
    testCase """
      implicit generator
      ---
      class A
        f()
          yield 3
      ---
      class A {
        *f() {
          return yield 3
        }
      }
    """

    testCase """
      does not double insert implicit generator
      ---
      class A
        *f()
          yield 3
      ---
      class A {
        *f() {
          return yield 3
        }
      }
    """

  describe "implicit async generator", ->
    testCase """
      implicit async generator
      ---
      class A
        f()
          yield await 3
      ---
      class A {
        async *f() {
          return yield await 3
        }
      }
    """

    testCase """
      does not double insert implicit async generator
      ---
      class A
        async *f()
          yield await 3
      ---
      class A {
        async *f() {
          return yield await 3
        }
      }
    """
