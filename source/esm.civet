/**
@file Civet ESM loader.

In Node 20.6.0+, use Civet's `register` to install this ESM loader:

@example
```bash
node --import @danielx/civet/register source.civet
```

In older Node, use `--loader` to install this ESM loader:

@example
```bash
node --loader @danielx/civet/esm source.civet
```

Previously depended on ts-node esm loader being downstream:

@example
```bash
node --loader ts-node/esm --loader @danielx/civet/esm source.civet
```
*/

{ readFileSync } from fs
{ pathToFileURL, fileURLToPath } from url

Civet from ./main.civet
{ compile, SourceMap } := Civet

baseURL := pathToFileURL(process.cwd() + '/').href
extensionsRegex := /\.civet$/

export function resolve(specifier: string, context: any, next: any)
  { parentURL = baseURL } := context

  if extensionsRegex.test specifier
    return
      shortCircuit: true
      format: "civet"
      url: new URL(specifier, parentURL).href

  // Let Node.js handle all other specifiers.
  return next specifier, context

export async function load(url: string, context: any, next: any)
  if context.format is "civet"
    path := fileURLToPath url
    source := readFileSync path, "utf8"
    let tsSource, sourceMap
    try
      {code: tsSource, sourceMap} = await compile source,
        filename: path
        sourceMap: true
        js: true
    catch e
      console.error `Civet failed to compile ${url}:`, e
      throw e

    // NOTE: Append .tsx to URL so ts-node treats as TypeScript
    transpiledUrl := url + ".tsx"

    // NOTE: Assuming ts-node hook follows load hook
    result := await next transpiledUrl,
      // ts-node won't transpile unless this is module
      // can't use commonjs since we don't rewrite imports
      format: "module"
      // NOTE: Setting the source in the context makes it available when ts-node uses defaultLoad
      source: tsSource

    // Remove .tsx extension for final URL
    result.responseURL = (result.responseURL ?? transpiledUrl)
    .replace /.tsx$/, ''

    // parse source map from downstream (ts-node) result
    // compose with civet source map
    result.source = SourceMap.remap(result.source, sourceMap, url, result.responseURL)

    return result

  // Other URLs continue unchanged.
  return next url, context
