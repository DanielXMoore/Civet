export * from ./main.civet
import { type CompilerOptions, compile } from ./main.civet

// Based on `CoffeeScript.runScripts`, from
// https://github.com/jashkenas/coffeescript/blob/main/src/browser.coffee
export async function runScripts(type = 'text/civet'): Promise<void>
  scripts := window.document.querySelectorAll `script[type=${JSON.stringify type}]`

  for each script, i of scripts
    runScript script as HTMLScriptElement, `<script>${i}`

export async function runScript(script: HTMLScriptElement, name: string = '<script>'): Promise<???>
  options: CompilerOptions :=
    inlineMap: true
    js: true

  let code: string
  if source := (script as HTMLScriptElement).src or script.getAttribute 'data-src'
    options.filename = source
    code = fetch source |> await |> .text() |> await
  else
    options.filename = script.id or name
    code = script.innerHTML

  js := compile code, options |> await
  window.eval js

export function autoRunScripts(
  roots: HTMLElement[]
  options: MutationObserverInit = {}
): MutationObserver
  observer := new MutationObserver async (mutations): Promise<void> =>
    for each mutation of mutations
      continue unless mutation.type is "childList"
      for each node of mutation.addedNodes
        if
          (and)
            node.nodeType is 1
            (node as HTMLElement).tagName is "SCRIPT"
            (node as HTMLScriptElement).type is "text/civet"
          await runScript node as HTMLScriptElement
  options = { ...options, childList: true }
  for each root of roots
    observer.observe root, options
  observer

// Check for <script type="text/civet"> automatically in browser context
// (not e.g. worker thread)
unless window <? "undefined"
  { currentScript } := document
  window?.addEventListener? "DOMContentLoaded", =>
    return if currentScript?.hasAttribute 'data-no-scripts'
    unless currentScript?.hasAttribute 'data-no-start-scripts'
      runScripts()
    unless currentScript?.hasAttribute 'data-no-auto-scripts'
      autoRunScripts [document.head, document.body]
