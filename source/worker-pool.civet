type { Worker } from node:worker_threads

type Job
  id: number
  op: string
  args: ???[]

export class WorkerPool
  idle: Worker[]
  spawned: number
  jobId: number
  callbacks: Map<number, {resolve: (result: ???) =>, reject: (error: ???) =>}>
  todo: Job[]
  @(@threads: number)
    @idle = []
    @spawned = 0
    @jobId = 0
    @callbacks = new Map
    @todo = []

  run(op: string, ...args: ???[]): Promise<???>
    id := @jobId++
    await new Promise (resolve, reject): void =>
      @callbacks.set id, {resolve, reject}
      job := {id, op, args}
      if @idle#
        worker := @idle.shift()!
        worker.ref()
        worker.postMessage job
      else if @spawned < @threads
        @startWorker() |> await |> .postMessage job
      else
        @todo.push job

  startWorker(): Promise<Worker>
    @spawned++
    { Worker } from node:worker_threads
    path from node:path
    :ESM_ONLY globalThis.__dirname = do
      { fileURLToPath } from node:url
      path.dirname fileURLToPath import.meta.url
    worker := new Worker path.join __dirname, 'node-worker.mjs'
    worker.on 'message', (response: {id: number, result?: ???, error?: ???}) =>
      callback := @callbacks.get(response.id)!
      @callbacks.delete response.id
      if response.error
        callback.reject response.error
      else
        callback.resolve response.result
      // Worker is now available
      if @spawned > @threads // kill if now too many workers
        @spawned--
        worker.terminate()
      else if @todo# // send job if any already available
        worker.postMessage @todo.shift()
      else // otherwise add to idle set and don't block program exit
        @idle.push worker
        worker.unref()
    worker.on 'error', (error) =>
      console.error "Civet worker failed:", error
    worker

  setThreads(@threads: number): void
    while @spawned > @threads
      return unless @idle#
      @spawned--
      @idle.pop()!.terminate()
