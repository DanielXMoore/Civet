import type {
  ArrayBindingPattern
  ASTNode
  ASTNodeObject
  BindingPattern
  BindingProperty
  BindingRestElement
  Children
  HasSubbinding
  ObjectBindingPattern
  ThisAssignments
} from ./types.civet

import {
  gatherRecursiveAll
} from ./traversal.civet

import {
  makeRef
} from ./ref.civet

import {
  parenthesizeType
  trimFirstSpace
  updateParentPointers
} from ./util.civet

/**
 * Adjusts `@binding` inside object properties that need to be aliased
 * see test/function.civet binding pattern
 */
function adjustAtBindings(statements: ASTNode, asThis = false): void
  for each binding of gatherRecursiveAll statements, .type is "AtBindingProperty"
    { ref } := binding

    if asThis
      // Convert from @x to x: this.x keeping any whitespace or initializer to the right
      atBinding := binding.binding
      atBinding.children.pop()
      atBinding.type = undefined

      binding.children.unshift(ref.id, ": this.", ref.base)
      binding.type = "Property"
      binding.ref = undefined
      return

    unless ref.names[0] is ref.base
      binding.children.unshift(ref.base, ": ")

function adjustBindingElements(elements: ASTNodeObject[])
  names := elements.flatMap .names or []
  { length } := elements

  let blockPrefix,
    restIndex = -1,
    restCount = 0

  for each { type }, i of elements
    if type is "BindingRestElement"
      restIndex = i if restIndex < 0
      restCount++

  if restCount is 0
    return {
      children: elements
      names
      blockPrefix
      length
    }
  else if restCount is 1
    rest := elements[restIndex] as BindingRestElement
    after := elements[restIndex + 1..]

    restIdentifier := rest.binding.ref or rest.binding
    names.push ...rest.names or []

    l .= after#

    if l
      // increment l if trailing comma
      if (arrayElementHasTrailingComma(after[l - 1])) l++

      elements := trimFirstSpace after
      blockPrefix = {
        type: "PostRestBindingElements"
        elements
        children: ["[", elements, "] = ", restIdentifier, ".splice(-", l.toString(), ")"]
        names: after.flatMap((p) => p.names)
      }

    return {
      names
      children: [...elements.slice(0, restIndex), {
        ...rest
        children: rest.children.slice(0, -1) // remove trailing comma
      }]
      blockPrefix
      length
    }

  err :=
    type: "Error"
    children: ["Multiple rest elements in array pattern"]

  return {
    names
    children: [...elements, err]
    blockPrefix
    length
  }

/**
Find and return all `subbinding` properties, prefixed with commas,
including searching within those subbindings for more subbindings
*/
function gatherSubbindings(node: ASTNode, subbindings: ASTNode[] = []): ASTNode[]
  for each p of gatherRecursiveAll node, ($): $ is HasSubbinding => ($ as HasSubbinding).subbinding?
    { subbinding } := p
    subbindings.push ", ", subbinding
    gatherSubbindings subbinding, subbindings
  subbindings

/**
Simplify `{name: name}` to just `{name}` that results from
the parser expanding `{name^: pattern}` into `{name: name^pattern}`
*/
function simplifyBindingProperties(node: ASTNode)
  for each p of gatherRecursiveAll node, .type is "BindingProperty"
    { name, value } := p
    if value?.type is "NamedBindingPattern" and value.binding is name
      [ws] := p.children
      p.children = [ws, name, p.delim]

function gatherBindingCode(statements: ASTNode, opts?: { injectParamProps?: boolean, assignPins?: boolean })
  thisAssignments: ThisAssignments := []
  splices: unknown[] := []

  function insertRestSplices(s, p: unknown[], thisAssignments: ThisAssignments): void
    for each let n of gatherRecursiveAll(s, (n) => (or)
      n.blockPrefix
      opts?.injectParamProps and n.accessModifier
      n.type is "AtBinding"
      opts?.assignPins and n.type is like "PinPattern", "PinProperty"
    )
      // Insert `this` assignments
      if n.type is "AtBinding"
        { ref } := n
        { id } := ref
        thisAssignments.push([`this.${id} = `, ref])
        continue

      if opts?.assignPins
        if n.type is "PinProperty"
          n.children = n.children.flatMap
            & is n.name ? [ n.name, ": ", n.value ] : &
          updateParentPointers n
          // Fall through to handle PinPattern
          // (It won't be found by gatherRecursiveAll because wasn't a child)
          n = n.value
        if n.type is "PinPattern"
          n.ref = makeRef
            n.expression.type is "Identifier" ? n.expression.name : "pin"
          n.children = [n.ref]
          updateParentPointers n
          thisAssignments.push
            type: "AssignmentExpression"
            children: [n.expression, " = ", n.ref]
            names: []
            lhs: n.expression as any
            assigned: n.expression
            expression: n.ref
          continue

      if opts?.injectParamProps and n.type is "Parameter" and n.accessModifier
        for each id of n.names
          thisAssignments.push
            type: "AssignmentExpression"
            children: [`this.${id} = `, id]
            js: true
        continue

      { blockPrefix } := n
      p.push(blockPrefix)

      // Search for any further nested splices, and at bindings
      insertRestSplices(blockPrefix, p, thisAssignments)

  insertRestSplices(statements, splices, thisAssignments)

  return [splices, thisAssignments] as const

function arrayElementHasTrailingComma(elementNode)
  const lastChild = elementNode.children.-1
  return lastChild and lastChild[lastChild.length - 1]?.token is ","

// If an Array or ObjectBindingPattern doesn't have a typeSuffix, this function
// extracts one from typeSuffixes for the binding properties (if present).
function gatherBindingPatternTypeSuffix(pattern: ArrayBindingPattern | ObjectBindingPattern): BindingPattern
  return pattern if pattern.typeSuffix?
  count .= 0
  switch pattern.type
    when "ArrayBindingPattern"
      types: ASTNode[] :=
        for each elem of pattern.elements
          { typeSuffix } .= elem
          typeSuffix ??= elem.binding?.typeSuffix
          count++ if typeSuffix
          typeElement .= [ typeSuffix?.t, elem.delim ]
          if typeSuffix?.optional
            typeElement[0] = parenthesizeType typeElement[0]
            typeElement.unshift "undefined |"
          if elem.type is "BindingRestElement"
            typeElement[0] ??= "unknown[]"
            typeElement.unshift elem.dots
          else
            typeElement[0] ??= "unknown"
          typeElement
      if count
        t: ASTNode[] := [ ": [", types, "]" ]
        pattern.typeSuffix = {
          type: "TypeSuffix"
          ts: true
          t
          children: [t]
        }
    when "ObjectBindingPattern"
      let restType: ASTNode?
      types: ASTNode[] :=
        for each prop of pattern.properties
          { typeSuffix } .= prop
          typeSuffix ??= prop.value?.typeSuffix
          count++ if typeSuffix
          typeSuffix ??=
            type: "TypeSuffix"
            ts: true
            children: [": unknown"]
          switch prop.type
            when "BindingProperty"
              ws := prop.children[...prop.children.indexOf prop.name]
              [ ...ws, prop.name, typeSuffix, prop.delim ] as Children
            when "AtBindingProperty"
              ws := prop.children[...prop.children.indexOf prop.binding]
              [ ...ws, prop.ref.id, typeSuffix, prop.delim ] as Children
            when "BindingRestProperty"
              restType = prop.typeSuffix?.t
              continue
      if count
        t: ASTNode[] := [ "{", types, "}" ]
        t.push " & ", parenthesizeType(trimFirstSpace(restType)) if restType?
        pattern.typeSuffix = {
          type: "TypeSuffix"
          ts: true
          t
          children: [": ", t]
        }
  pattern

export {
  adjustAtBindings
  adjustBindingElements
  gatherSubbindings
  gatherBindingCode
  gatherBindingPatternTypeSuffix
  simplifyBindingProperties
}
