import {
  ASTNode,
  AtBinding,
  ThisAssignments
} from ./types.civet

import {
  gatherRecursiveAll
} from ./traversal.civet

function gatherBindingCode(statements: ASTNode, opts?: { injectParamProps?: boolean })
  thisAssignments: ThisAssignments := []
  splices: unknown[] := []

  function insertRestSplices(s, p: unknown[], thisAssignments: ThisAssignments): void
    gatherRecursiveAll(s, (n) => n.blockPrefix or (opts?.injectParamProps and n.accessModifier) or n.type is "AtBinding")
      .forEach((n) => {
        // Insert `this` assignments
        if n.type is "AtBinding"
          { ref } := n as! AtBinding
          { id } := ref
          thisAssignments.push([`this.${id} = `, ref])
          return

        if (opts?.injectParamProps and n.type is "Parameter" and n.accessModifier)
          n.names.forEach((id) => {
            thisAssignments.push({
              type: "AssignmentExpression",
              children: [`this.${id} = `, id],
              js: true
            })
          })
          return

        { blockPrefix } := n
        p.push(blockPrefix)

        // Search for any further nested splices, and at bindings
        insertRestSplices(blockPrefix, p, thisAssignments)
      })

  insertRestSplices(statements, splices, thisAssignments)

  return [splices, thisAssignments] as const

export {
  gatherBindingCode
}
