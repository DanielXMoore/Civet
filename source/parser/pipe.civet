type {
  ASTNode
  AssignmentExpression
  Call
  ThrowStatement
} from ./types.civet
{ gatherRecursiveAll } from ./traversal.civet
{
  addParentPointers
  checkValidLHS
  clone
  makeLeftHandSideExpression
  makeNode
  removeHoistDecs
  skipIfOnlyWS
  updateParentPointers
} from ./util.civet
{
  makeRef
  needsRef
} from ./ref.civet

{ blockContainingStatement } from ./block.civet
{ processUnaryExpression } from ./unary.civet

type ExprWithComments
  expr: ASTNode!
  leadingComment: ASTNode
  trailingComment: ASTNode

function constructInvocation(fn: ExprWithComments, arg: ASTNode!)
  // Unwrap ampersand blocks
  expr .= fn.expr
  while expr.type is "ParenthesizedExpression"
    expr = expr.expression
  if expr.ampersandBlock
    const { ref, body } = expr

    ref.type = "PipedExpression"
    ref.children = [makeLeftHandSideExpression(arg)]
    updateParentPointers ref

    return makeNode {
      type: "UnwrappedExpression"
      expression: body
      children: [skipIfOnlyWS(fn.leadingComment), body, skipIfOnlyWS(fn.trailingComment)]
    }

  expr = fn.expr
  lhs .= expr
  // NewExpressions get handled specially later
  unless lhs.type is "NewExpression"
    lhs = makeLeftHandSideExpression(lhs)!

  // Attach comments
  comment .= skipIfOnlyWS(fn.trailingComment)
  if (comment) lhs.children.push comment
  comment = skipIfOnlyWS(fn.leadingComment)
  if (comment) lhs.children.splice(1, 0, comment)

  // TODO: We don't actually have CommaExpression nodes yet
  switch arg.type
    when "CommaExpression"
      arg = makeLeftHandSideExpression arg

  args := [arg]
  call: Call := {
    type: "Call"
    args
    children: ["(", args, ")"]
  }
  // Turn `|> new Foo` into `new Foo(arg)` by adding to existing CallExpression
  if lhs.type is "NewExpression"
    { expression } .= lhs
    expression = {
      ...expression
      type: "CallExpression"
      children: [ ...expression.children, call ]
    }
    {
      ...lhs
      expression
      children: lhs.children.map & is lhs.expression ? expression : &
    }
  else
    {
      type: "CallExpression"
      children: [lhs, call]
    }

function constructPipeStep(fn: ExprWithComments, arg: ASTNode!, returning: ASTNode??): [ASTNode, ASTNode??]
  returning = null unless returning
  children .= [[fn.leadingComment, fn.expr, fn.trailingComment].map(skipIfOnlyWS), " ", arg]

  // Handle special non-function cases
  switch fn.expr.token
    when "await"
      children = processUnaryExpression([fn.expr], arg, undefined)
      continue switch
    when "yield"
      return [
        children
        returning
      ]
    when "throw"
      statement: ThrowStatement := { type: "ThrowStatement", children }
      return
        . {
            type: "StatementExpression"
            statement
            children: [statement]
          }
        . null
    when "return"
      // Return ignores ||> returning argument
      return [{
        type: "ReturnStatement"
        children
      }, null]

  return [
    constructInvocation(fn, arg)
    returning
  ]

// head: expr
// body: [ws, pipe, ws, expr][]

function processPipelineExpressions(statements): void
  for each s of gatherRecursiveAll statements, .type is "PipelineExpression"
    [ws, , body] := s.children
    [, arg] .= s.children

    children := [ws]
    comma := blockContainingStatement(s) ? ";" : ","

    let usingRef = null

    for each step, i of body
      const [leadingComment, pipe, trailingComment, expr] = step
      const returns = pipe.token is "||>"
      let ref, result,
        returning = returns ? arg : null

      if pipe.token is "|>="
        let initRef
        if i is 0
          checkValidLHS arg

          :outer switch arg.type
            when "MemberExpression"
              // If there is only a single access then we don't need a ref
              break if arg.children.length <= 2
              continue switch
            when "CallExpression"
              const access = arg.children.pop()
              // processAssignments will check that this is a valid
              // last access to assign to

              usingRef = makeRef()
              initRef = {
                type: "AssignmentExpression"
                children: [usingRef, " = ", arg, comma]
              }

              arg = {
                type: "MemberExpression"
                children: [usingRef, access]
              }

          // assignment node
          lhs := [[
            [initRef]
            arg
            []
            { token: "=", children: [" = "] }
          ]]

          Object.assign s, {
            type: "AssignmentExpression"
            children: [lhs, children]
            names: null
            lhs
            assigned: arg
            expression: children
          } satisfies AssignmentExpression

          // Clone so that the same node isn't on the left and right because splice manipulation
          // moves things around and can cause a loop in the graph
          arg = clone arg
          removeHoistDecs arg

          // except keep the ref the same
          if arg.children[0].type is "Ref"
            arg.children[0] = usingRef

        else
          children.unshift({
            type: "Error",
            $loc: pipe.token.$loc,
            message: "Can't use |>= in the middle of a pipeline",
          })
      else
        if (i is 0) s.children = children

      if returns and (ref = needsRef(arg))
        // Use the existing ref if present
        usingRef = usingRef or ref
        arg = {
          type: "ParenthesizedExpression",
          children: ["(", {
            type: "AssignmentExpression"
            children: [usingRef, " = ", arg]
          }, ")"],
        }
        returning = usingRef

      [result, returning] = constructPipeStep
        {
          leadingComment: skipIfOnlyWS(leadingComment)
          trailingComment: skipIfOnlyWS(trailingComment)
          expr
        }
        arg
        returning

      if result.type is "ReturnStatement"
        // Attach errors/warnings if there are more steps
        if i < body.length - 1
          result.children.push({
            type: "Error",
            message: "Can't continue a pipeline after returning",
          })
        arg = result
        if children.-1 is ","
          children.pop()
          children.push(";")
        break

      if returning
        arg = returning
        children.push(result, comma)
      else
        arg = result

    if usingRef
      s.hoistDec = {
        type: "Declaration",
        children: ["let ", usingRef],
        names: [],
      }

    children.push(arg)

    // Wrap with parens because comma operator has low precedence
    if !children.some(?.type is "ReturnStatement") and children.some & is ","
      { parent } := s
      parenthesizedExpression := makeLeftHandSideExpression { ...s }
      Object.assign s, parenthesizedExpression, {
        parent
        hoistDec: undefined
      }

    // Update parent pointers
    addParentPointers(s, s.parent)

export {
  processPipelineExpressions
}
