import type {
  ArrayExpression
  ASTLeaf
  ASTNode
  Existence
} from ./types.civet

import {
  firstNonSpace
  getTrimmingSpace
  makeLeftHandSideExpression
  parenthesizeExpression
  prepend
  stripTrailingImplicitComma
  trimFirstSpace
} from ./util.civet

function processUnaryExpression(pre: ASTNode[], exp: ASTNode, post?: ASTNode[]): ASTNode
  return exp unless pre# or post
  // Handle "?" postfix
  if post?.token is "?"
    post =
      $loc: post.$loc
      token: " != null"

    if pre.length
      lastPre := pre.-1
      // Check for `!a?`
      if lastPre.token is "!"
        post.token = " == null"
        pre = pre.slice(0, -1)
      // Check for `not a?`
      else if lastPre.length is 2 and lastPre[0].token is "!"
        post.token = " == null"
        pre = pre.slice(0, -1)
    existence: Existence :=
      type: "Existence"
      expression: exp
      children: [exp, post]
      parent: undefined
    exp = makeLeftHandSideExpression(existence)
    if pre.length
      return {
        type: "UnaryExpression"
        children: [pre, exp]
        pre
        expression: exp
      }
    return exp

  // Combine unary -/+ to become numeric literals
  if exp?.type is "Literal" and pre#
    [ ..., last ] .= pre
    if (last as ASTLeaf?)?.token is like "+", "-"
      last = last as ASTLeaf
      exp = {
        ...exp
        children: [last, ...exp.children]
        raw: `${last.token}${exp.raw}`
      }
      pre = pre[...-1]
      return exp unless pre# or post

  // Await ops
  while l := pre.length
    last := pre[l - 1]
    if last.type is "Await"
      if last.op
        if exp.type !== "ParenthesizedExpression"
          exp = ["(", exp, ")"]

        exp =
          type: "CallExpression"
          children: [...last.children, "Promise", last.op, exp]
        pre = pre.slice(0, -1)
      else
        if firstNonSpace(exp) is like /^[ \t]*\n/, {token: /^[ \t]*\n/}
          exp = parenthesizeExpression exp
        exp =
          type: "AwaitExpression"
          children: [...last.children, exp]
        pre = pre.slice(0, -1)
    else
      break

  return {
    type: "UnaryExpression"
    children: [ pre, exp, post ]
    pre
    expression: exp
    post
  }

function processUnaryNestedExpression(pre: ASTNode[], args: ArrayExpression | ASTNode[], post: ASTNode[])
  isArray := args.type is "ArrayExpression"
  unless isArray
    args = stripTrailingImplicitComma args
  // Special handling of multiple nested arguments, or any array argument
  if isArray or args# > 2 // 2 = 1 argument + 1 delimiter
    // Multiple arguments only defined for await and await operators
    last := pre.-1
    return unless last is like {type: "Await"}
    if last.op // await ops take array argument
      unless isArray
        args =
          type: "ArrayExpression"
          children: [ "[", args, "]" ]
    else // regular await turns into an array
      pre.pop()
      unless isArray
        args = args as ASTNode[]
        args =
          type: "ArrayExpression"
          children: [
            "["
            ...for each arg of args
              if arg is like {type: "Argument"}
                expression := processUnaryExpression [last], arg.expression
                {
                  ...arg
                  expression
                  children: arg.children.map & is arg.expression ? expression : &
                }
              else
                arg
            "]"
          ]
      else
        args = trimFirstSpace(args) as ArrayExpression
        args = {
          ...args,
          children: (args as ArrayExpression).children.map
            (arg) =>
              switch arg
                {type: "ArrayElement", expression: exp, children}
                  expression .= processUnaryExpression [last], trimFirstSpace exp
                  expression = prepend getTrimmingSpace(exp), expression
                  {
                    ...arg
                    expression
                    children: children.map & is exp ? expression : &
                  }
                else
                  arg
        }
  processUnaryExpression pre, args, post

export {
  processUnaryExpression
  processUnaryNestedExpression
}
