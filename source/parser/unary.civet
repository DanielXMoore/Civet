import type {
  Existence
} from ./types.civet

import {
  makeLeftHandSideExpression
} from ./util.civet

function processUnaryExpression(pre, exp, post)
  if (!(pre.length or post)) return exp
  // Handle "?" postfix
  if post?.token is "?"
    post =
      $loc: post.$loc
      token: " != null"

    if pre.length
      lastPre := pre.-1
      // Check for `!a?`
      if lastPre.token is "!"
        post.token = " == null"
        pre = pre.slice(0, -1)
      // Chec for `not a?`
      else if lastPre.length is 2 and lastPre[0].token is "!"
        post.token = " == null"
        pre = pre.slice(0, -1)
    existence: Existence :=
      type: "Existence"
      expression: exp
      children: [exp, post]
      parent: undefined
    exp = makeLeftHandSideExpression(existence)
    if pre.length
      return {
        type: "UnaryExpression"
        children: [...pre, exp]
      }
    return exp

  // Combine unary -/+ to become numeric literals
  if exp.type is "Literal"
    if pre.length is 1
      {token} := pre[0]
      if token is "-" or token is "+"
        children := [pre[0], ...exp.children]
        literal := {
          type: "Literal",
          children,
          raw: `${token}${exp.raw}`
        }
        if (post)
          return {
            type: "UnaryExpression",
            children: [literal, post]
          }

        return literal

  // Await ops
  while l := pre.length
    last := pre[l - 1]
    if last.type is "Await"
      if last.op
        if exp.type !== "ParenthesizedExpression"
          exp = ["(", exp, ")"]

        exp =
          type: "CallExpression",
          children: [...last.children, "Promise", last.op, exp]
        pre = pre.slice(0, -1)
      else
        exp =
          type: "AwaitExpression",
          children: [...last.children, exp],
        pre = pre.slice(0, -1)
    else
      break

  return {
    type: "UnaryExpression",
    children: [...pre, exp, post]
  }

export {
  processUnaryExpression
}
