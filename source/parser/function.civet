import type {
  ASTNode
  ASTNodeBase
  CallExpression
  FunctionNode
  IterationExpression
  IterationFamily
  LabeledStatement
  Parameter
  StatementTuple
  TypeIdentifierNode
  TypeNode
  Whitespace
} from ./types.civet

import {
  braceBlock
  getIndent
  makeEmptyBlock
} from ./block.civet

import {
  gatherBindingCode
} from ./binding.civet

import {
  findAncestor
  findChildIndex
  gatherNodes
  gatherRecursiveAll
  gatherRecursiveWithinFunction
  type Predicate
} from ./traversal.civet

import {
  assert
  convertOptionalType
  hasAwait
  hasYield
  inplacePrepend
  insertTrimmingSpace
  isEmptyBareBlock
  isExit
  isFunction
  isStatement
  isWhitespaceOrEmpty
  makeLeftHandSideExpression
  makeNode
  updateParentPointers
  wrapIIFE
  wrapWithReturn
} from ./util.civet

import {
  makeRef
} from ./ref.civet

function isVoidType(t?: TypeNode): boolean
  return t?.type is "LiteralType" and t.t.type is "VoidType"

function isPromiseVoidType(t?: TypeIdentifierNode): boolean
  return t?.type is "IdentifierType" and t.raw is "Promise" &&
    t.args?.types?.length is 1 and isVoidType(t.args.types[0])

function isGeneratorVoidType(t?: TypeIdentifierNode): boolean
  return t?.type is "IdentifierType" and
    (t.raw is "Iterator" or t.raw is "Generator") and
    t.args?.types?.length >= 2 and isVoidType(t.args.types[1])

function isAsyncGeneratorVoidType(t?: TypeIdentifierNode): boolean
  return t?.type is "IdentifierType" and
    (t.raw is "AsyncIterator" or t.raw is "AsyncGenerator") and
    t.args?.types?.length >= 2 and isVoidType(t.args.types[1])

// Add implicit block unless followed by a method/function of the same name,
// or block is within an ExportDeclaration.
function implicitFunctionBlock(f): void
  if (f.abstract or f.block or f.signature?.optional) return

  { name, parent } := f
  if (parent?.type is "ExportDeclaration") return
  expressions := parent?.expressions ?? parent?.elements
  currentIndex := expressions?.findIndex(([, def]) => def is f)
  following := currentIndex >= 0 and expressions[currentIndex + 1]?.[1]

  if f.type is following?.type and name and name is following.name
    f.ts = true
  else
    block := makeEmptyBlock()
    block.parent = f
    f.block = block
    f.children.push(block)
    f.ts = false

function processReturn(f: FunctionNode, implicitReturns: boolean): void
  { returnType } .= f.signature
  if returnType and returnType.optional
    convertOptionalType returnType

  if not processReturnValue(f) and implicitReturns
    { signature, block } := f
    { modifier, name, returnType } := signature
    { async, generator, set } := modifier
    isMethod := f.type is "MethodDefinition"
    isConstructor := isMethod and name is "constructor"
    isVoid := (or)
      isVoidType(returnType?.t)
      (and)
        async
        (or)
          isPromiseVoidType(returnType?.t)
          generator and isAsyncGeneratorVoidType(returnType?.t)
      (and)
        not async
        generator
        isGeneratorVoidType(returnType?.t)

    if block?.type is "BlockStatement"
      if isVoid or set or isConstructor
        if block.bare and block.implicitlyReturned
          braceBlock block
      else
        unless block.implicitlyReturned
          insertReturn(block)

/**
 * Support for `return.value` and `return =`
 * for changing automatic return value of function.
 * Returns whether any present (so shouldn't do implicit return).
 */
function processReturnValue(func: FunctionNode)
  { block } := func
  values: ASTNodeBase[] := (gatherRecursiveWithinFunction block,
    ({ type }) => type is "ReturnValue") as ASTNodeBase[]
  return false unless values.length

  ref := makeRef "ret"

  let declaration
  values.forEach (value) =>
    value.children = [ref]

    // Check whether return.value already declared within this function
    { ancestor, child } := findAncestor(value,
      ({ type }) => type is "Declaration",
      isFunction)
    declaration ??= child if ancestor  // remember binding

  // Compute default return type
  returnType .= func.returnType ?? func.signature?.returnType
  if returnType
    { t } := returnType
    switch t.type
      "TypePredicate"
        returnType = ": boolean"
      "AssertsType"
        returnType = undefined

  // Modify existing declaration, or add declaration of return.value after {
  if declaration
    unless declaration.suffix?
      declaration.children[1] = declaration.suffix = returnType
  else
    block.expressions.unshift [
      getIndent block.expressions[0]
    ,
      type: "Declaration"
      children: ["let ", ref, returnType]
      names: []
    ,
      ";"
    ]

  // Transform existing `return` -> `return ret`
  gatherRecursiveWithinFunction block,
    (r) => r.type is "ReturnStatement" and not r.expression
  .forEach (r) =>
    r.expression = ref
    r.children.splice -1, 1, " ", ref

  // Implicit return before }
  unless block.children.-2?.type is "ReturnStatement"
    indent := getIndent(block.expressions.-1) or ";"
    block.expressions.push [
      [indent]
    ,
      type: "ReturnStatement",
      expression: ref,
      children: ["return ", ref]
    ]

  return true

function patternAsValue(pattern)
  switch (pattern.type) {
    case "ArrayBindingPattern": {
      const children = [...pattern.children]
      const index = children.indexOf(pattern.elements)
      if (index < 0) throw new Error("failed to find elements in ArrayBindingPattern")
      children[index] = pattern.elements.map((el) => {
        const [ws, e, delim] = el.children
        return { ...el, children: [ws, patternAsValue(e), delim] }
      })
      return { ...pattern, children }
    }
    case "ObjectBindingPattern": {
      const children = [...pattern.children]
      const index = children.indexOf(pattern.properties)
      if (index < 0) throw new Error("failed to find properties in ArrayBindingPattern")
      children[index] = pattern.properties.map patternAsValue
      return { ...pattern, children }
    }
    case "Identifier":
    case "BindingProperty": {
      const children = [
        // { name: value } = ... declares value, not name
        pattern.value ?? pattern.name
        pattern.delim
      ]
      // Check for leading whitespace
      if (isWhitespaceOrEmpty(pattern.children[0])) {
        children.unshift(pattern.children[0])
      }
      return { ...pattern, children }
    }
    default:
      return pattern
  }

// NOTE: this is almost the same as insertReturn but doesn't remove `breaks` in `when` and
// does construct an else clause pushing undefined in if statements that lack them
// and adds to the beginning and the end of the expression's children.
// Maybe these insertion modifications can be refactored to be more DRY eventually.
function assignResults(node: StatementTuple[] | ASTNode, collect: (node: ASTNode) => ASTNode): void
  if (!node) return
  // TODO: unify this with the `exp` switch
  switch node.type
    case "BlockStatement":
      if node.expressions.length
        assignResults(node.expressions.-1, collect)
      else
        node.expressions.push(["", collect("void 0"), ";"])
      return
    case "CaseBlock":
      node.clauses.forEach (clause) =>
        assignResults(clause, collect)
      return
    when "WhenClause", "DefaultClause", "PatternClause"
      assignResults(node.block, collect)
      return

  return unless Array.isArray node
  [, exp, semi] .= node
  return if semi?.type is "SemicolonDelimiter"
  return unless exp
  return if isExit exp

  outer := exp
  {type} .= exp
  if type is "LabelledStatement"
    exp = (exp as LabeledStatement).statement
    {type} = exp

  switch exp.type
    when "BreakStatement", "ContinueStatement", "DebuggerStatement", "EmptyStatement", "ReturnStatement", "ThrowStatement"
      return
    when "Declaration"
      value := if exp.bindings?.#
        patternAsValue(exp.bindings.-1.pattern)
      else
        "void 0"
      exp.children.push([
        "", [";", collect(value) ]
      ])
      return
    when "FunctionExpression"
      if exp.id
        exp.children.push [
          "", [";", collect(exp.id)]
        ]
        return
      /* c8 ignore next 3 */
      // This is currently never hit because anonymous FunctionExpressions are already wrapped in parens by this point
      // Add return in normal way for functions without ids
      break
    when "ForStatement", "IterationStatement", "DoStatement", "ComptimeStatement"
      wrapIterationReturningResults(exp, outer, collect)
      return
    when "BlockStatement"
      return if node.expressions.some isExit
      assignResults(exp.expressions[exp.expressions.length - 1], collect)
      return
    when "IfStatement"
      // if block
      assignResults(exp.then, collect)
      if exp.then.bare and not exp.then.semicolon
        exp.then.children.push exp.then.semicolon = ";"

      // else block
      if exp.else
        assignResults(exp.else.block, collect)
      else // Add else block pushing undefined if no else block
        exp.children.push([" else {", collect("void 0"), "}"])
      return
    when "PatternMatchingStatement"
      assignResults(exp.children[0], collect)
      return
    when "SwitchStatement"
      // insert a results.push in each case block
      assignResults(exp.children[2], collect)
      return
    when "TryStatement"
      // NOTE: CoffeeScript doesn't add a push to an empty catch block but does add if there is any statement in the catch block
      // we always add a push to the catch block
      // NOTE: does not insert a push in the finally block
      exp.blocks.forEach((block) => assignResults(block, collect))
      return

  // Don't push if there's a trailing semicolon
  return if node.-1?.type is "SemicolonDelimiter"

  // Insert push wrapping expression
  node[1] = collect(node[1])

// [indent, statement, semicolon]
function insertReturn(node: ASTNode, outerNode: ASTNode = node): void
  if (!node) return
  // TODO: unify this with the `exp` switch
  switch node.type
    when "BlockStatement"
      if node.expressions.length
        return if node.expressions.some ([, exp]) => isExit exp
        last := node.expressions[node.expressions.length - 1]
        insertReturn(last)
      else
        // NOTE: Kind of hacky but I'm too much of a coward to make `->` add an implicit return
        if node.parent.type is "CatchClause"
          node.expressions.push(["return"])
      return
    // NOTE: "CaseClause"s don't get a return statements inserted
    when "WhenClause"
      // Remove inserted `break;` if it hasn't already been removed
      node.children.splice node.children.indexOf(node.break), 1 if node.break
      if node.block.expressions.length
        insertReturn(node.block)
      else
        node.block.expressions.push(wrapWithReturn())
      return
    when "DefaultClause"
      insertReturn(node.block)
      return
  if (!Array.isArray(node)) return

  [, exp, semi] .= node
  return if semi?.type is "SemicolonDelimiter"
  return unless exp
  return if isExit exp

  outer := exp
  {type} .= exp
  if type is "LabelledStatement"
    exp = (exp as LabeledStatement).statement
    {type} = exp

  switch type
    when "BreakStatement", "ContinueStatement", "DebuggerStatement", "EmptyStatement", "ReturnStatement", "ThrowStatement"
      return
    when "Declaration"
      value := if exp.bindings?.#
        [" ", patternAsValue(exp.bindings.-1.pattern)]
      else
        []
      exp.children.push ["", {
        type: "ReturnStatement"
        children: [
          ";return",
          ...value
        ]
        parent: exp
      }]
      return
    when "FunctionExpression"
      // Add return after function declaration if it has an id to not interfere with hoisting
      if exp.id
        exp.children.push ["",
          type: "ReturnStatement"
          children: [";return ", exp.id]
          parent: exp
        ]
        return
      /* c8 ignore next 3 */
      // This is currently never hit because anonymous FunctionExpressions are already wrapped in parens by this point
      // Add return in normal way for functions without ids
      break
    when "ForStatement", "IterationStatement", "DoStatement", "ComptimeStatement"
      wrapIterationReturningResults(exp, outer)
      return
    when "BlockStatement"
      insertReturn(exp.expressions[exp.expressions.length - 1])
      return
    when "IfStatement"
      // if block
      insertReturn(exp.then)
      // else block
      if (exp.else) insertReturn(exp.else.block)
      // Add explicit return after if block if no else block
      else exp.children.push ["", {
        type: "ReturnStatement"
        // NOTE: add a prefixed semi-colon because the if block may not be braced
        children: [";return"]
        parent: exp
      }]
      return
    when "PatternMatchingStatement"
      insertReturn(exp.children[0])
      return
    when "SwitchStatement"
      insertSwitchReturns(exp)
      return
    when "TryStatement"
      exp.blocks.forEach((block) => insertReturn(block))
      // NOTE: do not insert a return in the finally block
      return

  // Don't add return if there's a trailing semicolon
  return if node.-1?.type is "SemicolonDelimiter"

  // Insert return after indentation and before expression
  const returnStatement = wrapWithReturn(node[1])
  node.splice(1, 1, returnStatement)

// insert a return in each when/else/default block
// case blocks don't get implicit returns
// maybe default blocks shouldn't either?
function insertSwitchReturns(exp): void
  exp.caseBlock.clauses.forEach (clause) =>
    insertReturn clause

function wrapIterationReturningResults(
  statement: IterationFamily,
  outer: { children: StatementTuple[] },
  collect?: (node: ASTNode) => ASTNode
): void
  if statement.type is "DoStatement" or statement.type is "ComptimeStatement"
    if collect
      assignResults(statement.block, collect)
    else
      insertReturn(statement.block, outer)
    return

  assert.equal statement.resultsRef, undefined,
    "wrapIterationReturningResults should not be called twice on the same statement"

  resultsRef := statement.resultsRef = makeRef "results"

  declaration :=
    type: "Declaration"
    children: ["const ", resultsRef, "=[]"]

  outer.children.unshift(["", declaration, ";"])

  assignResults statement.block, (node) =>
    // TODO: real ast node
    [ resultsRef, ".push(", node, ")" ]

  if collect
    statement.children.push collect(resultsRef)
  else
    statement.children.push(";return ", resultsRef, ";")

function processParams(f): void
  const { type, parameters, block } = f
  const isConstructor = f.name is 'constructor'

  // Check for singleton TypeParameters <Foo> before arrow function,
  // which TypeScript (in tsx mode) treats like JSX; replace with <Foo,>
  if (type is "ArrowFunction" and parameters and parameters.tp and parameters.tp.parameters.length is 1) {
    parameters.tp.parameters.push(",")
  }

  if (!block) return
  const { expressions } = block
  if (!expressions) return
  const { blockPrefix } = parameters

  let indent: string
  if (!expressions.length) {
    indent = ""
  } else {
    indent = expressions[0][0]
  }

  const [splices, thisAssignments] = gatherBindingCode(parameters, {
    injectParamProps: isConstructor
  })

  const delimiter = {
    type: "SemicolonDelimiter",
    children: [";"],
  }

  const prefix = splices
    .map (s) => ["let ", s]
    .concat(thisAssignments)
    .map((s) => s.type
      ? {
        // TODO: figure out how to get JS only statement tuples
        ...s,
        children: [indent, ...s.children, delimiter]
      }
      : [indent, s, delimiter]
    )

  if (!prefix.length) return
  // In constructor definition, insert prefix after first super() call
  if isConstructor
    superCalls := gatherNodes expressions,
      (is like {type: "CallExpression", children: [ {token: "super"}, ... ]}) as Predicate<CallExpression>
    if superCalls#
      {child} := findAncestor superCalls[0], (is block)
      index := findChildIndex expressions, child
      if index < 0
        throw new Error("Could not find super call within top-level expressions")
      expressions.splice(index + 1, 0, ...prefix)
      return
  expressions.unshift(...prefix)

function processSignature(f: FunctionNode): void
  {block, signature} := f

  if hasAwait(block) and not f.async?#
    f.async.push "async "
    signature.modifier.async = true

  if hasYield(block) and not f.generator?#
    if f.type is "ArrowFunction"
      gatherRecursiveWithinFunction block, .type is "YieldExpression"
      .forEach (y) =>
        i := y.children.findIndex .type is "Yield"
        // i+1 because after "yield" we have a consistent location in sourcemap
        y.children.splice i+1, 0,
          type: "Error"
          message: "Can't use yield inside of => arrow function"
    else
      f.generator.push "*"
      signature.modifier.generator = true

function processFunctions(statements, config): void
  gatherRecursiveAll(statements, ({ type }) => type is "FunctionExpression" or type is "ArrowFunction")
  .forEach (f) =>
    if f.type is "FunctionExpression"
      implicitFunctionBlock(f)
    processSignature(f)
    processParams(f)
    processReturn(f, config.implicitReturns)

  gatherRecursiveAll(statements, ({ type }) => type is "MethodDefinition")
  .forEach (f) =>
    implicitFunctionBlock(f)
    processParams(f)
    processReturn(f, config.implicitReturns)

function expressionizeIteration(exp: IterationExpression): void
  { async, subtype, block, children, statement } := exp
  i := children.indexOf statement
  if i < 0
    throw new Error("Could not find iteration statement in iteration expression")

  if subtype is "DoStatement" or subtype is "ComptimeStatement"
    // Just wrap with IIFE; insertReturn will apply to the resulting function
    children.splice(i, 1, wrapIIFE([["", statement, undefined]], async))
    updateParentPointers exp
    return

  exp.resultsRef ??= makeRef "results"
  { resultsRef } := exp

  // insert `results.push` to gather results array
  assignResults block, (node) =>
    // TODO: real node
    [ resultsRef, ".push(", node, ")" ]
  braceBlock(block)

  // Wrap with IIFE
  children.splice(i,
    1,
    wrapIIFE([
      ["", ["const ", resultsRef, "=[]"], ";"],
      ...children.map((c) => ["", c, undefined]),
      ["", wrapWithReturn(resultsRef)],
    ], async)
  )
  updateParentPointers exp

/**
Utility function to check if an implicit function application should be skipped
based on the shape of the arguments.

Don't treat as call if this is a postfix for/while/until/if/unless
*/
function skipImplicitArguments(args: unknown[]): boolean
  if args.length is 1
    arg0 .= args[0]

    if arg0.type is "StatementExpression"
      arg0 = arg0.statement

    return (and)
      arg0.type is "IterationExpression"
      arg0.subtype !== "DoStatement"
      !arg0.async
      isEmptyBareBlock arg0.block

  return false

/** Transform */
function processCoffeeDo(ws: Whitespace, expression: ASTNode): ASTNode
  ws = insertTrimmingSpace(ws, "") as Whitespace
  args: ASTNode[] := []
  if expression is like {type: "ArrowFunction"}, {type: "FunctionExpression"}
    { parameters } := expression
    // Move initializers to arguments
    newParameters := { ...parameters, children:
      for each let parameter of parameters.children
        if parameter is like {type: "Parameter"}
          if initializer := parameter.initializer
            args.push initializer.expression, parameter.delim
            parameter = {
              ...parameter
              initializer: undefined
              children: parameter.children.filter (is not initializer)
            }
          else
            args.push parameter.children.filter
              (is not (parameter as Parameter).typeSuffix)
        parameter
    }
    expression = {
      ...expression
      parameters: newParameters
      children: expression.children.map & is parameters ? newParameters : &
    }

  type: "CallExpression"
  children: [
    makeLeftHandSideExpression expression
    {
      type: "Call"
      args
      children: ["(", args, ")"]
    }
  ]

function makeAmpersandFunction(rhs: AmpersandBlockBody): ASTNode
  {ref, typeSuffix, body} .= rhs
  unless ref?
    ref = makeRef "$"
    inplacePrepend ref, body
  if body?.type is "ObjectExpression"
    body = makeLeftHandSideExpression body

  parameters := makeNode {
    type: "Parameters"
    children: typeSuffix ? ["(", ref, typeSuffix, ")"] : [ref]
    names: []
  } as ParametersNode
  expressions := [[' ', body]] satisfies StatementTuple[]
  block := makeNode {
    type: "BlockStatement"
    bare: true
    expressions
    children: [expressions]
    implicitlyReturned: true
  } as BlockStatement

  async := []
  children := [ async, parameters, " =>", block ]

  fn := makeNode {
    type: "ArrowFunction"
    async
    signature:
      modifier: {
        async: !!async
      }
    children
    ref
    block
    parameters
    ampersandBlock: true
    body
  } as ArrowFunction

  if isStatement body
    braceBlock block
    // Prevent unrolling braced block
    fn.ampersandBlock = false
    delete fn.body

  fn

export {
  assignResults
  expressionizeIteration
  insertReturn
  makeAmpersandFunction
  processCoffeeDo
  processFunctions
  processReturn
  skipImplicitArguments
  wrapIterationReturningResults
}
