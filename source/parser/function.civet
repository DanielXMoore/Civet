import type {
  ASTLeaf
  ASTNode
  ASTNodeObject
  BindingIdentifier
  BlockStatement
  BreakStatement
  CallExpression
  Children
  Declaration
  ForStatement
  FunctionNode
  IterationExpression
  IterationFamily
  IterationStatement
  Parameter
  ParametersNode
  ReturnTypeAnnotation
  StatementTuple
  SwitchStatement
  TypeArgument
  TypeArguments
  TypeIdentifier
  TypeLiteral
  TypeNode
  Whitespace
} from ./types.civet

import {
  braceBlock
  getIndent
  blockContainingStatement
  makeEmptyBlock
} from ./block.civet

import {
  gatherBindingCode
} from ./binding.civet

import {
  expressionizeComptime
} from ./comptime.civet

import {
  getHelperRef
} from ./helper.civet

import {
  findAncestor
  findChildIndex
  gatherNodes
  gatherRecursive
  gatherRecursiveAll
  gatherRecursiveWithinFunction
  type Predicate
} from ./traversal.civet

import {
  addParentPointers
  assert
  convertOptionalType
  deepCopy
  getTrimmingSpace
  hasAwait
  hasTrailingComment
  hasYield
  inplacePrepend
  isEmptyBareBlock
  isExit
  isFunction
  isLoopStatement
  isStatement
  isWhitespaceOrEmpty
  makeLeftHandSideExpression
  makeNode
  replaceNode
  startsWithPredicate
  trimFirstSpace
  updateParentPointers
  wrapIIFE
  wrapWithReturn
} from ./util.civet

import {
  makeRef
} from ./ref.civet

// Extract actual TypeArgument nodes from an array/node that includes them
function getTypeArguments(args: ASTNode): TypeArgument[]
  while args is like {args}
    args = args.args as ASTNode
  unless Array.isArray args
    throw new Error "getTypeArguments could not find relevant array"
  args.filter (is like {type: "TypeArgument"})

function isVoidType(t?: TypeNode): boolean
  t is like { type: "TypeLiteral", t: { type: "VoidType" } }

function isPromiseType(t?: TypeNode): t is TypeIdentifier
  t is like { type: "TypeIdentifier", raw: "Promise" }

function isPromiseVoidType(t?: TypeNode): boolean
  return false unless isPromiseType t
  args := getTypeArguments t.args?.args
  (and)
    args# is 1
    isVoidType args[0].t

function isGeneratorVoidType(t?: TypeNode): boolean
  let args: TypeArgument[]
  (and)
    t?.type is "TypeIdentifier"
    t.raw is "Iterator" or t.raw is "Generator"
    (args = getTypeArguments t.args?.args)# >= 2
    isVoidType args[1].t

function isAsyncGeneratorVoidType(t?: TypeNode): boolean
  let args: TypeArgument[]
  (and)
    t?.type is "TypeIdentifier"
    t.raw is "AsyncIterator" or t.raw is "AsyncGenerator"
    (args = getTypeArguments t.args?.args)# >= 2
    isVoidType args[1].t

function wrapTypeInPromise(t: TypeNode): TypeNode
  return t if isPromiseType t
  // Use raw = "Promise" so that Civet thinks this is a Promise wrapper
  wrapTypeInApplication t, getHelperRef("AutoPromise"), "Promise"

function wrapTypeInApplication(t: TypeNode, id: ASTNode, raw?: string): TypeNode
  ws := getTrimmingSpace t
  t = trimFirstSpace(t) as TypeNode
  innerArgs: TypeArgument[] := [{
    type: "TypeArgument"
    ts: true
    t
    children: [t]
  }]
  args: TypeArguments := {
    type: "TypeArguments"
    ts: true
    args: innerArgs
    children: ["<", innerArgs, ">"]
  }
  unless raw?
    unless id <? "string"
      throw new Error "wrapTypeInApplication requires string id or raw argument"
    raw = id
  {
    type: "TypeIdentifier"
    raw
    args
    children: [ws, id, args]
  }

// Add implicit block unless followed by a method/function of the same name.
function implicitFunctionBlock(f): void
  if (f.abstract or f.block or f.signature?.optional) return

  { name, parent } := f
  ancestor .= parent
  child .= f
  if ancestor?.type is "ExportDeclaration"
    child = ancestor
    ancestor = ancestor.parent
  expressions := ancestor?.expressions ?? ancestor?.elements
  currentIndex := expressions?.findIndex [, def] => def is child
  following .= currentIndex >= 0 and expressions[currentIndex + 1]?.[1]
  following = following.declaration if following?.type is 'ExportDeclaration'

  if f.type is following?.type and name? is following.name
    f.ts = true
  else
    block := makeEmptyBlock()
    block.parent = f
    f.block = block
    f.children.push(block)
    f.ts = false

function processReturn(f: FunctionNode, implicitReturns: boolean): void
  { returnType } .= f.signature
  if returnType and returnType.optional
    convertOptionalType returnType

  if not processReturnValue(f) and implicitReturns
    { signature, block } := f
    { modifier, name, returnType } := signature
    { async, generator, set } := modifier
    isMethod := f.type is "MethodDefinition"
    isConstructor := isMethod and name is "constructor"
    isVoid := (or)
      generator
      isVoidType returnType?.t
      (and)
        async
        isPromiseVoidType returnType?.t

    if block?.type is "BlockStatement"
      if isVoid or set or isConstructor
        if block.bare and block.implicitlyReturned
          braceBlock block
      else
        unless block.implicitlyReturned
          insertReturn(block)

/**
 * Support for `return.value` and `return =`
 * for changing automatic return value of function.
 * Returns whether any present (so shouldn't do implicit return).
 */
function processReturnValue(func: FunctionNode)
  { block } := func
  values := gatherRecursiveWithinFunction block, .type is "ReturnValue"
  return false unless values#

  ref := makeRef "ret"

  let declaration
  for each value of values
    value.children = [ref]

    // Check whether return.value already declared within this function
    { ancestor, child } := findAncestor
      value
      &.type is "Declaration"
      isFunction
    declaration ??= child if ancestor  // remember binding

  // Compute default return type
  returnType: ReturnTypeAnnotation? .= func.returnType ?? func.signature?.returnType
  if returnType
    { t } := returnType
    switch t.type
      "TypePredicate"
        token := {token: "boolean"} as ASTLeaf
        literal: TypeLiteral :=
          type: "TypeLiteral"
          t: token
          children: [token]
        returnType =
          type: "ReturnTypeAnnotation"
          ts: true
          t: literal
          children: [": ", literal]
      "TypeAsserts"
        returnType = undefined
  if returnType
    returnType = deepCopy returnType
    addParentPointers returnType
    if func.signature.modifier.async
      replaceNode
        returnType.t
        makeNode wrapTypeInApplication returnType.t, "Awaited"
        returnType

  // Modify existing declaration, or add declaration of return.value after {
  if declaration
    unless declaration.typeSuffix?
      declaration.children[1] = declaration.typeSuffix = returnType
  else
    block.expressions.unshift [
      getIndent block.expressions[0]
      makeNode
        type: "Declaration"
        children: ["let ", ref, returnType]
        names: []
      ";"
    ]

  // Transform existing `return` -> `return ret`
  gatherRecursiveWithinFunction block,
    (r) => r.type is "ReturnStatement" and not r.expression
  .forEach (r) =>
    r.expression = ref
    r.children.splice -1, 1, " ", ref

  // Implicit return before }
  unless block.children.-2?.type is "ReturnStatement"
    indent := getIndent block.expressions.-1
    block.expressions.push [
      indent
      wrapWithReturn ref, block, not indent
    ]

  return true

function patternAsValue(pattern: ASTNodeObject): ASTNode
  switch pattern.type
    when "ArrayBindingPattern"
      children := [...pattern.children]
      index := children.indexOf pattern.elements
      if (index < 0) throw new Error("failed to find elements in ArrayBindingPattern")
      elements := children[index] = pattern.elements.map patternAsValue
      { ...pattern, elements, children }
    when "ObjectBindingPattern"
      children := [...pattern.children]
      index := children.indexOf pattern.properties
      if (index < 0) throw new Error("failed to find properties in ArrayBindingPattern")
      properties := children[index] = pattern.properties.map patternAsValue
      { ...pattern, properties, children }
    when "BindingProperty"
      let children: Children
      // { name: value } = ... declares value, not name
      if pattern.value?.type is "Identifier"
        children = [ pattern.value, pattern.delim ]
        // Check for leading whitespace
        if isWhitespaceOrEmpty pattern.children[0]
          children.unshift pattern.children[0]
      else
        children = [...pattern.children]
        if pattern.initializer?
          index := children.indexOf pattern.initializer
          assert.notEqual index, -1, "failed to find initializer in BindingElement"
          children.splice index, 1
        if pattern.value?
          children = children.map & is pattern.value ?
            patternAsValue pattern.value : &
      { ...pattern, children }
    when "AtBindingProperty"
      children := [...pattern.children]
      if pattern.initializer?
        index := children.indexOf pattern.initializer
        assert.notEqual index, -1, "failed to find initializer in AtBindingProperty"
        children.splice index, 1
      { ...pattern, children }
    when "BindingElement"
      children := [...pattern.children]
      if pattern.initializer?
        index := children.indexOf pattern.initializer
        assert.notEqual index, -1, "failed to find initializer in BindingElement"
        children.splice index, 1
      index := children.indexOf pattern.binding
      assert.notEqual index, -1, "failed to find binding in BindingElement"
      children[index] = patternAsValue pattern.binding
      { ...pattern, children }
    else
      pattern

/**
Find all bound variables in a pattern and return as an array
Example: {x: [, y], z} -> [y, z]
*/
function patternBindings(pattern: ASTNodeObject): BindingIdentifier[]
  bindings: BindingIdentifier[] := []
  recurse pattern
  return bindings

  function recurse(pattern: ASTNodeObject): void
    switch pattern.type
      when "ArrayBindingPattern"
        for each element of pattern.elements
          recurse element
      when "ObjectBindingPattern"
        for each property of pattern.properties
          recurse property
      when "BindingElement"
        recurse pattern.binding
      when "BindingProperty"
        recurse pattern.value ?? pattern.name
      when "Binding"
        recurse pattern.pattern
      when "Identifier", "AtBinding"
        bindings.push pattern

// NOTE: this is almost the same as insertReturn but doesn't remove `breaks` in `when` and
// does construct an else clause pushing undefined in if statements that lack them
// and adds to the beginning and the end of the expression's children.
// Maybe these insertion modifications can be refactored to be more DRY eventually.
function assignResults(node: StatementTuple[] | ASTNode, collect: (node: ASTNode) => ASTNode): void
  if (!node) return
  // TODO: unify this with the `exp` switch
  switch node.type
    case "BlockStatement":
      if node.expressions.length
        assignResults(node.expressions.-1, collect)
      else
        node.expressions.push(["", collect("void 0"), ";"])
      return
    case "CaseBlock":
      node.clauses.forEach (clause) =>
        assignResults(clause, collect)
      return
    when "WhenClause", "DefaultClause", "PatternClause"
      assignResults(node.block, collect)
      return

  return unless Array.isArray node
  [, exp, semi] .= node
  return if semi?.type is "SemicolonDelimiter"
  return unless exp
  return if isExit exp

  exp = exp as ASTNodeObject
  outer := exp
  if exp.type is "LabelledStatement"
    exp = exp.statement

  switch exp.type
    when "BreakStatement", "ContinueStatement", "DebuggerStatement", "EmptyStatement", "ReturnStatement", "ThrowStatement"
      return
    when "Declaration"
      value := if exp.bindings?.#
        patternAsValue(exp.bindings.-1.pattern)
      else
        "void 0"
      exp.children.push([
        "", [";", collect(value) ]
      ])
      return
    when "FunctionExpression"
      if exp.id
        exp.children.push [
          "", [";", collect(exp.id)]
        ]
        return
      /* c8 ignore next 3 */
      // This is currently never hit because anonymous FunctionExpressions are already wrapped in parens by this point
      // Add return in normal way for functions without ids
      break
    when "ForStatement", "IterationStatement", "DoStatement", "ComptimeStatement"
      wrapIterationReturningResults exp, collect
      return
    when "BlockStatement"
      return if node.expressions.some isExit
      assignResults(exp.expressions[exp.expressions.length - 1], collect)
      return
    when "IfStatement"
      // if block
      assignResults(exp.then, collect)
      if exp.then.bare and not exp.then.semicolon
        exp.then.children.push exp.then.semicolon = ";"

      // else block
      if exp.else
        assignResults(exp.else.block, collect)
      else // Add else block pushing undefined if no else block
        exp.children.push([" else {", collect("void 0"), "}"])
      return
    when "PatternMatchingStatement"
      assignResults(exp.children[0], collect)
      return
    when "SwitchStatement"
      // insert a results.push in each case block
      for each clause of exp.caseBlock.clauses
        assignResults clause, collect
      return
    when "TryStatement"
      // NOTE: CoffeeScript doesn't add a push to an empty catch block but does add if there is any statement in the catch block
      // we always add a push to the catch block
      // NOTE: does not insert a push in the finally block
      for each block of exp.blocks
        assignResults block, collect
      return

  // Don't push if there's a trailing semicolon
  return if node.-1?.type is "SemicolonDelimiter"

  // Insert push wrapping expression
  node[1] = collect(node[1])

// [indent, statement, semicolon]
function insertReturn(node: ASTNode): void
  if (!node) return
  // TODO: unify this with the `exp` switch
  switch node.type
    when "BlockStatement"
      if node.expressions#
        return if node.expressions.some ([, exp]) => isExit exp
        last := node.expressions[node.expressions.length - 1]
        insertReturn(last)
      else
        // NOTE: Kind of hacky but I'm too much of a coward to make `->` add an implicit return
        if node.parent?.type is like "CatchClause", "WhenClause"
          node.expressions.push ["", wrapWithReturn(undefined, node)]
      return
    // NOTE: "CaseClause"s don't get a return statement inserted
    when "WhenClause"
      // Remove inserted `break;` if it hasn't already been removed
      if node.break
        breakIndex := node.children.indexOf node.break
        assert.notEqual breakIndex, -1, "Could not find break in when clause"
        node.children.splice breakIndex, 1
        node.break = undefined
      // Then try to add implicit return
      insertReturn node.block
      unless isExit node.block
        comment := hasTrailingComment node.block.expressions
        node.block.expressions.push [
          comment ? node.block.expressions.-1.0 or "\n" : ""
          wrapWithReturn undefined, node, not comment
        ]
      return
    when "DefaultClause"
      insertReturn(node.block)
      return
  if (!Array.isArray(node)) return

  [, exp, semi] .= node
  return if semi?.type is "SemicolonDelimiter"
  return unless exp
  return if isExit exp

  outer := exp
  if exp.type is "LabelledStatement"
    exp = exp.statement

  switch exp.type
    when "BreakStatement", "ContinueStatement", "DebuggerStatement", "EmptyStatement", "ReturnStatement", "ThrowStatement"
      return
    when "Declaration"
      value := if exp.bindings?.#
        [" ", patternAsValue(exp.bindings.-1.pattern)]
      else
        [] as ASTNode
      parent := outer.parent as BlockStatement?
      index := findChildIndex parent?.expressions, outer
      assert.notEqual index, -1, "Could not find declaration in parent"
      parent!.expressions.splice index+1, 0, ["",
        type: "ReturnStatement"
        expression: value
        children: [
          ";" unless parent!.expressions[index][2] is ";"
          "return"
          value
        ]
        parent: exp
      ]
      braceBlock parent!
      return
    when "FunctionExpression"
      // Add return after function declaration if it has an id to not interfere with hoisting
      if exp.id
        parent := outer.parent as BlockStatement?
        index := findChildIndex parent?.expressions, outer
        assert.notEqual index, -1, "Could not find function declaration in parent"
        parent!.expressions.splice index+1, 0, ["",
          wrapWithReturn exp.id, exp, true
        ]
        braceBlock parent!
        return
      /* c8 ignore next 3 */
      // This is currently never hit because anonymous FunctionExpressions are already wrapped in parens by this point
      // Add return in normal way for functions without ids
      break
    when "ForStatement", "IterationStatement", "DoStatement", "ComptimeStatement"
      wrapIterationReturningResults exp
      return
    when "BlockStatement"
      insertReturn(exp.expressions[exp.expressions.length - 1])
      return
    when "IfStatement"
      // if block
      insertReturn(exp.then)
      // else block
      if (exp.else) insertReturn(exp.else.block)
      // Add explicit return after if block if no else block
      else exp.children.push ["",
        // NOTE: add a prefixed semicolon because the if block may not be braced
        wrapWithReturn undefined, exp, true
      ]
      return
    when "PatternMatchingStatement"
      insertReturn exp.children[0]
      return
    when "SwitchStatement"
      // insert a return in each when/else/default block
      // case blocks don't get implicit returns
      for each clause of exp.caseBlock.clauses
        insertReturn clause
      return
    when "TryStatement"
      for each block of exp.blocks
        insertReturn block
      // NOTE: do not insert a return in the finally block
      return

  // Don't add return if there's a trailing semicolon
  return if node.-1?.type is "SemicolonDelimiter"

  // Insert return after indentation and before expression
  node[1] = wrapWithReturn node[1]

// Process `break with` and `continue with` within a loop statement
// that already has a resultsRef attribute.
// Returns whether the resultsRef might be modified, so should use let.
function processBreakContinueWith(statement: IterationStatement | ForStatement): boolean
  changed .= false
  for control of gatherRecursiveWithinFunction(statement.block,
    .type is "BreakStatement" or .type is "ContinueStatement"
  )
    function controlName: string
      switch control.type 
        when "BreakStatement"
          "break"
        when "ContinueStatement"
          "continue"

    // break with <expr> overwrites the results of the loop
    // continue with <expr> appends to the results of the loop
    if control.with
      if control.label
        continue unless statement.parent is like {
          type: "LabelledStatement"
          label: { name: ^control.label.name }
        }
      else
        // Verify there wasn't another loop or switch in between
        {ancestor} := findAncestor control,
          (s: ASTNodeObject): s is IterationStatement | ForStatement | SwitchStatement => (or)
            s is statement
            s.type is "IterationStatement"
            s.type is "ForStatement"
            s.type is "SwitchStatement" and control.type is "BreakStatement"
        continue unless ancestor is statement

      control.children.unshift
        if control.type is "BreakStatement"
          changed = true
          [statement.resultsRef, ' =', control.with, ';']
        else // control.type is "ContinueStatement"
          [statement.resultsRef, '.push(', trimFirstSpace(control.with), ');']
      updateParentPointers control.with, control

      // Remove warning associated with break/continue with
      i := control.children.findIndex ?.type is "Error"
      control.children.splice i, 1 if i >= 0

      // Brace containing block now that it has multiple statements
      block := control.parent
      unless block?.type is "BlockStatement"
        throw new Error `Expected parent of ${controlName()} to be BlockStatement`
      braceBlock block
  changed

function wrapIterationReturningResults(
  statement: IterationFamily,
  collect?: (node: ASTNode) => ASTNode
): void
  if statement.type is "DoStatement" or statement.type is "ComptimeStatement"
    let results: ASTNode
    if statement.type is "ComptimeStatement"
      // Always wrap comptime in IIFE
      insertReturn statement.block
      expression := expressionizeComptime statement
      replaceNode statement, expression
      parent := expression.parent as BlockStatement?
      results = parent?.expressions?[findChildIndex parent?.expressions, expression]
      assert.equal (results as StatementTuple)?[1], expression,
        "comptime statement found outside statement tuple"
    else
      results = statement.block
    if collect
      assignResults results, collect
    else
      insertReturn results
    return

  // This may have already been called by `braceBlock`
  // to implement `implicitlyReturned`
  return if statement.resultsRef?

  resultsRef := statement.resultsRef = makeRef "results"

  declaration := iterationDeclaration statement
  { ancestor, child } := findAncestor statement, .type is "BlockStatement"
  assert.notNull ancestor, `Could not find block containing ${statement.type}`
  index := findChildIndex ancestor.expressions, child
  assert.notEqual index, -1, `Could not find ${statement.type} in containing block`
  iterationTuple := ancestor.expressions[index]
  ancestor.expressions.splice index, 0, [iterationTuple[0], declaration, ";"]
  iterationTuple[0] = '' // steal indentation from loop
  braceBlock ancestor

  if collect
    statement.children.push collect(resultsRef)
  else
    statement.children.push(";return ", resultsRef, ";")

// Creates and returns a declaration for the results of a loop,
// so that the caller can add it to the containing block.
// Also wraps the body to collect the loop results.
function iterationDeclaration(statement: IterationStatement | ForStatement)
  { resultsRef, block } := statement

  reduction := statement.type is "ForStatement" and statement.reduction
  decl: "const" | "let" .= reduction ? "let" : "const"
  if statement.type is "IterationStatement" or statement.type is "ForStatement"
    if processBreakContinueWith statement
      decl = "let"

  // Check for infinite loops with only `break with`, no plain `break`
  breakWithOnly := (and)
    decl is "let"
    isLoopStatement statement
    gatherRecursive(block,
      (s): s is BreakStatement => s.type is "BreakStatement" and not s.with,
      (s) => isFunction(s) or s.type is "IterationStatement")# is 0

  declaration: Declaration := {
    type: "Declaration"
    children: [decl, " ", resultsRef]
    decl
    names: []
    bindings: []
  }

  if reduction
    declaration.children.push "=" +
      switch reduction.subtype
        when "some" then "false"
        when "every" then "true"
        when "min" then "Infinity"
        when "max" then "-Infinity"
        when "product" then "1"
        when "join" then '""'
        else "0"
  else if statement.object
    declaration.children.push "={}"
  else
    // Assign [] directly only in const case, so TypeScript can better infer
    if decl is "const"
      declaration.children.push "=[]"
    else // decl is "let"
      declaration.children.push ";", resultsRef, "=[]" unless breakWithOnly

  // insert `results.push` to gather results array
  // TODO: real ast nodes
  unless breakWithOnly
    if iterationDefaultBody statement
      return declaration
    unless block.empty
      assignResults block, (node) =>
        return [ "Object.assign(", resultsRef, ",", node, ")" ] if statement.object
        return [ resultsRef, ".push(", node, ")" ] unless reduction
        switch reduction.subtype
          when "some"
            [ "if (", node, ") {", resultsRef, " = true; break}" ]
          when "every"
            [ "if (!", makeLeftHandSideExpression(node), ") {",
              resultsRef, " = false; break}" ]
          when "count"
            [ "if (", node, ") ++", resultsRef ]
          when "sum", "join" then [ resultsRef, " += ", node ]
          when "product" then [ resultsRef, " *= ", node ]
          when "min" then [ resultsRef, " = Math.min(", resultsRef, ", ", node, ")" ]
          when "max" then [ resultsRef, " = Math.max(", resultsRef, ", ", node, ")" ]

  declaration

/**
Add default body to iteration statement with empty body.
Returns true if the block was filled with a reduction-specific body.
*/
function iterationDefaultBody(statement: IterationStatement | ForStatement): boolean
  { block, resultsRef } := statement
  return false unless block.empty
  reduction := statement.type is "ForStatement" and statement.reduction

  function fillBlock(expression: StatementTuple)
    if block.expressions.-1 is like [, {type: "EmptyStatement", implicit: true}, ...]
      block.expressions.pop()
    block.expressions.push expression
    block.empty = false
    braceBlock block

  if reduction
    switch reduction.subtype
      when "some"
        fillBlock [ "", [ resultsRef, " = true; break" ] ]
        block.empty = false
        braceBlock block
        return true
      when "every"
        fillBlock [ "", [ resultsRef, " = false; break" ] ]
        block.empty = false
        braceBlock block
        return true
      when "count"
        fillBlock [ "", [ "++", resultsRef ] ]
        block.empty = false
        braceBlock block
        return true

  if statement.type is "ForStatement" and
     statement.declaration?.type is "ForDeclaration"
    // For regular loops and object comprehensions, use entire pattern
    // For reductions, use the first binding
    if reduction
      bindings := patternBindings statement.declaration.binding.pattern
      if bindings#
        fillBlock [ "", bindings[0] ]
        for binding of bindings[1..]
          binding.children.unshift
            type: "Error"
            subtype: "Warning"
            message: "Ignored binding in reduction loop with implicit body"
      else
        fillBlock [ "",
          type: "Error"
          message: "Empty binding pattern in reduction loop with implicit body"
        ]
    else
      fillBlock [ "", patternAsValue statement.declaration.binding.pattern ]
    block.empty = false

  return false

function processParams(f): void
  { type, parameters, block } := f
  isConstructor := f.name is 'constructor'

  // Check for singleton TypeParameters <Foo> before arrow function,
  // which TypeScript (in tsx mode) treats like JSX; replace with <Foo,>
  if type is "ArrowFunction" and parameters and parameters.tp and parameters.tp.parameters# is 1
    parameters.tp.parameters.push(",")

  return unless block
  { expressions } := block
  return unless expressions

  let indent: string
  unless expressions#
    indent = ""
  else
    indent = expressions[0][0]

  [splices, thisAssignments] := gatherBindingCode parameters,
    injectParamProps: isConstructor

  // `@(@x: number)` adds `x: number` declaration to class body
  if isConstructor
    {ancestor} := findAncestor f, .type is "ClassExpression"
    if ancestor?
      fields := gatherRecursiveWithinFunction ancestor, .type is "FieldDefinition"
      .map .id
      .filter (is like {type: "Identifier"})
      .map .name
      |> new Set
      classExpressions := ancestor!.body.expressions
      index .= findChildIndex classExpressions, f
      assert.notEqual index, -1, "Could not find constructor in class"
      // Put fields before all constructor overloads so they remain consecutive
      index-- while classExpressions[index-1]?[1] is like {type: "MethodDefinition", name: "constructor"}
      fStatement := classExpressions[index]
      for each parameter of gatherRecursive parameters, .type is "Parameter"
        {accessModifier} := parameter
        continue unless accessModifier or parameter.typeSuffix
        for each binding of gatherRecursive parameter, .type is "AtBinding"
          // TODO: Handle typeSuffix of entire complex parameter pattern
          // (Currently just handle `@prop ::` individual typing,
          // where parent is AtBindingProperty or BindingElement,
          // or when the parent is the whole Parameter.)
          typeSuffix := binding.parent?.typeSuffix
          continue unless accessModifier or typeSuffix
          // Remove accessModifier from parameter if we lift it to a field
          if parameter.accessModifier
            replaceNode parameter.accessModifier, undefined
            parameter.accessModifier = undefined
          id := binding.ref.id
          continue if fields.has id
          classExpressions.splice index++, 0, [fStatement[0], {
            type: "FieldDefinition"
            id
            typeSuffix
            children: [accessModifier, id, typeSuffix]
          }, ";"]
          // Only the first definition gets an indent, stolen from fStatement
          fStatement[0] = ""

  delimiter :=
    type: "SemicolonDelimiter"
    children: [";"]

  prefix := splices
    .map (s) => ["let ", s]
    .concat(thisAssignments)
    .map((s) => s.type
      ? {
        // TODO: figure out how to get JS only statement tuples
        ...s,
        children: [indent, ...s.children, delimiter]
      }
      : [indent, s, delimiter]
    )

  return unless prefix#
  // In constructor definition, insert prefix after first super() call
  if isConstructor
    superCalls := gatherNodes expressions,
      (is like {type: "CallExpression", children: [ {token: "super"}, ... ]}) as Predicate<CallExpression>
    if superCalls#
      {child} := findAncestor superCalls[0], (is block)
      index := findChildIndex expressions, child
      if index < 0
        throw new Error("Could not find super call within top-level expressions")
      expressions.splice(index + 1, 0, ...prefix)
      return
  expressions.unshift(...prefix)
  braceBlock block

function processSignature(f: FunctionNode): void
  {block, signature} := f

  if not f.async?# and hasAwait(block)
    if f.async?
      f.async.push "async "
      signature.modifier.async = true
    else
      for each a of gatherRecursiveWithinFunction block, .type is "Await"
        i := findChildIndex a.parent, a
        // i+1 because after "await" we have a consistent location in sourcemap
        a.parent!.children.splice i+1, 0,
          type: "Error"
          message: `await invalid in ${signature.modifier.get ? "getter" : signature.modifier.set ? "setter" : signature.name}` // name likely constructor

  if not f.generator?# and hasYield(block)
    if f.generator?
      f.generator.push "*"
      signature.modifier.generator = true
    else
      for each y of gatherRecursiveWithinFunction block, .type is "YieldExpression"
        i := y.children.findIndex .type is "Yield"
        // i+1 because after "yield" we have a consistent location in sourcemap
        y.children.splice i+1, 0,
          type: "Error"
          message: `yield invalid in ${f.type is "ArrowFunction" ? "=> arrow function" : signature.modifier.get ? "getter" : signature.modifier.set ? "setter" : signature.name}` // name likely constructor

  if signature.modifier.async and not signature.modifier.generator and
     signature.returnType and not isPromiseType signature.returnType.t
    replaceNode signature.returnType.t, wrapTypeInPromise signature.returnType.t

function processFunctions(statements, config): void
  for each f of gatherRecursiveAll statements, .type is "FunctionExpression" or .type is "ArrowFunction" or .type is "MethodDefinition"
    if f.type is "FunctionExpression" or f.type is "MethodDefinition"
      implicitFunctionBlock(f)
    processSignature(f)
    processParams(f)
    processReturn(f, config.implicitReturns)

function expressionizeIteration(exp: IterationExpression): void
  { async, generator, block, children, statement } .= exp
  i := children.indexOf statement
  if i < 0
    throw new Error "Could not find iteration statement in iteration expression"

  if statement.type is "DoStatement" or statement.type is "ComptimeStatement"
    // Just wrap with IIFE; insertReturn will apply to the resulting function
    children.splice(i, 1, wrapIIFE([["", statement, undefined]], async, generator))
    updateParentPointers exp
    return

  let statements: StatementTuple[]
  if generator
    if (statement as ForStatement).reduction
      children.unshift
        type: "Error"
        message: `Cannot use reduction (${(statement as ForStatement).reduction!.subtype}) with generators`

    iterationDefaultBody statement

    assignResults block, (node) =>
      type: "YieldExpression"
      expression: node
      children:
        . type: "Yield"
          token: "yield "
        . node

    statements =
      . ["", statement]
  else
    resultsRef := statement.resultsRef ??= makeRef "results"

    declaration := iterationDeclaration statement

    statements =
      . ["", declaration, ";"]
      . ["", statement, ";" if statement.block.bare]
      . ["", resultsRef]

  // Don't need IIFE if iteration expression is at the top level of a block
  let done
  if not async
    if { block: parentBlock, index } := blockContainingStatement exp
      statements[0][0] = parentBlock.expressions[index][0] // inherit indentation
      parentBlock.expressions[index..index] = statements
      updateParentPointers parentBlock
      braceBlock parentBlock
      done = true
  unless done
    // Wrap with IIFE
    statements.-1.1 = wrapWithReturn(statements.-1.1) unless generator
    children.splice i, 1, wrapIIFE(statements, async, generator)
    updateParentPointers exp

function processIterationExpressions(statements: ASTNode): void
  for each s of gatherRecursiveAll statements, .type is "IterationExpression"
    expressionizeIteration s

/**
Utility function to check if an implicit function application should be skipped
based on the shape of the arguments.

Don't treat as call if this is a postfix for/while/until/if/unless
*/
function skipImplicitArguments(args: ASTNode[]): boolean
  if args.length is 1
    arg0 .= args[0]
    if arg0.type is "Argument"
      arg0 = arg0.expression

    if arg0.type is "StatementExpression"
      arg0 = arg0.statement

    return (and)
      arg0.type is "IterationExpression"
      arg0.subtype !== "DoStatement"
      !arg0.async
      isEmptyBareBlock arg0.block

  return false

/** Transform */
function processCoffeeDo(ws: Whitespace, expression: ASTNode): ASTNode
  ws = trimFirstSpace(ws) as Whitespace
  args: ASTNode[] := []
  if expression is like {type: "ArrowFunction"}, {type: "FunctionExpression"}
    { parameters } := expression
    // Move initializers to arguments
    newParameters := { ...parameters, children:
      for each let parameter of parameters.children
        if parameter is like {type: "Parameter"}
          if initializer := parameter.initializer
            args.push initializer.expression, parameter.delim
            parameter = {
              ...parameter
              initializer: undefined
              children: parameter.children.filter (is not initializer)
            }
          else
            args.push parameter.children.filter
              (is not (parameter as Parameter).typeSuffix)
        parameter
    }
    expression = {
      ...expression
      parameters: newParameters
      children: expression.children.map & is parameters ? newParameters : &
    }

  type: "CallExpression"
  children: [
    ws
    makeLeftHandSideExpression expression
    {
      type: "Call"
      args
      children: ["(", args, ")"]
    }
  ]

function makeAmpersandFunction(rhs: AmpersandBlockBody): ASTNode
  {ref, typeSuffix, body} .= rhs
  unless ref?
    ref = makeRef "$"
    inplacePrepend ref, body
  if startsWithPredicate(body, .type is "ObjectExpression")
    body = makeLeftHandSideExpression body

  parameters := makeNode {
    type: "Parameters"
    children: typeSuffix ? ["(", ref, typeSuffix, ")"] : [ref]
    names: []
  } as ParametersNode
  expressions := [[' ', body]] satisfies StatementTuple[]
  block := makeNode {
    type: "BlockStatement"
    bare: true
    expressions
    children: [expressions]
    implicitlyReturned: true
  } as BlockStatement

  async := []
  children := [ async, parameters, " =>", block ]

  fn := makeNode {
    type: "ArrowFunction"
    async
    signature:
      modifier: {
        async: !!async.length
      }
    children
    ref
    block
    parameters
    ampersandBlock: true
    body
  } as ArrowFunction

  if isStatement body
    braceBlock block
    // Prevent unrolling braced block
    fn.ampersandBlock = false

  // Prevent unrolling if placeholder is used multiple times
  // (to avoid evaluating the argument twice)
  if gatherRecursiveWithinFunction(
       block
       (is ref) as (x: ASTNode) => x is Ref
     )# > 1
    fn.ampersandBlock = false

  fn

export {
  assignResults
  insertReturn
  makeAmpersandFunction
  processCoffeeDo
  processFunctions
  processIterationExpressions
  processReturn
  skipImplicitArguments
  wrapIterationReturningResults
  wrapTypeInPromise
}
