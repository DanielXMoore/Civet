import type {
  ASTNodeObject
} from "./types.civet"

function makeRef(base = "ref", id = base): ASTRef
  return {
    type: "Ref",
    base,
    id,
  }

/**
 * Returns a new ref if the expression needs a ref (not a simple value).
 * Otherwise returns undefined.
 */
function needsRef(expression: ASTNodeObject, base = "ref")
  switch (expression.type) {
    case "Ref":
    case "Identifier":
    case "Literal":
      return
  }
  return makeRef(base)

// Transform into a ref if needed
function maybeRef(exp: ASTNode, base: string = "ref"): ASTNode
  if (!needsRef(exp)) return exp
  return makeRef(base)

export {
  makeRef
  maybeRef
  needsRef
}
