import type {
  ASTNode
  ASTRef
  BlockStatement
  Condition
  ElseClause
  ParenthesizedExpression
  ParseRule
  PatternClause
  PatternExpression
  StatementTuple
  SwitchStatement
} from ./types.civet

import {
  replaceNode
} from ./lib.civet

import {
  gatherRecursiveAll
} from ./traversal.civet

import {
  flatJoin
  isExit
  makeLeftHandSideExpression
  makeNode
  updateParentPointers
} from ./util.civet

import {
  makeRef
  maybeRefAssignment
} from ./ref.civet

import {
  blockWithPrefix
  braceBlock
} from ./block.civet

import {
  gatherBindingCode
} from ./binding.civet

import {
  processBinaryOpExpression
} from ./op.civet

import {
  getHelperRef
} from ./helper.civet

import {
  ReservedWord
} from ../parser.hera
declare var ReservedWord: ParseRule

function processPatternTest(lhs: ASTNode, patterns: PatternExpression[]): ASTNode
  { ref, hoistDec, refAssignmentComma } := maybeRefAssignment lhs, "m"

  conditionExpression := patterns
  .map getPatternConditions ., ref
  .map flatJoin ., " && "
  |> flatJoin ., " || "

  makeLeftHandSideExpression {
    type: "PatternTest"
    hoistDec
    children: [
      ...refAssignmentComma
      conditionExpression
    ]
  }

function processPatternMatching(statements: ASTNode): void
  gatherRecursiveAll(statements, .type is "SwitchStatement")
    .forEach (s: SwitchStatement) =>
      { caseBlock } := s
      { clauses } := caseBlock

      // Remove inserted `break;` in `when` clauses that don't need them
      for each c of clauses
        if c.type is "WhenClause" and c.break
          if isExit c.block
            c.children.splice c.children.indexOf(c.break), 1
            c.break = undefined

      errors .= false
      isPattern .= false
      if clauses.some .type is "PatternClause"
        isPattern = true
        for each c of clauses
          // else/default clause is ok
          unless c.type is "PatternClause" or c.type is "DefaultClause"
            errors = true
            c.children.push
              type: "Error"
              message: "Can't mix pattern matching and non-pattern matching clauses"

      return if errors or !isPattern

      { condition } .= s
      if condition.type is "ParenthesizedExpression"
        // Unwrap parenthesized expression
        condition = condition.expression as ParenthesizedExpression

      { ref, hoistDec, refAssignmentComma } .= maybeRefAssignment condition, "m"
      root: ASTNode[] := []
      prev .= root
      let e?: ElseClause

      l := clauses.length
      for each c, i of clauses
        if c.type is "DefaultClause"
          if e?
            replaceNode e.block, c.block, e
          else
            prev.push c.block
          break

        { patterns, block } .= c as PatternClause
        pattern .= patterns[0]

        // TODO: multiple binding patterns

        conditionExpression: ASTNode[] := patterns
        .map getPatternConditions ., ref
        .map flatJoin ., " && "
        |> flatJoin ., " || "

        condition: Condition := makeNode {
          type: "ParenthesizedExpression"
          children: ["(", ...refAssignmentComma, conditionExpression, ")"]
          expression: conditionExpression
        }

        braceBlock block
        block = blockWithPrefix getPatternBlockPrefix(pattern, ref), block

        // Insert else if there are more branches
        if i < l - 1
          expressions: StatementTuple[] := []
          block := makeNode {
            type: "BlockStatement"
            expressions
            children: [expressions]
            bare: true
          } satisfies BlockStatement
          e = makeNode {
            type: "ElseClause"
            block
            children: ["\n", "else ", block]
          } satisfies ElseClause
        else
          e = undefined

        prev.push ["", makeNode {
          type: "IfStatement"
          children: ["if", condition, block, e]
          then: block
          else: e
          hoistDec
        }]
        hoistDec = undefined
        refAssignmentComma = []
        prev = e.block.expressions if e?

      s.type = "PatternMatchingStatement"
      s.children = root
      updateParentPointers s

function getPatternConditions(
  pattern: PatternExpression,
  ref: ASTNode,
  conditions: ASTNode[] = [],
): ASTNode[] {
  if (pattern.rest) return conditions // No conditions for rest elements

  switch (pattern.type) {
    case "ArrayBindingPattern": {
      const { elements, length } = pattern,
        hasRest = elements.some((e) => e.rest),
        l = (length - +hasRest).toString(),
        lengthCheck = hasRest
        ? [ref, ".length >= ", l]
        : [getHelperRef("len"), "(", ref, ", ", l, ")"]

      conditions.push(
        ["Array.isArray(", ref, ")"],
        lengthCheck,
      )

      // recursively collect nested conditions
      elements.forEach(({ children: [, e] }, i) => {
        const subRef = [ref, "[", i.toString(), "]"]
        getPatternConditions(e, subRef, conditions)
      })

      // collect post rest conditions
      const { blockPrefix } = pattern
      if (blockPrefix) {
        const postElements = blockPrefix.children[1],
          { length: postLength } = postElements

        postElements.forEach(({ children: [, e] }, i) => {
          const subRef = [ref, "[", ref, ".length - ", (postLength + i).toString(), "]"]
          getPatternConditions(e, subRef, conditions)
        })
      }

      break
    }
    case "ObjectBindingPattern": {
      conditions.push(
        ["typeof ", ref, " === 'object'"],
        [ref, " != null"],
      )

      pattern.properties.forEach((p) => {
        switch (p.type) {
          case "PinProperty":
          case "BindingProperty": {
            const { name, value } = p
            let subRef
            switch (name.type) {
              case "ComputedPropertyName":
                conditions.push([name.expression, " in ", ref])
                subRef = [ref, name]
                break
              case "Literal":
              case "StringLiteral":
              case "NumericLiteral":
                conditions.push([name, " in ", ref])
                subRef = [ref, "[", name, "]"]
                break
              default:
                conditions.push(["'", name, "' in ", ref])
                subRef = [ref, ".", name]
            }

            if (value) {
              getPatternConditions(value, subRef, conditions)
            }

            break
          }
        }
      })

      break
    }
    case "ConditionFragment": {
      let { children } = pattern
      // Add leading space to first binary operation
      if (children.length) {
        let [ first, ...rest ] = children
        let [ ws, ...op ] = first
        ws = [" "].concat(ws)
        first = [ ws, ...op ]
        children = [ first, ...rest ]
      }
      conditions.push(
        processBinaryOpExpression([ref, children])
      )
      break
    }
    case "RegularExpressionLiteral": {
      conditions.push(
        ["typeof ", ref, " === 'string'"],
        [pattern, ".test(", ref, ")"],
      )

      break
    }
    case "PinPattern":
      conditions.push([
        ref,
        " === ",
        pattern.expression,
      ])
      break
    case "Literal":
      conditions.push([
        ref,
        " === ",
        pattern,
      ])
      break
    default:
      break
  }
  return conditions
}

function getPatternBlockPrefix(
  pattern: PatternExpression
  ref: ASTNode
  decl: ASTNode = "const "
  suffix?: ASTNode
): StatementTuple[]?
  switch pattern.type
    when "ArrayBindingPattern"
      return unless pattern.length
    when "ObjectBindingPattern"
      return unless pattern.properties.length
    when "Literal", "RegularExpressionLiteral", "PinPattern", "ConditionFragment"
      return

  // Gather bindings
  [splices, thisAssignments] .= gatherBindingCode(pattern)
  patternBindings := nonMatcherBindings(pattern)

  splices = splices.map (s) => [", ", nonMatcherBindings(s)]
  thisAssignments = thisAssignments.map ['', &, ";"]

  duplicateDeclarations := aggregateDuplicateBindings([patternBindings, splices])

  [
    ['', {
      type: "Declaration"
      children: [decl, patternBindings, suffix, " = ", ref, ...splices]
      names: []
      bindings: [] // avoid implicit return of any bindings
    }, ";"]
    ...thisAssignments
    ...duplicateDeclarations.map ['', &, ";"]
  ]

function elideMatchersFromArrayBindings(elements) {
  return elements.map((el) => {
    // TODO: this isn't unified with the element [ws, e, sep] tuple yet
    if (el.type is "BindingRestElement") {
      return ["", el, undefined]
    }
    const { children: [ws, e, delim] } = el
    switch (e.type) {
      case "Literal":
      case "RegularExpressionLiteral":
      case "StringLiteral":
      case "PinPattern":
        return delim
      default:
        return [ws, nonMatcherBindings(e), delim]
    }
  })
}

function elideMatchersFromPropertyBindings(properties) {
  return properties.map((p) => {
    switch (p.type) {
      case "BindingProperty": {
        const { children, name, value } = p
        const [ws] = children

        switch (value and value.type) {
          when "ArrayBindingPattern", "ObjectBindingPattern"
            bindings := nonMatcherBindings(value)
            return {
              ...p,
              children: [ws, name, bindings && ": ", bindings, p.delim],
            }
          when "Identifier"
            return p
          case "Literal":
          case "RegularExpressionLiteral":
          case "StringLiteral":
          default:
            return {
              ...p,
              children: [ws, name, p.delim],
            }
        }
      }
      case "PinProperty":
      case "BindingRestProperty":
      default:
        return p
    }
  })
}

function nonMatcherBindings(pattern)
  switch pattern.type
    when "ArrayBindingPattern"
      elements := elideMatchersFromArrayBindings(pattern.elements)
      {
        ...pattern
        elements
        children: pattern.children.map & is pattern.elements ? elements : &
      }
    when "PostRestBindingElements"
      const els = elideMatchersFromArrayBindings(pattern.children[1])
      {
        ...pattern,
        children: [
          pattern.children[0],
          els,
          ...pattern.children.slice(2),
        ],
      }
    when "ObjectBindingPattern"
      properties := elideMatchersFromPropertyBindings(pattern.properties)
      {
        ...pattern
        properties
        children: pattern.children.map & is pattern.properties ? properties : &
      }
    else
      pattern

function aggregateDuplicateBindings(bindings) {
  props := gatherRecursiveAll bindings, .type is "BindingProperty"
  arrayBindings := gatherRecursiveAll bindings, .type is "ArrayBindingPattern"

  arrayBindings.forEach (a) =>
    { elements } := a
    elements.forEach (element) =>
      if Array.isArray element
        [, e] := element
        if e.type is "Identifier"
          props.push e
        else if e.type is "BindingRestElement"
          props.push e

  declarations: ASTNode[][] := []

  propsGroupedByName := new Map

  for p of props
    { name, value } := p

    // We do not bind a property that gets matched against
    // an array or object pattern
    if value?.type is like "ArrayBindingPattern", "ObjectBindingPattern"
      continue

    // This is to handle aliased props, non-aliased props, and binding identifiers in arrays
    const key = value?.name or name?.name or name
    if propsGroupedByName.has key
      propsGroupedByName.get(key).push(p)
    else
      propsGroupedByName.set key, [p]

  propsGroupedByName.forEach (shared, key) =>
    return unless key
    // NOTE: Allows pattern matching reserved word keys by binding to inaccessible refs
    // HACK: using the parser's ReservedWord rule here
    if ReservedWord({ fail() { } }, {
      pos: 0,
      input: key,
    })
      shared.forEach (p) =>
        aliasBinding p, makeRef(`_${key}`, key)
      // Don't push declarations for reserved words
      return

    return if shared.length is 1

    // Create a ref alias for each duplicate binding
    refs := shared.map (p) =>
      ref := makeRef(key)
      aliasBinding(p, ref)

      return ref

    // Gather duplicates in an array
    declarations.push
      type: "Declaration"
      children: [
        "const ", key, " = [",
        ...refs.map (r, i) => i is 0 ? r : [", ", r]
        "]"
      ]
      names: []
      bindings: [] // avoid implicit return of any bindings

  return declarations
}

/**
 * Adjust the alias of a binding property, adding an alias if one doesn't exist or
 * replacing an existing alias. This mutates the property in place.
 */
function aliasBinding(p, ref: ASTRef): void
  if p.type is "Identifier"
    // Array element binding
    // TODO: This ignores `name` and `names` properties of Identifier and
    // hackily converts it to a container for a Ref.
    p.children[0] = ref
  else if p.type is "BindingRestElement"
    aliasBinding p.binding, ref
  else if p.value?.type is "Identifier"
    // aliased property binding
    aliasBinding p.value, ref
  else
    // non-aliased property binding
    p.value = ref
    index := p.children.indexOf p.name
    p.children.splice index + 1, 0, ": ", ref

export {
  getPatternConditions
  getPatternBlockPrefix
  nonMatcherBindings
  processPatternMatching
  processPatternTest
}
