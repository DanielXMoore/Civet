export type ASTNode =
  | ASTString
  | Children
  | StatementNode
  | OtherNode
  | undefined

// OtherNode includes BinaryOp which includes certain strings
export type ASTNodeObject = Exclude<StatementNode | OtherNode, string>

/**
* Nodes that represent statements.
*/
export type StatementNode =
  | BlockStatement
  | BreakStatement
  | ContinueStatement
  | DebuggerStatement
  | DeclarationStatement
  | DoStatement
  | ExpressionNode
  | ForStatement
  | IfStatement
  | IterationStatement
  | LabeledStatement
  | ReturnStatement
  | SwitchStatement
  | ThrowStatement
  | TryStatement

/**
* Nodes that represent expressions.
*/
export type ExpressionNode =
  | AssignmentExpression
  | BinaryOp
  | Existence
  | FunctionNode
  | Identifier
  | IterationExpression
  | Literal
  | MethodDefinition
  | NewExpression
  | ParenthesizedExpression
  | PipelineExpression
  | StatementExpression
  | TypeNode
  | UnaryExpression

/**
* Other nodes that aren't statements or expressions.
*/
export type OtherNode =
  | ASTError
  | ASTLeaf
  | ASTRef
  | ASTWrapper
  | AccessStart
  | Call
  | CommentNode
  | Index
  | Initializer
  | Placeholder
  | PropertyAccess

/** @deprecated */
export type ASTNodeBase = ASTNode &
  parent: ASTNodeBase?
  children: Children

export type IsToken = { token: string }
export type IsParent = { children: Children }
export type ASTNodeParent = ASTNodeObject & IsParent
export type Parent = (ASTNodeObject & IsParent)?
export type Children = ASTNode[] & (type?: undefined) & (token?: undefined)
export type ASTString = string & (type?: undefined) & (token?: undefined)

// Wrapper nodes are just for making non-object nodes into objects
// so that they have a parent, needed for e.g. `replaceNode`.
export type ASTWrapper =
  type: "Wrapper"
  children: [ ASTNode ]
  parent?: Parent

export type ASTError =
  type: "Error"
  message: string
  token?: undefined
  parent?: Parent

export type Loc =
  pos: number
  length: number

export type ASTLeaf =
  type?: undefined
  $loc: Loc
  token: string
  parent?: Parent

export type CommentNode =
  type: "Comment"
  $loc: Loc
  token: string
  parent?: Parent

export type BinaryOp = (string &
  special?: never
  relational?: never
  assoc?: never
  type?: undefined
) | (ASTLeaf &
  special?: true
  // The following are allowed only when special is true:
  prec?: string | number | undefined
  assoc?: string?
  call?: ASTNode
  method?: ASTNode
  relational?: boolean
  reversed?: boolean
  negated?: boolean
  asConst?: boolean
)

export type AssignmentExpression
  type: "AssignmentExpression"
  children: Children
  parent?: Parent
  names: null
  lhs: AssignmentExpressionLHS
  assigned: ???
  exp: ExpressionNode

export type AssignmentExpressionLHS = [undefined, ASTNode, [WSNode, [string, WSNode]], ASTLeaf][]

export type MemberExpression
  type: "MemberExpression"
  children: Children
  parent?: Parent

export type CallExpression
  type: "CallExpression"
  children: Children
  parent?: Parent

export type Existence
  type: "Existence"
  expression: ASTNode
  children: Children
  parent?: Parent

export type UnaryExpression
  type: "UnaryExpression"
  children: Children
  parent?: Parent

export type NewExpression
  type: "NewExpression"
  children: Children
  parent?: Parent

export type WSNode = "" | (ASTLeaf | CommentNode)[]

export type StatementDelimiter = ASTNode
export type IndentNode = ASTNode

export type StatementTuple = [IndentNode, ASTNode, StatementDelimiter?]

export type Condition = ParenthesizedExpression

export type ParenthesizedExpression
  type: "ParenthesizedExpression"
  children: Children
  parent?: Parent
  expression: ASTNode
  implicit?: boolean

export type IfStatement
  type: "IfStatement"
  children: Children
  parent?: Parent
  condition: Condition
  then: BlockStatement
  else: [ ASTNode, ElseToken, BlockStatement ]?

export type IterationExpression
  type: "IterationExpression"
  children: Children
  parent?: Parent
  subtype: IterationExpression["statement"]["type"]
  block: BlockStatement,
  statement: IterationStatement | DoStatement | ForStatement
  async: boolean
  resultsRef: ASTRef?

export type IterationStatement
  type: "IterationStatement"
  children: Children
  parent?: Parent
  condition: Condition
  block: BlockStatement

export type BreakStatement
  type: "BreakStatement"
  children: Children
  parent?: Parent

export type ContinueStatement
  type: "ContinueStatement"
  children: Children
  parent?: Parent

export type DoStatement
  type: "DoStatement"
  children: Children
  parent?: Parent
  block: BlockStatement

export type ForStatement
  type: "ForStatement"
  children: Children
  parent?: Parent
  declaration: DeclarationStatement?
  block: BlockStatement
  hoistDec: unknown

export type SwitchStatement
  type: "SwitchStatement"
  children: Children
  parent?: Parent
  condition: Condition
  caseBlock: CaseBlock

export type CaseBlock
  type: "CaseBlock"
  clauses: CaseClause[]
  children: Children

export type CaseClause
  type: unknown
  children: Children
  break?: ASTNode
  block: BlockStatement

export type LabeledStatement
  type: "LabeledStatement"
  label: ASTNode
  statement: ASTNodeBase
  children: Children
  parent?: Parent

export type ElseToken = { $loc: Loc, token: "else" }

export type AccessStart
  type: "AccessStart"
  children: Children
  optional: boolean
  parent?: Parent

export type PropertyAccess
  type: "PropertyAccess"
  children: Children
  dot?: AccessStart
  parent?: Parent

export type Call
  type: "Call"
  children: Children
  args: Children
  optional?: Optional?
  parent?: Parent

export type Index
  type: "Index"
  children: Children
  optional?: Optional?
  parent?: Parent

export type Optional
  type: "Optional"
  children: Children
  parent?: Parent

export type ASTRef =
  type: "Ref"
  base: string
  id: string
  token?: undefined
  /** NOTE: Currently parent may be inaccurate since multiple copies of the same ASTRef can exist in the tree. */
  parent?: Parent

export type AtBinding =
  type: "AtBinding"
  ref: ASTRef

export type BlockStatement =
  type: "BlockStatement"
  children: Children
  expressions: StatementTuple[]
  bare: boolean
  root: boolean
  parent?: Parent

export type DeclarationStatement =
  type: "Declaration"
  children: Children
  names: string[]
  bindings: Binding[]
  parent?: Parent
  decl: "let" | "const" | "var"
  splices: unknown
  thisAssignments: ThisAssignments

export type Binding =
  type: "Binding"
  children: Children
  names: string[]
  pattern: BindingIdentifier | BindingPattern
  suffix: TypeSuffix?
  initializer: Initializer?
  splices: unknown[]
  thisAssignments: unknown[]

export type Initializer =
  type: "Initializer"
  exp: ASTNode
  children: [ASTNode, ASTNode, ASTNode]
  parent?: Parent

export type Identifier =
  type: "Identifier"
  name: string
  names: string[]
  children: [ ASTLeaf ]
  parent?: Parent

export type ReturnValue =
  type: "ReturnValue"
  children: Children

export type StatementExpression =
  type: "StatementExpression"
  children: Children
  statement:
    | DebuggerStatement
    | IterationExpression
    | IfStatement
    | SwitchStatement
    | ThrowStatement
    | TryStatement
  parent?: Parent

export type ReturnStatement
  type: "ReturnStatement"
  expression: ASTNode
  children: Children
  parent?: Parent

export type ThrowStatement
  type: "ThrowStatement"
  children: Children
  parent?: Parent

export type DebuggerStatement
  type: "DebuggerStatement"
  children: Children
  parent?: Parent

export type TryStatement
  type: "TryStatement"
  children: Children
  parent?: Parent
  blocks: BlockStatement[]

export type BindingIdentifier = AtBinding | Identifier | ReturnValue

export type BindingPattern = ObjectBindingPattern | ArrayBindingPattern | PinPattern | Literal | RegularExpressionLiteral

export type RegularExpressionLiteral = ASTLeaf & type: "RegularExpressionLiteral"

export type ArrayBindingPattern = ASTNodeBase

export type Placeholder =
  type: "Placeholder"
  subtype: "." | "&"
  children: Children & [ASTLeaf]
  parent?: Parent
  typeSuffix?: TypeSuffix?

export type PinPattern = ASTNodeBase

// _?, __
export type Whitespace = (ASTLeaf | ASTString)[]?

export type BindingPatternContent = unknown[]

export type ObjectBindingPattern =
  type: "ObjectBindingPattern",
  children: [Whitespace, ASTLeaf, BindingPatternContent, WSNode, ASTLeaf],
  names: string[],
  properties: BindingPatternContent,

export type FunctionExpression =
  type: "ArrowFunction"
  children: Children
  parent?: Parent
  name: string
  signature: FunctionSignature
  block: BlockStatement
  parameters: ParametersNode

export type AmpersandBlockBody =
  ref?: ASTRef
  typeSuffix?: TypeSuffix?
  body: ASTNode

export type PipelineExpression =
  type: "PipelineExpression"
  children: [
    ws: Whitespace
    head: ASTNode
    tail: [
      ws1: Whitespace
      pipe: ASTLeaf
      ws2: Whitespace
      exp: ASTNode
    ][]
  ]
  parent?: Parent

export type MethodDefinition =
  type: "MethodDefinition"
  children: Children
  parent?: Parent
  name: string
  signature: FunctionSignature
  block: BlockStatement
  parameters: ParametersNode

export type ArrowFunction =
  type: "ArrowFunction"
  children: Children
  parent?: Parent
  name: string
  signature: FunctionSignature
  block: BlockStatement
  parameters: ParametersNode

export type FunctionSignature =
  type: "MethodSignature" | "FunctionSignature"
  children: Children
  parent?: Parent
  name: string
  optional: unknown
  modifier: MethodModifier
  returnType: ReturnTypeAnnotation?
  parameters: ParametersNode

export type TypeSuffix =
  type: "TypeSuffix"
  ts: true
  optional?: ASTNode
  nonnull?: ASTNode
  t?: ASTNode
  children: Children

export type ReturnTypeAnnotation =
  type: "ReturnTypeAnnotation"
  ts: true
  optional?: ASTNode
  t: ASTNodeBase &
    type: string
    t: ASTNodeBase
  children: Children

export type MethodModifier =
  get?: boolean
  set?: boolean
  async?: boolean

export type ParametersNode =
  type: "Parameters"
  children: Children
  parent?: Parent
  names: string[]
  tp: TypeParameters?

export type TypeParameters = unknown

export type FunctionNode = FunctionExpression | ArrowFunction | MethodDefinition

export type Literal =
  type: "Literal",
  subtype?: "NumericLiteral" | "StringLiteral"
  children: [ LiteralContentNode ]
  parent?: Parent
  raw: string

export type LiteralContentNode = ASTLeaf & {
  type?: "NumericLiteral" | "StringLiteral"
}

export type TabConfig = number?

export type ParseRule = (context: {fail: () => void}, state: {pos: number, input: string}) => ???

export type TypeNode = TypeIdentifierNode | LiteralTypeNode

export type TypeIdentifierNode =
  type: "IdentifierType"
  children: Children
  parent?: Parent
  raw: string
  args: TypeArgumentsNode

export type TypeArgumentsNode =
  type: "TypeArguments"
  ts: true
  types: TypeNode[]
  children: Children
  parent?: Parent

export type LiteralTypeNode =
  type: "LiteralType"
  t: TypeLiteralNode
  children: Children
  parent?: Parent

export type VoidType = ASTLeaf & type: "VoidType"

export type TypeLiteralNode = ASTLeaf | VoidType

export type ThisAssignments = [string, ASTRef][]

// TODO: Limit to keyof actual ref names
export type GetRef = (refName: string) => ASTRef
