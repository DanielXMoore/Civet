export type ASTNode =
  | ASTString
  | Children
  | StatementNode
  | OtherNode
  | UntypedNode
  | undefined

// OtherNode includes BinaryOp which includes certain strings
export type ASTNodeObject = Exclude<StatementNode | OtherNode | UntypedNode, string>

/**
* Nodes that represent statements.
* Keep this in sync with isStatement in util.civet
*/
export type StatementNode =
  | BlockStatement
  | BreakStatement
  | ComptimeStatement
  | ContinueStatement
  | DebuggerStatement
  | Declaration
  | DoStatement
  | EmptyStatement
  | ExportDeclaration
  | ExpressionNode
  | ForStatement
  | IfStatement
  | ImportDeclaration
  | IterationStatement
  | LabelledStatement
  | PatternMatchingStatement
  | ReturnStatement
  | SwitchStatement
  | ThrowStatement
  | TryStatement

/**
* Nodes that represent expressions.
*/
export type ExpressionNode =
  | ArrayExpression
  | AwaitExpression
  | AssignmentExpression
  | BinaryOp
  | CallExpression
  | ClassExpression
  | ComptimeExpression
  | Existence
  | FunctionNode
  | Identifier
  | IfExpression
  | IterationExpression
  | Literal
  | MethodDefinition
  | MemberExpression
  | NewExpression
  | ObjectExpression
  | ParenthesizedExpression
  | PipelineExpression
  | RegularExpressionLiteral
  | StatementExpression
  | TemplateLiteral
  | TypeNode
  | UnaryExpression
  | UnwrappedExpression
  | UpdateExpression
  | YieldExpression

/**
* Other nodes that aren't statements or expressions.
*/
export type OtherNode =
  | ASTError
  | ASTLeaf
  | ASTRef
  | ASTWrapper
  | AccessStart
  | AtBinding
  | AtBindingProperty
  | Argument
  | ArrayBindingPattern
  | ArrayElement
  | Await
  | Binding
  | BindingElement
  | BindingProperty
  | BindingRestElement
  | BindingRestProperty
  | Call
  | CatchBinding
  | CatchClause
  | CatchPattern
  | CaseBlock
  | CaseClause
  | CoffeeClassPrivate
  | CommentNode
  | ComputedPropertyName
  | ConditionFragment
  | DefaultClause
  | ElisionElement
  | ElseClause
  | EmptyBinding
  | FieldDefinition
  | FinallyClause
  | ForDeclaration
  | FunctionRestParameter
  | ImportAssertion
  | Index
  | Initializer
  | Label
  | ModuleSpecifier
  | NamedBindingPattern
  | NonNullAssertion
  | NormalCatchParameter
  | ObjectBindingPattern
  | Parameter
  | ParametersNode
  | PatternClause
  | PinPattern
  | PinProperty
  | Placeholder
  | PostRestBindingElements
  | PropertyAccess
  | PropertyBind
  | PropertyGlob
  | RangeExpression
  | ReturnTypeAnnotation
  | ReturnValue
  | SliceExpression
  | SpreadElement
  | ThisType
  | TypeArgument
  | TypeArguments
  | TypeSuffix
  | WhenClause
  | Yield

export type IsToken = { token: string }
export type IsParent = { children: Children } & object
export type ASTNodeParent = ASTNodeObject & IsParent
export type Parent = (ASTNodeObject & IsParent)?
export type Children = ASTNode[] & (type?: undefined) & (token?: undefined) & (children?: undefined)
export type ASTString = string & (type?: undefined) & (token?: undefined) & (children?: undefined)

// These nodes are hacks like Arrays but only appear in JS or TS mode
export type UntypedNode =
  type?: never
  js?: boolean
  ts?: boolean
  children: Children
  parent?: Parent

// Wrapper nodes are just for making non-object nodes into objects
// so that they have a parent, needed for e.g. `replaceNode`.
export type ASTWrapper =
  type: "Wrapper"
  children: Children & [ ASTNode ]
  parent?: Parent

export type ASTError =
  type: "Error"
  subtype?: "Warning" | "Error"
  message: string
  $loc?: Loc
  token?: undefined
  filename?: string
  line?: number
  column?: number
  offset?: number
  parent?: Parent
  children?: never

export type Loc =
  pos: number
  length: number

export type ASTLeaf =
  type?: undefined
  $loc: Loc
  token: string
  parent?: Parent
  children?: never

export type ASTLeafWithType<T extends string> =
  Exclude<ASTLeaf, "type"> & { type: T }

export type CommentNode =
  type: "Comment"
  $loc: Loc
  token: string
  parent?: Parent
  children?: never

export type BinaryOp = (string &
  name?: never
  special?: never
  relational?: never
  assoc?: never
  type?: undefined
) | (ASTLeaf &
  type?: undefined
  special?: true
  // The following are allowed only when special is true:
  prec?: string | number | undefined
  assoc?: string?
  call?: ASTNode
  method?: ASTNode
  relational?: boolean
  reversed?: boolean
  negated?: boolean
  asConst?: boolean
) | (PatternTest &
  token?: never
  relational?: never
  assoc?: never
  asConst?: never
) | (ChainOp &
  token?: never
  relational?: never
)

export type BinaryOpRHS = [ASTNode, BinaryOp, ASTNode, ASTNode]

export type NonNullAssertion
  type: "NonNullAssertion"
  ts: true
  children: Children
  parent?: Parent

export type PatternTest
  type: "PatternTest"
  children: Children
  parent?: Parent
  special: true
  negated: boolean

export type ChainOp
  type: "ChainOp"
  special: true
  prec: number
  assoc: string
  children?: never
  parent?: never

export type UpdateExpression
  type: "UpdateExpression"
  children: Children
  parent?: Parent
  assigned: ASTNode

export type AssignmentExpression
  type: "AssignmentExpression"
  children: Children
  parent?: Parent
  names: string[] | null
  lhs: AssignmentExpressionLHS
  assigned: ASTNode
  expression: ExpressionNode | ASTRef
  hoistDec?: ASTNode

export type AssignmentExpressionLHS = [undefined, NonNullable<ASTNode>, [WSNode, [string, WSNode]], ASTLeaf][]

export type MemberExpression
  type: "MemberExpression"
  children: Children
  parent?: Parent

export type CallExpression
  type: "CallExpression"
  implicit?: boolean // manufactured by Civet to implement an operator?
  children: Children
  parent?: Parent

export type Existence
  type: "Existence"
  expression: ASTNode
  children: Children
  parent?: Parent

export type UnaryExpression
  type: "UnaryExpression"
  children: Children
  parent?: Parent
  pre?: ASTNode[]
  expression: ASTNode
  post?: ASTNode

export type Await
  type: "Await"
  token?: string
  children?: Children
  parent?: Parent
  op?: ASTNode

export type AwaitExpression
  type: "AwaitExpression"
  children?: Children
  parent?: Parent

export type NewExpression
  type: "NewExpression"
  children: Children
  parent?: Parent
  expression: CallExpression | MemberExpression

export type UnwrappedExpression
  type: "UnwrappedExpression"
  children: Children
  parent?: Parent
  expression: ASTNode

export type Yield
  type: "Yield"
  token?: string
  children?: Children
  parent?: Parent

export type YieldExpression
  type: "YieldExpression"
  children: Children
  parent?: Parent
  star?: ASTNode?
  expression?: ASTNode?

export type WSNode = "" | (ASTLeaf | CommentNode)[]

export type StatementDelimiter = ASTNode
export type IndentNode = ASTNode

export type StatementTuple = [IndentNode, ASTNode, StatementDelimiter?]

export type Condition = ParenthesizedExpression

export type ParenthesizedExpression
  type: "ParenthesizedExpression"
  children: Children
  parent?: Parent
  expression: ASTNode!
  implicit?: boolean

export type IfStatement
  type: "IfStatement"
  children: Children
  parent?: Parent
  condition: Condition
  negated: boolean?
  then: BlockStatement
  else: ElseClause?

export type ElseClause
  type: "ElseClause"
  children: Children & [ Whitespace | ASTString, ElseToken, BlockStatement ]
  parent?: Parent
  block: BlockStatement

export type ElseToken = "else " | { $loc: Loc, token: "else" }

export type IfExpression
  type: "IfExpression"
  children: Children
  parent?: Parent

export type IterationExpression
  type: "IterationExpression"
  children: Children
  parent?: Parent
  subtype: IterationExpression["statement"]["type"]
  block: BlockStatement
  statement: IterationFamily
  async: boolean
  generator?: ASTNode
  resultsRef: ASTRef?

export type IterationFamily = ForStatement | IterationStatement | DoStatement | ComptimeStatement

export type IterationStatement
  type: "IterationStatement"
  subtype: "while" | "until" | "do-while" | "do-until" | "loop"
  children: Children
  parent?: Parent
  condition: Condition
  block: BlockStatement
  negated: boolean?
  generator?: ASTNode
  object?: boolean
  resultsRef: ASTRef?
  resultsParent?: boolean // inherit resultsRef from parent loop

export type BreakStatement
  type: "BreakStatement"
  children: Children
  parent?: Parent
  with: ASTNode?
  label: Label?

export type ComptimeStatement
  type: "ComptimeStatement"
  children: Children
  parent?: Parent
  block: BlockStatement

export type ComptimeExpression
  type: "ComptimeExpression"
  children: Children
  parent?: Parent
  expression: ASTNode

export type ContinueStatement
  type: "ContinueStatement"
  children: Children
  parent?: Parent
  special?: "switch"
  with: ASTNode?
  label: Label?

export type DoStatement
  type: "DoStatement"
  children: Children
  parent?: Parent
  block: BlockStatement

export type ForStatement
  type: "ForStatement"
  children: Children
  parent?: Parent
  declaration: (Declaration | ForDeclaration)?
  /** Original declaration that got rewritten by `for each`
  (used for implicit body) */
  eachDeclaration?: (Declaration | ForDeclaration)?
  block: BlockStatement
  hoistDec: ASTNode
  generator?: ASTNode
  resultsRef: ASTRef?
  resultsParent?: boolean // inherit resultsRef from parent loop
  reduction?: ForReduction
  object?: boolean

export type ForDeclaration
  type: "ForDeclaration"
  children: Children
  parent?: Parent
  names: string[]
  binding: Binding
  decl: "let" | "const" | "var"

export type ForReduction
  type: "ForReduction"
  subtype: "some" | "every" | "count" | "first" | "sum" | "product" | "min" | "max" | "join" | "concat"

export type SwitchStatement
  type: "SwitchStatement"
  children: Children
  parent?: Parent
  condition: Condition
  caseBlock: CaseBlock

export type CaseBlock
  type: "CaseBlock"
  clauses: (PatternClause | CaseClause | WhenClause | DefaultClause)[]
  children: Children
  parent?: Parent

export type PatternClause
  type: "PatternClause"
  children: Children
  parent?: Parent
  patterns: PatternExpression[]
  block: BlockStatement

export type CaseClause
  type: "CaseClause"
  children: Children
  parent?: Parent
  cases: ASTNode[]
  block: BlockStatement

export type PatternMatchingStatement
  type: "PatternMatchingStatement"
  children: Children & [StatementTuple]
  parent?: Parent
  condition: Condition
  caseBlock: CaseBlock

export type WhenClause
  type: "WhenClause"
  children: Children
  parent?: Parent
  cases: ASTNode[]
  break: ASTNode
  block: BlockStatement

export type DefaultClause
  type: "DefaultClause"
  children: Children
  parent?: Parent
  block: BlockStatement

export type EmptyStatement
  type: "EmptyStatement"
  children: Children
  parent?: Parent
  implicit?: boolean

export type LabelledStatement
  type: "LabelledStatement"
  label: Label
  statement: ASTNodeObject
  children: Children
  parent?: Parent

export type Label
  type: "Label"
  children: Children
  parent?: Parent
  name: string | ASTRef
  // implicit reference to containing anonymous loop
  special?: "loop" | "while" | "until" | "for" | "do"

export type AccessStart
  type: "AccessStart"
  children: Children
  parent?: Parent
  optional: boolean

export type PropertyAccess
  type: "PropertyAccess"
  children: Children
  parent?: Parent
  dot?: AccessStart

export type PropertyBind
  type: "PropertyBind"
  children: Children
  parent?: Parent
  name: string
  args: ASTNode[]

export type PropertyGlob
  type: "PropertyGlob"
  children: Children
  parent?: Parent
  dot: ASTNode
  object: ObjectExpression

export type Call
  type: "Call"
  children: Children
  args: Children
  optional?: Optional?
  parent?: Parent

export type Index
  type: "Index"
  children: Children
  optional?: Optional?
  parent?: Parent

export type SliceExpression
  type: "SliceExpression"
  children: Children
  parent?: Parent
  start: ASTNode
  end: ASTNode
  reversed: boolean

export type SliceParameters
  type: "SliceParameters"
  children: Children
  parent?: Parent
  start: ASTNode
  end: ASTNode
  reversed: boolean

export type Optional
  type: "Optional"
  children: Children
  parent?: Parent

export type ASTRef =
  type: "Ref"
  /** Prefix for eventual ref id. Includes leading `_` for reserved words */
  base: string
  /** Original id that base was based on. Includes leading `#` for private fields */
  id: string
  token?: undefined
  /** NOTE: Currently parent may be inaccurate since multiple copies of the same ASTRef can exist in the tree. */
  parent?: Parent
  children?: never

export type AtBinding =
  type: "AtBinding"
  ref: ASTRef
  children: Children & [ASTRef]
  parent?: Parent
  names: []

export type BlockStatement =
  type: "BlockStatement"
  children: Children
  expressions: StatementTuple[]
  bare: boolean  // has no braces
  semicolon?: ";"  // ends with a semicolon (to separate from else block)
  empty?: boolean  // empty block
  implicit?: boolean  // implicit empty block
  implicitlyReturned?: boolean  // fat arrow function with no braces
  root?: boolean  // is this the global root block for the program?
  topLevelAwait?: boolean // for root block, is there top-level `await`? (before any IIFE wrapping)
  topLevelYield?: boolean // for root block, is there top-level `yield`? (before any IIFE wrapping)
  parent?: Parent

export type ImportDeclaration
  type: "ImportDeclaration"
  children: Children
  parent?: Parent
  ts?: boolean
  imports?: ASTNode
  from?: ASTNode

export type ExportDeclaration
  type: "ExportDeclaration"
  children: Children
  parent?: Parent
  ts?: boolean
  declaration?: ASTNode

export type ModuleSpecifier
  type: "ModuleSpecifier"
  children: Children
  parent?: Parent
  module: ASTLeaf | StringLiteral
  assertion?: ImportAssertion

export type ImportAssertion
  type: "ImportAssertion"
  children: Children
  parent?: Parent
  keyword: "with" | "assert"
  object: ASTNode

export type Declaration =
  type: "Declaration"
  children: Children
  names: string[]
  bindings: Binding[]
  parent?: Parent
  decl: "let" | "const" | "var"
  splices?: unknown
  thisAssignments?: ThisAssignments
  // Should placeholders in contents be lifted above the parent block,
  // because they actual came from code outside the block?
  implicitLift?: boolean

export type Binding =
  type: "Binding"
  children: Children
  parent?: Parent
  names: string[]
  pattern: BindingIdentifier | BindingPattern
  typeSuffix?: TypeSuffix?
  initializer?: Initializer?
  splices: unknown[]
  thisAssignments: unknown[]

export type Initializer =
  type: "Initializer"
  expression: ASTNode
  children: Children
  parent?: Parent

export type Identifier =
  type: "Identifier"
  name: string
  names: string[]
  children: Children & [ ASTLeaf | ASTString ]
  parent?: Parent

export type ReturnValue =
  type: "ReturnValue"
  children: Children
  parent?: Parent

export type StatementExpression =
  type: "StatementExpression"
  children: Children
  parent?: Parent
  statement:
    | DebuggerStatement
    | IterationExpression
    | IfStatement
    | SwitchStatement
    | ThrowStatement
    | TryStatement
  maybe?: boolean // don't wrap if this appears at the statement level of block

export type ReturnStatement
  type: "ReturnStatement"
  expression: ASTNode
  children: Children
  parent?: Parent

export type ThrowStatement
  type: "ThrowStatement"
  children: Children
  parent?: Parent

export type DebuggerStatement
  type: "DebuggerStatement"
  children: Children
  parent?: Parent

export type TryStatement
  type: "TryStatement"
  children: Children
  parent?: Parent
  // `blocks` should list all blocks that need implicit return:
  // main and `catch` blocks, but not `finally `block
  blocks: BlockStatement[]

export type CatchClause
  type: "CatchClause"
  children: Children & [ Whitespace | ASTString, CatchToken, CatchBinding, BlockStatement ]
  parent?: Parent
  block: BlockStatement
  binding: CatchBinding?

export type CatchToken = { $loc: Loc, token: "catch" }

export type CatchBinding
  type: "CatchBinding"
  children: Children
  parent?: Parent
  parameter: CatchParameter

export type CatchParameter =
  | NormalCatchParameter
  | CatchPattern
  | ASTRef  // made by processTryBlock for pattern matching catch

export type NormalCatchParameter =
  type: "CatchParameter"
  children: Children
  parent?: Parent
  binding: ObjectBindingPattern | ArrayBindingPattern
  typeSuffix: TypeSuffix?

export type CatchPattern
  type: "CatchPattern"
  children: Children
  parent?: Parent
  patterns: PatternExpression[]

export type FinallyClause
  type: "FinallyClause"
  children: Children & (
    | [ FinallyToken, BlockStatement ]
    | [ Whitespace | ASTString, FinallyToken, BlockStatement ]
  )
  parent?: Parent
  block: BlockStatement

export type FinallyToken = "finally " | { $loc: Loc, token: "finally" }

export type BindingIdentifier = AtBinding | Identifier | ReturnValue

export type BindingPattern = BindingIdentifier | ObjectBindingPattern | ArrayBindingPattern | PinPattern | NamedBindingPattern | Literal | RegularExpressionLiteral

// Includes things that appear inside BindingPatterns (when recursing)
// but aren't patterns by themselves
export type BindingPatternComponent = BindingProperty | AtBindingProperty | BindingRestProperty | BindingElement | BindingRestElement | BindingPattern

export type PatternExpression = BindingPattern | ConditionFragment

export type ConditionFragment =
  type: "ConditionFragment"
  children: Children
  parent?: Parent
  rhs: BinaryOpRHS[]
  binding?: BindingPattern?

export type RegularExpressionLiteral =
  type: "RegularExpressionLiteral"
  children: Children
  parent?: Parent
  raw: string

export type TemplateLiteral
  type: "TemplateLiteral"
  children: Children
  parent?: Parent

export type ArrayBindingPattern =
  type: "ArrayBindingPattern"
  children: Children
  parent?: Parent
  elements: ArrayBindingPatternContent
  length: number
  names: string[]
  typeSuffix?: TypeSuffix?

export type ArrayBindingPatternContent =
  (BindingElement | BindingRestElement | ElisionElement | ASTError)[]

export type PostRestBindingElements
  type: "PostRestBindingElements"
  children: Children
  parent?: Parent
  elements: ArrayBindingPatternContent
  names: string[]

export type BindingElement =
  type: "BindingElement"
  children: Children
  names: string[]
  binding: BindingIdentifier | BindingPattern
  typeSuffix?: TypeSuffix?
  delim?: ASTNode

export type BindingRestElement =
  type: "BindingRestElement"
  children: Children
  parent?: Parent
  dots: ASTLeaf
  name: string
  names: string[]
  rest: true
  typeSuffix?: TypeSuffix?
  binding: BindingIdentifier | BindingPattern | EmptyBinding

export type EmptyBinding
  type: "EmptyBinding"
  children: Children
  parent?: Parent
  names: string[]
  ref: ASTRef

export type ElisionElement
  type: "ElisionElement"
  children: Children
  parent?: Parent
  typeSuffix?: undefined
  names: string[]

export type Placeholder
  type: "Placeholder"
  subtype: "." | "&"
  children: Children & [ASTLeaf]
  parent?: Parent
  typeSuffix?: TypeSuffix?

export type PinPattern
  type: "PinPattern"
  children: Children
  parent?: Parent
  expression: ExpressionNode
  ref?: ASTRef

export type NamedBindingPattern
  type: "NamedBindingPattern"
  children: Children
  parent?: Parent
  binding: BindingIdentifier
  pattern: BindingPattern
  subbinding?: ASTNode

export type HasSubbinding = BindingProperty | NamedBindingPattern

// _?, __
export type Whitespace = (ASTLeaf | ASTString)[]?

export type Delimiter = ASTLeaf | ASTString | Delimiter[]

type PropertyName =
  Literal | ComputedPropertyName | Identifier

type ComputedPropertyName =
  type: "ComputedPropertyName"
  children: Children
  parent?: Parent
  expression: ASTNode

export type BindingProperty =
  type: "BindingProperty"
  children: Children
  parent?: Parent
  name: PropertyName | AtBinding
  names: string[]
  value: (BindingIdentifier | BindingPattern)?
  typeSuffix: TypeSuffix?
  initializer: Initializer?
  delim: ASTNode
  subbinding?: ASTNode

export type PinProperty =
  type: "PinProperty"
  children: Children
  parent?: Parent
  name: PropertyName | AtBinding
  value: PinPattern
  delim: ASTNode
  typeSuffix?: undefined

export type AtBindingProperty =
  type: "AtBindingProperty"
  children: Children
  parent?: Parent
  binding: AtBinding
  ref: ASTRef
  names: string[]
  typeSuffix: TypeSuffix?
  initializer: Initializer?
  delim: ASTNode

export type BindingRestProperty =
  type: "BindingRestProperty"
  children: Children
  parent?: Parent
  typeSuffix: TypeSuffix?
  delim: ASTNode
  // AtBinding case
  ref?: ASTRef
  // Identifier case
  name?: string
  names?: string[]

export type ObjectBindingPatternContent =
  (BindingProperty | PinProperty | AtBindingProperty | BindingRestProperty | ASTError)[]

export type ObjectBindingPattern =
  type: "ObjectBindingPattern",
  children: Children & [Whitespace, ASTLeaf, ObjectBindingPatternContent, WSNode, ASTLeaf]
  parent?: Parent
  names: string[]
  properties: ObjectBindingPatternContent
  typeSuffix?: TypeSuffix?

export type ObjectExpression
  type: "ObjectExpression"
  children: Children
  names: string[]
  properties: (Property | SpreadProperty | MethodDefinition | ASTError)[]
  parent?: Parent

export type Property
  type: "Property"
  children: Children
  parent?: Parent
  name: string
  names: string[]
  value: ASTNode
  usesRef?: boolean

export type ArrayExpression
  type: "ArrayExpression"
  children: Children
  parent?: Parent
  names?: string[]

export type ArrayElement
  type: "ArrayElement"
  children: Children
  parent?: Parent
  expression: ASTNode
  names: string[]

export type SpreadElement
  type: "SpreadElement"
  children: Children
  parent?: Parent
  expression: ASTNode
  names: string[]

export type Argument
  type: "Argument"
  children: Children
  parent?: Parent
  expression: ASTNode
  spread: ASTNode?

export type FunctionExpression
  type: "FunctionExpression"
  children: Children
  parent?: Parent
  name: string
  id: Identifier
  async?: ASTNode[]
  generator?: ASTNode[]
  signature: FunctionSignature
  block: BlockStatement
  parameters: ParametersNode

export type AmpersandBlockBody =
  ref?: ASTRef
  typeSuffix?: TypeSuffix?
  body: ASTNode

export type PipelineExpression =
  type: "PipelineExpression"
  children: Children & [
    ws: Whitespace
    head: ASTNode
    tail: [
      ws1: Whitespace
      pipe: ASTLeaf
      ws2: Whitespace
      expression: ASTNode
    ][]
  ]
  parent?: Parent

export type MethodDefinition =
  type: "MethodDefinition"
  children: Children
  parent?: Parent
  name: string
  async?: ASTNode[]
  generator?: ASTNode[]
  signature: FunctionSignature
  block: BlockStatement
  parameters: ParametersNode
  autoBind?: boolean // CoffeeScript => bound methods

export type ArrowFunction =
  type: "ArrowFunction"
  children: Children
  parent?: Parent
  name: string
  async: ASTNode[]
  signature: FunctionSignature
  block: BlockStatement
  parameters: ParametersNode
  ampersandBlock?: boolean  // unrollable single-argument function
  body?: ASTNode

export type FunctionSignature =
  type: "MethodSignature" | "FunctionSignature"
  children: Children
  parent?: Parent
  // undefined means anonymous (e.g. arrow function)
  name?: string?
  id?: Identifier?
  modifier: MethodModifier
  returnType: ReturnTypeAnnotation?
  parameters: ParametersNode

export type TypeSuffix =
  type: "TypeSuffix"
  ts: true
  optional?: ASTNode
  colon?: ASTNode
  nonnull?: ASTNode
  t?: ASTNode
  children: Children
  parent?: Parent

export type ReturnTypeAnnotation =
  type: "ReturnTypeAnnotation"
  ts: true
  optional?: ASTNode
  t: TypeNode
  children: Children
  parent?: Parent

export type MethodModifier =
  get?: boolean
  set?: boolean
  async?: boolean
  generator?: boolean

// Avoiding conflict with Parameters<FunctionType> TypeScript helper
export type ParametersNode =
  type: "Parameters"
  children: Children
  parent?: Parent
  parameters: FunctionParameter[]
  names?: string[] // set eventually by processParams
  tp?: TypeParameters?
  implicit?: boolean // makeGetterMethod
  blockPrefix?: PostRestBindingElements

export type Parameter
  type: "Parameter"
  children: Children
  parent?: Parent
  names: string[]
  typeSuffix?: TypeSuffix?
  accessModifier?: AccessModifier?
  initializer?: Initializer?
  delim?: ParameterElementDelimiter?
  binding: BindingIdentifier | BindingPattern

export type FunctionRestParameter
  type: "FunctionRestParameter"
  children: Children
  parent?: Parent
  names: string[]
  typeSuffix?: TypeSuffix?
  binding: BindingIdentifier | BindingPattern
  rest: BindingRestElement

export type ThisType
  type: "ThisType"
  ts: true
  children: Children
  parent?: Parent

export type FunctionParameter =
  | Parameter
  | FunctionRestParameter
  | ThisType
  | ASTError
  // for & blocks:
  | ASTRef
  | [ ASTRef, ASTNode ] // ASTRef + delimiter or type suffix

type AccessModifier = ASTNode
type ParameterElementDelimiter = ASTNode

export type TypeParameters = ASTNode

export type FunctionNode = FunctionExpression | ArrowFunction | MethodDefinition

export type ClassExpression
  type: "ClassExpression"
  children: Children
  parent?: Parent
  name: string
  id: Identifier
  heritage: ASTNode
  body: ClassBody
  binding: [BindingIdentifier, TypeParameters]

export type ClassBody = BlockStatement & { subtype: "ClassBody" }

export type FieldDefinition
  type: "FieldDefinition"
  children: Children
  parent?: Parent
  ts?: boolean?
  id: ASTNode
  typeSuffix?: TypeSuffix?
  abstract?: ASTNode
  "readonly"?: ASTNode
  initializer?: Initializer

export type CoffeeClassPrivate
  type: "CoffeeClassPrivate"
  children: Children
  parent?: Parent
  id: ASTNode
  typeSuffix?: TypeSuffix?
  initializer: Initializer

export type Literal =
  type: "Literal"
  subtype: "NullLiteral" | "BooleanLiteral" | "NumericLiteral" | "StringLiteral" | "RegularExpressionLiteral"
  children: Children & LiteralContentNode[]
  parent?: Parent
  raw: string

export type LiteralContentNode =
  | ASTLeaf
  | ASTLeafWithType "NumericLiteral" | "StringLiteral"
  | string

export type NumericLiteral = ASTLeafWithType "NumericLiteral"
export type StringLiteral = ASTLeafWithType "StringLiteral"

export type RangeExpression
  type: "RangeExpression"
  children: Children
  parent?: Parent
  start: ASTNode
  end: ASTNode
  left: RangeEnd
  right: RangeEnd
  increasing: boolean?
  error?: ASTError?

export type RangeDots
  type: "RangeDots"
  children: Children
  parent?: Parent
  $loc: Loc
  left: RangeEnd
  right: RangeEnd
  increasing: boolean?
  triple?: boolean
  error?: ASTError

export type RangeEnd
  increasing: boolean?
  inclusive: boolean
  raw: string

export type TabConfig = number?

export type ParseRule = (context: {fail: () => void}, state: {pos: number, input: string}) => ???

export type TypeNode =
  | TypeIdentifier
  | TypeLiteral
  | TypeTypeof
  | TypeUnary
  | TypeTuple
  | TypeElement
  | TypeFunction
  | TypeParenthesized
  | TypeAsserts
  | TypePredicate

export type TypeIdentifier
  type: "TypeIdentifier"
  children: Children
  parent?: Parent
  raw: string
  args: TypeArguments

export type TypeArguments
  type: "TypeArguments"
  ts: true
  // Should alternate: argument, delimiter, argument, delimiter, ..., argument
  args: (TypeArgument | Delimiter)[]
  children: Children
  parent?: Parent

export type TypeArgument
  type: "TypeArgument"
  ts: true
  t: TypeNode
  children: Children & [TypeNode]
  parent?: Parent

export type TypeUnary
  type: "TypeUnary"
  ts: true
  children: Children
  parent?: Parent
  prefix: ASTNode[]
  suffix: ASTNode[]
  t: TypeNode

export type TypeTuple
  type: "TypeTuple"
  ts: true
  elements: ASTNode[]
  children: Children
  parent?: Parent

export type TypeElement
  type: "TypeElement"
  name?: string
  t: TypeNode
  children: Children
  parent?: Parent

export type TypeFunction
  type: "TypeFunction"
  ts: true
  children: Children
  parent?: Parent

export type TypeParenthesized
  type: "TypeParenthesized"
  ts: true
  children: Children
  parent?: Parent

export type TypeLiteral
  type: "TypeLiteral"
  t: TypeLiteralNode
  children: Children
  parent?: Parent

export type TypeTypeof
  type: "TypeTypeof"
  children: Children
  parent?: Parent
  expression: ASTNode

export type TypeAsserts
  type: "TypeAsserts"
  children: Children
  parent?: Parent
  t: TypeNode

export type TypePredicate
  type: "TypePredicate"
  children: Children
  parent?: Parent
  lhs: ASTNode
  rhs: ASTNode

export type VoidType = ASTLeafWithType "VoidType"

export type TypeLiteralNode = ASTLeaf | ASTString | VoidType

export type ThisAssignments = ([string, ASTRef] | AssignmentExpression)[]

export type WithClause =
  type: "WithClause"
  children: Children
  targets: [WSNode, ExpressionNode][]
