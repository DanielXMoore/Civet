type { ASTNode } from './parser/types.civet'
{ removeParentPointers } from './parser/util.civet'
{ ParseError } from './parser.hera'

export type Options =
  sourceMap?: undefined |
    updateSourceMap: (token: string, pos?: number) => void
    data: { srcLine: number, srcColumn: number, srcOffset: number }
  js?: boolean
  filename?: string
  errors?: ParseError[]

function stringify(node: ASTNode): string
  try
    return JSON.stringify removeParentPointers node
  catch e
    return `${node}`

function gen(root: ASTNode, options: Options): string
  updateSourceMap := options?.sourceMap?.updateSourceMap
  return recurse root

  function recurse(node: ASTNode): string
    return "" unless node?

    if node <? "string"
      // increment output line/column
      updateSourceMap? node
      //console.log 'advance', JSON.stringify(node), options.sourceMap.data.srcLine, options.sourceMap.data.srcColumn if options?.sourceMap?

      return node

    if Array.isArray(node)
      return node.map(recurse).join('')

    if node <? "object"
      if options.js and node.ts
        return ""
      if !options.js and node.js
        return ""

      // Check errors after js/ts so that we can have
      // conditional errors based on options
      if node.type is "Error"
        filename := options?.filename ?? "unknown"
        line: number | string .= '?'
        column: number | string .= '?'
        let offset: number?
        if sourceMap := options.sourceMap
          if node.$loc?
            sourceMap.updateSourceMap "", node.$loc.pos
          // Convert 0-based to 1-based
          line = sourceMap.data.srcLine + 1
          column = sourceMap.data.srcColumn + 1
          //console.log 'error', node.message, 'at', line, column, offset
          offset = sourceMap.data.srcOffset
        options.errors ?= []
        options.errors.push new ParseError
          node.message
          undefined // body
          filename
          line
          column
          offset
        return ""

      if node.$loc?
        {token, $loc} := node
        updateSourceMap? token, $loc.pos
        //console.log 'set', node, options.sourceMap.data.srcLine, options.sourceMap.data.srcColumn if options?.sourceMap?
        return token

      if !node.children
        switch node.type
          when "Ref"
            throw new Error(`Unpopulated ref ${stringify node}`)

        debugger
        throw new Error(`Unknown node ${stringify node}`)

      return recurse node.children

    debugger
    throw new Error(`Unknown node ${stringify node}`)

export default gen

// Remove empty arrays, empty string, null, undefined from node tree
// Useful for debugging so I don't need to step though tons of empty nodes
// Also remove parent pointers so we can JSON.stringify the tree
export function prune(node: any): any
  return unless node?

  if node <? "string" and node.length is 0
    return
  if node.parent?
    delete node.parent

  if Array.isArray(node)
    a := node.map prune
    .filter &

    if a.length > 1
      return a
    if a.length is 1
      return a[0]
    return

  if node.children?
    node.children = prune(node.children) or []
    return node

  return node
