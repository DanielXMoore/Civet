// TODO: Sourcemaps
// track output line/column
// - track source line/column
//   - map src string into position / line char lookup
// construct source mapping data

type { ASTNode } from './parser/types.civet'
{ removeParentPointers } from './parser/util.civet'

export type Options =
  updateSourceMap?: (token: string, pos?: number) => void
  js?: boolean
  errors?: unknown[]

function stringify(node: ASTNode): string
  try
    return JSON.stringify removeParentPointers node
  catch e
    return `${node}`

function gen(root: ASTNode, options: Options): string
  currentPos .= 0
  return recurse root

  function recurse(node: ASTNode): string
    return "" unless node?

    if node <? "string"
      // increment output line/column
      options?.updateSourceMap? node
      currentPos += node.length

      return node

    if Array.isArray(node)
      return node.map(recurse).join('')

    if node <? "object"
      if options.js and node.ts
        return ""
      if !options.js and node.js
        return ""

      // Check errors after js/ts so that we can have
      // conditional errors based on options
      if node.type is "Error"
        node.pos = currentPos
        options.errors ?= []
        options.errors.push node
        return ""

      if node.$loc?
        {token, $loc} := node
        options?.updateSourceMap?(token, $loc.pos)
        currentPos = $loc.pos + $loc.length
        return token

      if !node.children
        switch node.type
          when "Ref"
            throw new Error(`Unpopulated ref ${stringify node}`)

        debugger
        throw new Error(`Unknown node ${stringify node}`)

      return recurse node.children

    debugger
    throw new Error(`Unknown node ${stringify node}`)

export default gen

// Remove empty arrays, empty string, null, undefined from node tree
// Useful for debugging so I don't need to step though tons of empty nodes
// Also remove parent pointers so we can JSON.stringify the tree
export function prune(node: any): any
  return unless node?

  if node <? "string" and node.length is 0
    return
  if node.parent?
    delete node.parent

  if Array.isArray(node)
    a := node.map prune
    .filter &

    if a.length > 1
      return a
    if a.length is 1
      return a[0]
    return

  if node.children?
    node.children = prune(node.children) or []
    return node

  return node
