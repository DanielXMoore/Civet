// TODO: Sourcemaps
// track output line/column
// - track source line/column
//   - map src string into position / line char lookup
// construct source mapping data

import { removeParentPointers } from './parser/util.civet'

export type Options =
  updateSourceMap?: (token: string, pos?: number) => void
  js?: boolean
  errors?: unknown[]

function stringify(node: ???): string
  try
    return JSON.stringify removeParentPointers node
  catch e
    return `${node}`

function gen(node: any, options: Options): string
  if node is null or node is undefined
    return ""

  if node <? "string"
    // increment output line/column
    options?.updateSourceMap? node

    return node

  if Array.isArray(node)
    return node.map (child) ->
      gen child, options
    .join('')

  if node <? "object"
    if options.js and node.ts
      return ""
    if !options.js and node.js
      return ""

    // Check errors after js/ts so that we can have
    // conditional errors based on options
    if node.type is "Error"
      options.errors ?= []
      options.errors.push node
      return ""

    if node.$loc?
      {token, $loc} := node
      options?.updateSourceMap?(token, $loc.pos)
      return token

    if !node.children
      switch node.type
        when "Ref"
          throw new Error(`Unpopulated ref ${stringify node}`)

      debugger
      throw new Error(`Unknown node ${stringify node}`)

    return gen node.children, options

  debugger
  throw new Error(`Unknown node ${stringify node}`)

export default gen

// Remove empty arrays, empty string, null, undefined from node tree
// Useful for debugging so I don't need to step though tons of empty nodes
// Also remove parent pointers so we can JSON.stringify the tree
export function prune(node: any): any
  if node is null or node is undefined
    return

  if node.length is 0
    return
  if node.parent?
    delete node.parent

  if Array.isArray(node)
    a := node.map (n) ->
      prune(n)
    .filter !!&

    if a.length > 1
      return a
    if a.length is 1
      return a[0]
    return

  if node.children?
    node.children = prune(node.children) or []
    return node

  return node
