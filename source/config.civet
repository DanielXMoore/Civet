path from path
fs from fs/promises
{ compile } from ./main.civet

// TODO: Once the types are exported within the Civet source code,
// we should import them directly here, instead of looking at an old release.
type { CompileOptions } from "@danielx/civet"

configFileNames := new Set [
  "üêà.json"
  "üêà.civet"
  "civetconfig.json"
  "civetconfig.civet"
  "civet.config.json"
  "civet.config.civet"
  "package.json"
  "package.yaml"
]

export function findInDir(dirPath: string): Promise<string | undefined>
  for entryName of await fs.readdir dirPath
    entryPath := path.join dirPath, entryName

    if entryName is ".config" and try fs.stat entryPath |> await |> .isDirectory()
      // scan for ./civet.json as well as ./.config/civet.json
      found := await findInDir entryPath
      return found if found

    name := entryName.replace(/^\./, "") // allow both .civetconfig.civet and civetconfig.civet
    if configFileNames.has(name) and try fs.stat entryPath |> await |> .isFile()
      return entryPath

  return

export function findConfig(startDir: string): Promise<string | undefined>
  curr .= startDir
  parent .= path.dirname curr

  while curr !== parent
    // root directory (/, C:, etc.)
    configPath := await findInDir curr
    return configPath if configPath

    curr = parent
    parent = path.dirname curr

  return

export function loadConfig(pathname: string): Promise<CompileOptions>
  config := await fs.readFile pathname, "utf8"

  let data: CompileOptions = {}
  if pathname.endsWith ".json"
    let json: CompileOptions | { civetConfig: CompileOptions }
    try
      json = JSON.parse config
    catch e
      throw new Error `Error parsing JSON config file ${pathname}: ${e}`
    // Allow civetConfig in package.json, but ignore rest of package.json
    if 'civetConfig' in json
      data = json.civetConfig
    else if path.basename(pathname).startsWith 'package'
      return {}
    else
      data = json

  else if /\.ya?ml$/.test pathname
    try
      { default: YAML } := await import "yaml"
      yaml := YAML.parse config
      data = yaml.civetConfig ?? yaml
    catch e
      throw new Error `Error parsing YAML config file ${pathname}: ${e}`
  else
    let js
    try
      js = compile config,
        js: true
        sync: true  // doesn't seem worth making loadConfig API async
    catch e
      throw new Error `Error compiling Civet config file ${pathname}: ${e}`

    try
      exports := await import `data:text/javascript,${ encodeURIComponent js }`
      data = exports?.default
    catch e
      throw new Error `Error running Civet config file ${pathname}: ${e}`

  unless data? <? "object" and not Array.isArray data
    throw new Error `Civet config file must export an object, not ${Array.isArray(data) ? 'array' : data? ? typeof data : 'null'}`

  // Forbid enabling comptime in the config file
  delete data?.parseOptions?.comptime
  data
