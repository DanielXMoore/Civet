path from path
fs from fs/promises
{ compile } from ./main.civet

// TODO: Once the types are exported within the Civet source code,
// we should import them directly here, instead of looking at an old release.
type { CompileOptions } from "@danielx/civet"

configFileNames := new Set [
  "üêà.json"
  "üêà.civet"
  "civetconfig.json"
  "civetconfig.civet"
]

function findInDir(dirPath: string): Promise<string | undefined>
  dir := await fs.opendir(dirPath)
  for await entry of dir
    if entry.isDirectory() and entry.name === ".config"
      // scan for ./civet.json as well as ./.config/civet.json
      const found = await findInDir(
        path.join(dirPath, entry.name)
      );
      return found if found

    if entry.isFile()
      const name = entry.name.replace(/^\./, ""); // allow both .civetconfig.civet and civetconfig.civet
      if configFileNames.has name
        return path.join dirPath, entry.name

  return

export function findConfig(startDir: string): Promise<string | undefined>
  curr .= startDir
  parent .= path.dirname curr

  while curr !== parent
    // root directory (/, C:, etc.)
    configPath := await findInDir curr
    return configPath if configPath

    curr = parent
    parent = path.dirname curr

  return

export function loadConfig(path: string): Promise<CompileOptions>
  config := await fs.readFile path, "utf8"

  let data: CompileOptions = {}
  if path.endsWith ".json"
    try
      data = JSON.parse config
    catch e
      throw new Error `Error parsing JSON config file ${path}: ${e}`
  else
    let js
    try
      js = compile config, js: true
    catch e
      throw new Error `Error compiling Civet config file ${path}: ${e}`

    try
      exports := await import `data:text/javascript,${ encodeURIComponent js }`
      data = exports?.default
    catch e
      throw new Error `Error running Civet config file ${path}: ${e}`

  unless data? <? "object" and not Array.isArray data
    throw new Error `Civet config file must export an object, not ${Array.isArray(data) ? 'array' : data? ? typeof data : 'null'}`

  // Forbid enabling comptime in the config file
  delete data?.parseOptions?.comptime
  data
