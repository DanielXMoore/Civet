path from path
fs from fs/promises
{ compile } from ./main.civet

configFileNames := new Set [
  "üêà.json"
  "üêà.civet"
  "civetconfig.json"
  "civetconfig.civet"
]

function findInDir(dirPath: string): Promise<string | ???>
  dir := await fs.opendir(dirPath)
  for await entry of dir
    if entry.isDirectory() and entry.name === ".config"
      // scan for ./civet.json as well as ./.config/civet.json
      const found = await findInDir(
        path.join(dirPath, entry.name)
      );
      return found if found

    if entry.isFile()
      const name = entry.name.replace(/^\./, ""); // allow both .civetconfig.civet and civetconfig.civet
      if configFileNames.has name
        return path.join dirPath, entry.name

  return

export function findConfig(startDir: string): Promise<string | ???>
  curr .= startDir
  parent .= path.dirname curr

  while curr !== parent
    // root directory (/, C:, etc.)
    configPath := await findInDir curr
    return configPath if configPath

    curr = parent
    parent = path.dirname curr

  return

export function loadConfig(path: string): Promise<???>
  config := await fs.readFile path, "utf8"

  if path.endsWith ".json"
    JSON.parse config
  else
    js := compile config, js: true
    let exports

    try
      exports = await import `data:text/javascript,${ encodeURIComponent js }`
    catch e
      console.error "Error loading config file", path, e

    if typeof exports.default !== "object" or exports.default === null
      throw new Error "civet config file must export an object"

    exports.default
