// Usage: `npm run changelog` or `civet build/changelog.civet`

{ spawnSync } from child_process
{ readFileSync, writeFileSync } from fs
{ dirname, join } from path
{ fileURLToPath } from url

repoUrl := 'https://github.com/DanielXMoore/Civet'

// Change to project root directory, one up from `build` where this file is
process.chdir join (dirname fileURLToPath import.meta.url), '..'

function run(command: string, args: string[]): string
  sub := spawnSync command, args, encoding: 'utf8'
  if sub.error
    console.error sub.error
    process.exit 1
  if sub.signal
    console.error `${command} died from signal ${sub.signal}`
    process.exit 1
  if sub.status
    console.error sub.stderr
    process.exit sub.status
  sub.stdout

// Find commits for each version of Civet

versionLogs := run 'git', [
  'log'
  '--topo-order'
  '--reverse'
  '--patch'
  '--date=iso'
  '--'
  'package.json'
]

interface Version
  version: string
  commit?: string
  date?: string?
  tag?: string
  prs?: string[]
  changes?: string[]
versions: Version[] := []

let commit?: string, date?: string
for each line of versionLogs.split '\n'
  if match := line.match /^commit ([0-9a-f]+)/
    [, commit] = match
  else if match := line.match /^Date:\s*(\S+)/
    [, date] = match
  else if [, version] := line.match /^\+  "version": "([^"]+)"/
    if commit?
      versions.push { commit, date, version }
    else
      console.warn `Version ${version} outside of a commit`

console.log `${versions#} versions, from ${versions.0.version} to ${versions.-1.version}`

commitToVersion: Record<string, Version> := {}
for each version of versions
  commitToVersion[version.commit] = version if version.commit?

// Check for uncommitted local changes

let uncommitted: Version?

if [, version] := readFileSync('package.json', encoding: 'utf8').match /^  "version": "([^"]+)"/m
  unless versions.find .version is version
    console.log `+ uncommitted version ${version}`
    now := new Date
    versions.push uncommitted = {
      version
      date: `${now.getFullYear()}-${(now.getMonth()+1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}`
    }

// Tag version commits

existingTag: Map<string, string> := new Map  // tag -> commit
run 'git', ['tag', '--list', '--format=%(object) %(refname:short)', 'v*']
.split '\n'
.forEach (line) =>
  [commit, tag] := line.split ' '
  existingTag.set tag, commit

for each version of versions
  tag := `v${version.version}`
  if existingTag.has tag
    if version.commit is not existingTag.get tag
      console.warn `Tag ${tag} already exists but points to ${existingTag.get tag} instead of ${version.commit}`
  else if version.commit?
    console.log `Tagging ${tag} -> ${version.commit}`
    run 'git', ['tag', '-a', tag, '-m', tag, version.commit]
  version.tag = tag

// Find pull requests between each version

prLogs := run 'git', [
  'log'
  '--topo-order'
  '--reverse'
  // We can't just look at PR merge commits; also need to see version commits.
  //'--grep'
  //'Merge pull request #[0-9]'
]
let prs: string[] = []
let pr?: string
for each line of prLogs.split '\n'
  if pr? and line is not like /^\s/
    console.warn `No message for pull request #${pr}`
    pr = undefined
  if [, commit] := line.match /^commit ([0-9a-f]+)/
    if commit in commitToVersion
      commitToVersion[commit].prs = prs
      prs = []
  else if match := line.match /^    Merge pull request #([0-9]+) from (\S+)/
    unless match.2 is like /\/dependabot\//
      pr = match.1
  else if pr and line is not like /^\s*$/
    prs.push pr
    pr = undefined

if prs#
  if uncommitted?
    uncommitted.prs = prs
  else
    versions.push { prs, version: 'Unreleased' }

// Look up current PR titles

interface PRRecord
  number: number
  title: string

function ghPR(page: number): Promise<PRRecord[] & { numPages: number }>
  response := fetch `https://api.github.com/repos/DanielXMoore/Civet/pulls?state=closed&per_page=100&page=${page}`,
    headers:
      Accept: 'application/vnd.github+json'
      'X-GitHub-Api-Version': '2022-11-28'
  |> await
  json := response.json()
  |> await
  if match := response.headers.get('link')?.match /<([^>]+)>; rel="last"/
    if [, numPages] := match.1.match /&page=([0-9]+)/
      json.numPages = numPages
  json

prData := await ghPR 1
if prData.numPages? > 1
  await.all
    for page of [2..prData.numPages]
      async do prData.push ...await ghPR page

prTitle: Record<string, string> := {}
for each { number, title } of prData
  prTitle[number] = title

// Output

changelog .= '''\
# Civet Changelog

This changelog is generated automatically by [`build/changelog.civet`](build/changelog.civet).
For each version of Civet, it lists and links to all incorporated PRs,
as well as a full diff and commit list.


'''

function tagOrCommit(version: Version?): string?
  return unless version?
  version.tag ?? version.commit ?? '???'

total .= 0
versions.reverse()
for each version, i of versions
  prevCommit := tagOrCommit versions[i+1]
  details := [
    version.date
    if (version.tag? or version.commit?)? and prevCommit?
      `[diff](${repoUrl}/compare/${prevCommit}...${tagOrCommit version})`
    if version.tag?
      `[commits](${repoUrl}/commits/${version.tag})`
    else if version.commit?
      `[commit](${repoUrl}/commit/${version.commit})`
  ].filter &?
  detail := if details# then ` (${details.join ', '})` else ''
  changelog += `## ${version.version}${detail}\n`
  for each pr of version.prs ?? []
    changelog += `* ${prTitle[pr] ?? ''} [[#${pr}](${repoUrl}/pull/${pr})]\n`
    total++
  changelog += '\n'

writeFileSync 'CHANGELOG.md', changelog, encoding: 'utf8'
console.log `Wrote ${total} changes to CHANGELOG.md`

if uncommitted?
  console.log `!! Don't forget to do a release commit with new package.json and CHANGELOG.md`
