{ spawnSync } from child_process
{ writeFileSync } from fs
{ dirname, join } from path
{ fileURLToPath } from url

process.chdir join (dirname fileURLToPath import.meta.url), '..'

function run(command: string, args: string[]): string
  sub := spawnSync command, args, encoding: 'utf8'
  if sub.error
    console.error sub.error
    process.exit 1
  if sub.signal
    console.error `${command} died from signal ${sub.signal}`
    process.exit 1
  if sub.status
    console.error sub.stderr
    process.exit sub.status
  sub.stdout

// Find commits for each version of Civet

versionLogs := run 'git', [
  'log'
  '--topo-order'
  '--reverse'
  '--patch'
  '--'
  'package.json'
]

interface Version
  version: string
  commit: string
  changes?: string[]
versions: Version[] := []

let commit?: string
for each line of versionLogs.split '\n'
  if match := line.match /^commit ([0-9a-f]+)/
    [, commit] = match
  else if [, version] := line.match /^\+  "version": "([^"]+)"/
    if commit?
      versions.push { commit, version }
    else
      console.warn `Version ${version} outside of a commit`

console.log `${versions.length} versions, from ${versions.0.version} to ${versions.-1.version}`

commitToVersion: Record<string, Version> := {}
for each version of versions
  commitToVersion[version.commit] = version

// Find pull requests between each version

prLogs := run 'git', [
  'log'
  '--topo-order'
  '--reverse'
  //'--grep'
  //'Merge pull request #[0-9]'
]
let changes: string[] = []
let pr?: string
for each line of prLogs.split '\n'
  if pr? and line is not like /^\s/
    console.warn `No message for pull request #${pr}`
    pr = undefined
  if [, commit] := line.match /^commit ([0-9a-f]+)/
    if commit in commitToVersion
      commitToVersion[commit].changes = changes ?? []
      changes = []
  else if match := line.match /^    Merge pull request #([0-9]+) from (\S+)/
    unless match.2 is like /\/dependabot\//
      pr = match.1
  else if pr and line is not like /^\s*$/
    changes.push `${line.replace /^\s*/, ''} [#${pr}]`
    pr = undefined

if changes#
  versions.push { changes, version: 'Unreleased', commit: 'n/a' }

// Output

changelog .= ''
for each version of versions.reverse()
  changelog += `## ${version.version}\n`
  for each change of version.changes!
    changelog += `* ${change}\n`
  changelog += '\n'

writeFileSync 'CHANGELOG.md', changelog, encoding: 'utf8'
