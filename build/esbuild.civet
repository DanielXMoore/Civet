esbuild := require "esbuild"
heraPlugin := require "@danielx/hera/esbuild-plugin"
// Need to use the packaged version because we may not have built our own yet
civetPlugin := require "../node_modules/@danielx/civet/dist/esbuild-plugin.js"
civetUnplugin := require("../node_modules/@danielx/civet/dist/esbuild.js").default

path := require "path"
{access} := require "fs/promises"

watch := process.argv.includes '--watch'
build :=
  if watch
    (opts) => esbuild.context(opts).then .watch()
  else
    esbuild.build
minify := false
sourcemap := false

exists := (p) ->
  access(p)
  .then ->
    true
  .catch ->
    false

extensionResolverPlugin := (extensions) => {
  name: "extension-resolve"
  setup(build)
    // For relative requires that don't contain a '.'
    build.onResolve { filter: /\/[^.]*$/ }, (r) =>
      for extension of extensions
        {path: resolvePath, resolveDir} = r
        p := path.join(resolveDir, resolvePath + `.${extension}`)

        // see if a .coffee file exists
        found := await exists(p)
        if found
          return path: p

      return undefined
}

resolveExtensions := extensionResolverPlugin(["civet", "hera"])

// To get proper extension resolution for non-bundled files, we need to use
// a plugin hack: https://github.com/evanw/esbuild/issues/622#issuecomment-769462611
// set bundle: true, then rewrite .coffee -> .js and mark as external
// Also marking everything else as external since we don't want to bundle anything
rewriteCivetImports := {
  name: 'rewrite-civet'
  setup(build)
    build.onResolve { filter: /.*/ }, (args) =>
      if args.importer
        path: args.path.replace(/\.civet$/, ".js")
        external: true
}

// Files that need civet imports re-written
// since they aren't actually bundled
for name of ["cli", "config", "esbuild-plugin"]
  build({
    entryPoints: [`source/${name}.civet`]
    bundle: true
    platform: 'node'
    format: 'cjs'
    outfile: `dist/${name}.js`
    plugins: [
      rewriteCivetImports
      civetPlugin()
    ]
    footer:
      // Rewrite default export as CJS exports object,
      // so require('esbuild-plugin') gives the plugin.
      js: name is 'esbuild-plugin' ? 'module.exports = module.exports.default;' : ''
  }).catch -> process.exit 1

// esm needs to be a module for import.meta
for name of ["esm"]
  build({
    entryPoints: [`source/${name}.civet`]
    bundle: true
    platform: 'node'
    format: 'esm'
    outfile: `dist/${name}.mjs`
    plugins: [
      rewriteCivetImports
      civetPlugin()
    ]
  }).catch -> process.exit 1

for esm of [false, true]
  build({
    entryPoints: ['source/main.civet']
    bundle: true
    platform: 'node'
    format: if esm then 'esm' else 'cjs'
    outfile: `dist/main.${if esm then 'mjs' else 'js'}`
    plugins: [
      resolveExtensions
      heraPlugin module: true
      civetPlugin()
    ]
  }).catch -> process.exit 1

build({
  entryPoints: ['source/main.civet']
  globalName: "Civet"
  bundle: true
  sourcemap
  platform: 'browser'
  outfile: 'dist/browser.js'
  alias:
    'node:module': './source/browser.civet'
    'node:path': './source/browser.civet'
    'node:vm': './source/browser.civet'
  external: ['node:fs']
  plugins: [
    resolveExtensions
    heraPlugin module: true
    civetPlugin()
  ]
}).catch -> process.exit 1

build({
  entryPoints: ['source/bun-civet.civet']
  bundle: false
  sourcemap
  minify
  platform: 'node'
  format: 'esm'
  target: "esNext"
  outfile: 'dist/bun-civet.mjs'
  plugins: [
    civetPlugin()
  ]
}).catch -> process.exit 1

for format of ["esm", "cjs"]
  build({
    entryPoints:
      for name of [ 'unplugin', 'webpack', 'vite', 'rollup', 'esbuild', 'astro' ]
        `source/unplugin/${name}.ts`
    chunkNames: 'unplugin-shared'
    bundle: true
    sourcemap
    minify
    platform: 'node'
    format
    external: [
      '@danielx/civet'
      'typescript'
      '@typescript/vfs'
      'unplugin'
      'esbuild'
    ]
    target: "esNext"
    outdir: 'dist'
    outExtension: { ".js": if format == "esm" then ".mjs" else ".js" }
    plugins: [
      civetUnplugin
        ts: 'civet'
        emitDeclaration: true
    ]
  }).catch -> process.exit 1

for format of ["esm", "cjs"]
  build({
    entryPoints: ['source/ts-diagnostic.civet']
    bundle: false
    sourcemap
    minify
    platform: 'node'
    format
    target: "esNext"
    outdir: 'dist'
    outExtension: { ".js": if format == "esm" then ".mjs" else ".js" }
    plugins: [
      civetPlugin({ emitDeclaration: true })
    ]
  }).catch -> process.exit 1
