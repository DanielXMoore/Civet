{ resolve, dirname } from node:path
{ createRequire } from node:module

{ PublishDiagnosticsNotification } from @volar/language-server
{ startLanguageServer, LanguageServerHandle } from @volar/test-utils
{ TextDocument } from vscode-languageserver-textdocument
{ URI } from vscode-uri

require := createRequire import.meta.url

__dirname := import.meta.url |> .slice 7 |> dirname
export resolveByDir := (...paths: string[]) => resolve __dirname, ...paths
projectRoot := resolveByDir "./fixtures/empty/"
export resolveByProject = (...paths: string[]) => resolve projectRoot, ...paths

serverHandle: LanguageServerHandle | undefined .= undefined

openedDocuments: TextDocument[] := []

export getLanguageServer := (cwd = projectRoot) =>
  if !serverHandle
    serverHandle = startLanguageServer require.resolve("../dist/server.js"), cwd
    serverHandle.connection.onNotification PublishDiagnosticsNotification.method, =>
    await serverHandle.initialize
      URI.file(cwd).toString()
      {
        typescript:
          tsdk: dirname require.resolve('typescript/lib/typescript.js')
          disableAutoImportCache: true
      }
  serverHandle!

export prepareDocument := async (fileName: string, languageId: string, content: string, cwd?: string) =>
  server := await getLanguageServer cwd
  uri := URI.file(fileName).toString()
  document := await server.openInMemoryDocument uri.toString(), languageId, content
  if openedDocuments.every .uri !== document.uri
    openedDocuments.push document
  document
