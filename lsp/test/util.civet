// TODO: figure out the magic ts-note/TypeScript config to make this work without destructuring from default import
{ intersectRanges, containsRange, makeRange, remapPosition, forwardMap, convertCoffeeScriptSourceMap } from ../source/lib/util.mjs
assert from assert
Civet from @danielx/civet

describe "util", ->
  it "should intersect ranges", ->
    range1 := makeRange(0, 0, 0, 10)
    range2 := makeRange(0, 5, 0, 8)
    assert(intersectRanges(range1, range2))

  it "should check containsRange", ->
    assert containsRange

  it "should remap source positions", ->
    src := """
      x := a + 3
      y++

      y = x + a
    """

    {sourceMap} := Civet.compile(src, {
      filename: "test.civet",
      sourceMap: true
    })

    linesMap := sourceMap.data.lines
    // console.log code, linesMap

    assert.deepEqual remapPosition({
      line: 0
      character: 7
    }, linesMap), { line: 0, character: 1}
    assert.deepEqual remapPosition({
      line: 1
      character: 1
    }, linesMap), { line: 1, character: 1}

  it "should forward map", ->
    src := '''
      // TODO: figure out the magic ts-note/TypeScript config to make this work without destructuring from default import
      import util from "../source/lib/util"
      import assert from "assert"
      import type { ScriptElementKind } from "typescript";
      import type { DocumentSymbol } from "vscode-languageserver"
      import Civet from "@danielx/civet"

      { intersectRanges, containsRange, makeRange, convertNavTree, remapPosition, forwardMap } := util

      describe "util", ->
        it "should intersect ranges", ->
          range1 := makeRange(0, 0, 0, 10)
          range2 := makeRange(0, 5, 0, 8)
          assert(intersectRanges(range1, range2))

        it "should check containsRange", ->
          assert containsRange

        it "should remap source positions", ->
          src := """
            x := a + 3
            y++

            y = x + a
          """

          {code, sourceMap} := Civet.compile(src, {
            filename: "test.civet",
            sourceMap: true
          })
    '''

    {sourceMap} := Civet.compile(src, {
      filename: "test.civet",
      sourceMap: true
    })

    [0, 1, 2, 3, 4, 5, 6, 7].forEach (i) ->
      forwardMap(sourceMap.data.lines, {line: 20 + i, character: 5})
