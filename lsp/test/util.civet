// TODO: figure out the magic ts-note/TypeScript config to make this work without destructuring from default import
{ intersectRanges, containsRange, makeRange, remapPosition, forwardMap, convertCoffeeScriptSourceMap } from ../source/lib/util.mjs
assert from assert
Civet from @danielx/civet

describe "util", ->
  it "should intersect ranges", ->
    range1 := makeRange(0, 0, 0, 10)
    range2 := makeRange(0, 5, 0, 8)
    assert(intersectRanges(range1, range2))

  it "should check containsRange", ->
    assert containsRange

  it "should remap source positions", ->
    src := """
      x := a + 3
      y++

      y = x + a
    """

    {sourceMap} := Civet.compile(src, {
      filename: "test.civet",
      sourceMap: true
    })

    linesMap := sourceMap.data.lines
    // console.log code, linesMap

    assert.deepEqual remapPosition({
      line: 0
      character: 7
    }, linesMap), { line: 0, character: 1}
    assert.deepEqual remapPosition({
      line: 1
      character: 1
    }, linesMap), { line: 1, character: 1}

  it "should forward map", ->
    src := '''
      if signal := signals.get funcName
        ;
    '''

    {code, sourceMap} := Civet.compile(src, {
      filename: "test.civet",
      sourceMap: true
    })

    generatedLines := code.split("\n")

    [0..6].forEach (i) ->
      srcColumn := i + 13
      pos := forwardMap(sourceMap.data.lines, {line: 0, character: srcColumn})
      srcStr := src.slice(srcColumn, srcColumn + 7)
      assert.equal srcStr.replace(" ", "("), generatedLines[pos.line].slice(pos.character, pos.character + 7)

  it "should forward map 2", ->
    src := '''
      it "should intersect ranges", ->
        range1 := makeRange(0, 0, 0, 10)
    '''

    {code, sourceMap} := Civet.compile(src, {
      filename: "test.civet",
      sourceMap: true
    })

    srcLines := src.split("\n")
    generatedLines := code.split("\n")

    [2..6].forEach (srcColumn, i) ->
      pos := forwardMap(sourceMap.data.lines, {line: 1, character: srcColumn})
      srcStr := srcLines[1].slice(srcColumn, srcColumn + 5 - i)
      generatedStr := generatedLines[pos.line].slice(pos.character, pos.character + 5 - i)
      assert.equal srcStr, generatedStr
