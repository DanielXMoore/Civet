{
  "scopeName": "source.civet",
  "patterns": [
    {
      "match": "(new)\\s+(?:(?:(class)\\s+(\\w+(?:\\.\\w*)*)?)|(\\w+(?:\\.\\w*)*))",
      "name": "meta.class.instance.constructor.civet",
      "captures": {
        "1": {
          "name": "keyword.operator.new.civet"
        },
        "2": {
          "name": "storage.type.class.civet"
        },
        "3": {
          "name": "entity.name.type.instance.civet"
        },
        "4": {
          "name": "entity.name.type.instance.civet"
        }
      }
    },
    {
      "begin": "'''",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.civet"
        }
      },
      "end": "'''",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.civet"
        }
      },
      "name": "string.quoted.single.heredoc.civet",
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.escape.backslash.civet"
            }
          },
          "match": "(\\\\).",
          "name": "constant.character.escape.backslash.civet"
        }
      ]
    },
    {
      "begin": "\"\"\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.civet"
        }
      },
      "end": "\"\"\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.civet"
        }
      },
      "name": "string.quoted.double.heredoc.civet",
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.escape.backslash.civet"
            }
          },
          "match": "(\\\\).",
          "name": "constant.character.escape.backslash.civet"
        },
        {
          "include": "#interpolated_civet"
        }
      ]
    },
    {
      "begin": "(?<!#)###(?!#)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.civet"
        }
      },
      "end": "###",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.comment.civet"
        }
      },
      "name": "comment.block.civet",
      "patterns": [
        {
          "match": "(?<=^|\\s)@\\w*(?=\\s)",
          "name": "storage.type.annotation.civet"
        }
      ]
    },
    {
      "begin": "/\\*",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.civet"
        }
      },
      "end": "\\*/",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.comment.civet"
        }
      },
      "name": "comment.block.civet",
      "patterns": [
        {
          "match": "(?<=^|\\s)@\\w*(?=\\s)",
          "name": "storage.type.annotation.civet"
        }
      ]
    },
    {
      "begin": "//",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.civet"
        }
      },
      "end": "$",
      "name": "comment.line.number-sign.civet"
    },
    {
      "begin": "///",
      "end": "(///)[dgimsuvy]*",
      "name": "string.regexp.multiline.civet",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.civet"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.civet"
        }
      },
      "patterns": [
        {
          "include": "#heregexp"
        }
      ]
    },
    {
      "begin": "(?<![\\w$])(/)(?=(?![/*+?])(.+)(/)[dgimsuvy]*(?!\\s*[\\w$/(]))",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.string.begin.civet"
        }
      },
      "end": "(/)[dgimsuvy]*(?!\\s*[\\w$/(])",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.civet"
        }
      },
      "name": "string.regexp.civet",
      "patterns": [
        {
          "include": "source.js.regexp"
        }
      ]
    },
    {
      "match": "\\b(?<![\\.\\$])(break|by|case|catch|continue|else|finally|for|in|of|if|return|switch|then|throw|try|unless|when|while|until|loop|do|export|import|default|from|as|yield|async|await|(?<=for)\\s+own)(?!\\s*:)\\b",
      "name": "keyword.control.civet"
    },
    {
      "match": "\\b(?<![\\.\\$])(delete|instanceof|new|typeof)(?!\\s*:)\\b",
      "name": "keyword.operator.$1.civet"
    },
    {
      "match": "\\b(?<![\\.\\$])(case|function|var|void|with|const|let|enum|native|__hasProp|__extends|__slice|__bind|__indexOf|implements|interface|package|private|protected|public|static)(?!\\s*:)\\b",
      "name": "keyword.reserved.civet"
    },
    {
      "begin": "(?x)\n(?<=\\s|^)((@)?[a-zA-Z_$][\\w$]*)\n\\s*([:=])\\s*\n(?=(\\([^\\(\\)]*\\)\\s*)?[=-]>)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.civet"
        },
        "2": {
          "name": "variable.other.readwrite.instance.civet"
        },
        "3": {
          "name": "keyword.operator.assignment.civet"
        }
      },
      "end": "[=-]>",
      "endCaptures": {
        "0": {
          "name": "storage.type.function.civet"
        }
      },
      "name": "meta.function.civet",
      "patterns": [
        {
          "include": "#function_params"
        }
      ]
    },
    {
      "begin": "(?x)\n(?<=\\s|^)(?:((')([^']*?)('))|((\")([^\"]*?)(\")))\n\\s*([:=])\\s*\n(?=(\\([^\\(\\)]*\\)\\s*)?[=-]>)",
      "beginCaptures": {
        "1": {
          "name": "string.quoted.single.civet"
        },
        "2": {
          "name": "punctuation.definition.string.begin.civet"
        },
        "3": {
          "name": "entity.name.function.civet"
        },
        "4": {
          "name": "punctuation.definition.string.end.civet"
        },
        "5": {
          "name": "string.quoted.double.civet"
        },
        "6": {
          "name": "punctuation.definition.string.begin.civet"
        },
        "7": {
          "name": "entity.name.function.civet"
        },
        "8": {
          "name": "punctuation.definition.string.end.civet"
        },
        "9": {
          "name": "keyword.operator.assignment.civet"
        }
      },
      "end": "[=-]>",
      "endCaptures": {
        "0": {
          "name": "storage.type.function.civet"
        }
      },
      "name": "meta.function.civet",
      "patterns": [
        {
          "include": "#function_params"
        }
      ]
    },
    {
      "begin": "(?=(\\([^\\(\\)]*\\)\\s*)?[=-]>)",
      "end": "[=-]>",
      "endCaptures": {
        "0": {
          "name": "storage.type.function.civet"
        }
      },
      "name": "meta.function.inline.civet",
      "patterns": [
        {
          "include": "#function_params"
        }
      ]
    },
    {
      "begin": "(?<=\\s|^)({)(?=[^'\"#]+?}[\\s\\]}]*=)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.destructuring.begin.bracket.curly.civet"
        }
      },
      "end": "}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.destructuring.end.bracket.curly.civet"
        }
      },
      "name": "meta.variable.assignment.destructured.object.civet",
      "patterns": [
        {
          "include": "$self"
        },
        {
          "match": "[a-zA-Z$_]\\w*",
          "name": "variable.assignment.civet"
        }
      ]
    },
    {
      "begin": "(?<=\\s|^)(\\[)(?=[^'\"#]+?\\][\\s\\]}]*=)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.destructuring.begin.bracket.square.civet"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.destructuring.end.bracket.square.civet"
        }
      },
      "name": "meta.variable.assignment.destructured.array.civet",
      "patterns": [
        {
          "include": "$self"
        },
        {
          "match": "[a-zA-Z$_]\\w*",
          "name": "variable.assignment.civet"
        }
      ]
    },
    {
      "match": "\\b(?<!\\.|::)(true|on|yes)(?!\\s*[:=][^=])\\b",
      "name": "constant.language.boolean.true.civet"
    },
    {
      "match": "\\b(?<!\\.|::)(false|off|no)(?!\\s*[:=][^=])\\b",
      "name": "constant.language.boolean.false.civet"
    },
    {
      "match": "\\b(?<!\\.|::)null(?!\\s*[:=][^=])\\b",
      "name": "constant.language.null.civet"
    },
    {
      "match": "\\b(?<!\\.|::)extends(?!\\s*[:=])\\b",
      "name": "variable.language.civet"
    },
    {
      "match": "(?<!\\.)\\b(?<!\\$)(super|this|arguments)(?!\\s*[:=][^=]|\\$)\\b",
      "name": "variable.language.$1.civet"
    },
    {
      "captures": {
        "1": {
          "name": "storage.type.class.civet"
        },
        "2": {
          "name": "keyword.control.inheritance.civet"
        },
        "3": {
          "name": "entity.other.inherited-class.civet"
        }
      },
      "match": "(?<=\\s|^|\\[|\\()(class)\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*)",
      "name": "meta.class.civet"
    },
    {
      "captures": {
        "1": {
          "name": "storage.type.class.civet"
        },
        "2": {
          "name": "entity.name.type.class.civet"
        },
        "3": {
          "name": "keyword.control.inheritance.civet"
        },
        "4": {
          "name": "entity.other.inherited-class.civet"
        }
      },
      "match": "(?<=\\s|^|\\[|\\()(class\\b)\\s+(@?[a-zA-Z\\$_][\\w\\.]*)?(?:\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*))?",
      "name": "meta.class.civet"
    },
    {
      "match": "\\b(debugger|\\\\)\\b",
      "name": "keyword.other.civet"
    },
    {
      "match": "\\b(Array|ArrayBuffer|Blob|Boolean|Date|document|Function|Int(8|16|32|64)Array|Math|Map|Number|Object|Proxy|RegExp|Set|String|WeakMap|window|Uint(8|16|32|64)Array|XMLHttpRequest)\\b",
      "name": "support.class.civet"
    },
    {
      "match": "\\b(console)\\b",
      "name": "entity.name.type.object.civet"
    },
    {
      "match": "((?<=console\\.)(debug|warn|info|log|error|time|timeEnd|assert))\\b",
      "name": "support.function.console.civet"
    },
    {
      "match": "((?<=\\.)(apply|call|concat|every|filter|forEach|from|hasOwnProperty|indexOf|isPrototypeOf|join|lastIndexOf|map|of|pop|propertyIsEnumerable|push|reduce(Right)?|reverse|shift|slice|some|sort|splice|to(Locale)?String|unshift|valueOf))\\b",
      "name": "support.function.method.array.civet"
    },
    {
      "match": "((?<=Array\\.)(isArray))\\b",
      "name": "support.function.static.array.civet"
    },
    {
      "match": "((?<=Object\\.)(create|definePropert(ies|y)|freeze|getOwnProperty(Descriptors?|Names)|getProperty(Descriptor|Names)|getPrototypeOf|is(Extensible|Frozen|Sealed)?|isnt|keys|preventExtensions|seal))\\b",
      "name": "support.function.static.object.civet"
    },
    {
      "match": "((?<=Math\\.)(abs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|hypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|tan|tanh|trunc))\\b",
      "name": "support.function.static.math.civet"
    },
    {
      "match": "((?<=Number\\.)(is(Finite|Integer|NaN)|toInteger))\\b",
      "name": "support.function.static.number.civet"
    },
    {
      "match": "(?<!\\.)\\b(module|exports|__filename|__dirname|global|process)(?!\\s*:)\\b",
      "name": "support.variable.civet"
    },
    {
      "match": "\\b(Infinity|NaN|undefined)\\b",
      "name": "constant.language.civet"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#method_calls"
    },
    {
      "include": "#function_calls"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#objects"
    },
    {
      "include": "#properties"
    },
    {
      "match": "::",
      "name": "keyword.operator.prototype.civet"
    },
    {
      "match": "(?<!\\$)\\b[0-9]+[\\w$]*",
      "name": "invalid.illegal.identifier.civet"
    },
    {
      "match": ";",
      "name": "punctuation.terminator.statement.civet"
    },
    {
      "match": ",",
      "name": "punctuation.separator.delimiter.civet"
    },
    {
      "begin": "{",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.curly.civet"
        }
      },
      "end": "}",
      "endCaptures": {
        "0": {
          "name": "meta.brace.curly.civet"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    {
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.array.begin.bracket.square.civet"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.array.end.bracket.square.civet"
        }
      },
      "patterns": [
        {
          "match": "(?<!\\.)\\.{3}",
          "name": "keyword.operator.slice.exclusive.civet"
        },
        {
          "match": "(?<!\\.)\\.{2}",
          "name": "keyword.operator.slice.inclusive.civet"
        },
        {
          "include": "$self"
        }
      ]
    },
    {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.civet"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.civet"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    {
      "include": "#instance_variable"
    },
    {
      "include": "#single_quoted_string"
    },
    {
      "include": "#double_quoted_string"
    },
    {
      "include": "#template_string"
    }
  ],
  "repository": {
    "arguments": {
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.arguments.begin.bracket.round.civet"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.arguments.end.bracket.round.civet"
            }
          },
          "name": "meta.arguments.civet",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?=(@|@?[\\w$]+|[=-]>|\\-\\d|\\[|{|\"|'))",
          "end": "(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))",
          "name": "meta.arguments.civet",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "double_quoted_string": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.civet"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.civet"
            }
          },
          "name": "string.quoted.double.civet",
          "patterns": [
            {
              "captures": {
                "1": {
                  "name": "punctuation.definition.escape.backslash.civet"
                }
              },
              "match": "(\\\\)(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
              "name": "constant.character.escape.backslash.civet"
            },
            {
              "include": "#interpolated_civet"
            }
          ]
        }
      ]
    },
    "template_string": {
      "patterns": [
        {
          "begin": "`",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.civet"
            }
          },
          "end": "`",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.civet"
            }
          },
          "name": "string.template.civet",
          "patterns": [
            {
              "captures": {
                "1": {
                  "name": "punctuation.definition.escape.backslash.civet"
                }
              },
              "match": "(\\\\)(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
              "name": "constant.character.escape.backslash.civet"
            },
            {
              "include": "#template_interpolated_civet"
            }
          ]
        }
      ]
    },
    "function_calls": {
      "patterns": [
        {
          "begin": "(@)?([\\w$]+)(?=\\()",
          "beginCaptures": {
            "1": {
              "name": "variable.other.readwrite.instance.civet"
            },
            "2": {
              "patterns": [
                {
                  "include": "#function_names"
                }
              ]
            }
          },
          "end": "(?<=\\))",
          "name": "meta.function-call.civet",
          "patterns": [
            {
              "include": "#arguments"
            }
          ]
        },
        {
          "begin": "(?x)\n(@)?([\\w$]+)\n\\s*\n(?=\\s+(?!(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))(?=(@?[\\w$]+|[=-]>|\\-\\d|\\[|{|\"|')))",
          "beginCaptures": {
            "1": {
              "name": "variable.other.readwrite.instance.civet"
            },
            "2": {
              "patterns": [
                {
                  "include": "#function_names"
                }
              ]
            }
          },
          "end": "(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))",
          "name": "meta.function-call.civet",
          "patterns": [
            {
              "include": "#arguments"
            }
          ]
        }
      ]
    },
    "function_names": {
      "patterns": [
        {
          "match": "(?x)\n\\b(isNaN|isFinite|eval|uneval|parseInt|parseFloat|decodeURI|\ndecodeURIComponent|encodeURI|encodeURIComponent|escape|unescape|\nrequire|set(Interval|Timeout)|clear(Interval|Timeout))\\b",
          "name": "support.function.civet"
        },
        {
          "match": "[a-zA-Z_$][\\w$]*",
          "name": "entity.name.function.civet"
        },
        {
          "match": "\\d[\\w$]*",
          "name": "invalid.illegal.identifier.civet"
        }
      ]
    },
    "function_params": {
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.begin.bracket.round.civet"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.end.bracket.round.civet"
            }
          },
          "name": "meta.parameters.civet",
          "patterns": [
            {
              "match": "([a-zA-Z_$][\\w$]*)(\\.\\.\\.)?",
              "captures": {
                "1": {
                  "name": "variable.parameter.function.civet"
                },
                "2": {
                  "name": "keyword.operator.splat.civet"
                }
              }
            },
            {
              "match": "(@(?:[a-zA-Z_$][\\w$]*)?)(\\.\\.\\.)?",
              "captures": {
                "1": {
                  "name": "variable.parameter.function.readwrite.instance.civet"
                },
                "2": {
                  "name": "keyword.operator.splat.civet"
                }
              }
            },
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "embedded_comment": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.civet"
            }
          },
          "match": "(?<!\\\\)(#).*$\\n?",
          "name": "comment.line.number-sign.civet"
        }
      ]
    },
    "instance_variable": {
      "patterns": [
        {
          "match": "(@)([a-zA-Z_\\$]\\w*)?",
          "name": "variable.other.readwrite.instance.civet"
        }
      ]
    },
    "interpolated_civet": {
      "patterns": [
        {
          "begin": "\\#\\{",
          "captures": {
            "0": {
              "name": "punctuation.section.embedded.civet"
            }
          },
          "end": "\\}",
          "name": "source.civet.embedded.source",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "template_interpolated_civet": {
      "patterns": [
        {
          "begin": "\\$\\{",
          "captures": {
            "0": {
              "name": "punctuation.section.embedded.civet"
            }
          },
          "end": "\\}",
          "name": "source.civet.embedded.source",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "method_calls": {
      "patterns": [
        {
          "begin": "(?:(\\.)|(::))\\s*([\\w$]+)\\s*(?=\\()",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.method.period.civet"
            },
            "2": {
              "name": "keyword.operator.prototype.civet"
            },
            "3": {
              "patterns": [
                {
                  "include": "#method_names"
                }
              ]
            }
          },
          "end": "(?<=\\))",
          "name": "meta.method-call.civet",
          "patterns": [
            {
              "include": "#arguments"
            }
          ]
        },
        {
          "begin": "(?:(\\.)|(::))\\s*([\\w$]+)\\s*(?=\\s+(?!(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))(?=(@|@?[\\w$]+|[=-]>|\\-\\d|\\[|{|\"|')))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.method.period.civet"
            },
            "2": {
              "name": "keyword.operator.prototype.civet"
            },
            "3": {
              "patterns": [
                {
                  "include": "#method_names"
                }
              ]
            }
          },
          "end": "(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))",
          "name": "meta.method-call.civet",
          "patterns": [
            {
              "include": "#arguments"
            }
          ]
        }
      ]
    },
    "method_names": {
      "patterns": [
        {
          "match": "(?x)\n\\bon(Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|\nReadystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|\nBefore(cut|deactivate|unload|update|paste|print|editfocus|activate)|\nBlur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|\nChange|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|\nDatasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|\nDragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|\nErrorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\\b",
          "name": "support.function.event-handler.civet"
        },
        {
          "match": "(?x)\n\\b(shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|\nscrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|\nsup|sub|substr|substring|splice|split|send|set(Milliseconds|Seconds|Minutes|Hours|\nMonth|Year|FullYear|Date|UTC(Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|\nTime|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|\nsavePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|\ncontextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|\ncreateEventObject|to(GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|\ntest|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|\nuntaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|\nprint|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|\nfileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|\nforward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|\nabort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|\nreleaseCapture|releaseEvents|go|get(Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|\nTime|Date|TimezoneOffset|UTC(Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|\nAttention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|\nmoveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back)\\b",
          "name": "support.function.civet"
        },
        {
          "match": "(?x)\n\\b(acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|\nappendChild|appendData|before|blur|canPlayType|captureStream|\ncaretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|\ncloneContents|cloneNode|cloneRange|close|closest|collapse|\ncompareBoundaryPoints|compareDocumentPosition|comparePoint|contains|\nconvertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|\ncreateAttributeNS|createCaption|createCDATASection|createComment|\ncreateContextualFragment|createDocument|createDocumentFragment|\ncreateDocumentType|createElement|createElementNS|createEntityReference|\ncreateEvent|createExpression|createHTMLDocument|createNodeIterator|\ncreateNSResolver|createProcessingInstruction|createRange|createShadowRoot|\ncreateTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|\ndeleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|\ndeleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|\nenableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|\nexitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|\ngetAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|\ngetAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|\ngetClientRects|getContext|getDestinationInsertionPoints|getElementById|\ngetElementsByClassName|getElementsByName|getElementsByTagName|\ngetElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|\ngetVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|\nhasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|\ninsertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|\ninsertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|\nisPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|\nlookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|\nmoveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|\nparentNode|pause|play|postMessage|prepend|preventDefault|previousNode|\npreviousSibling|probablySupportsContext|queryCommandEnabled|\nqueryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|\nquerySelector|querySelectorAll|registerContentHandler|registerElement|\nregisterProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|\nremoveAttributeNode|removeAttributeNS|removeChild|removeEventListener|\nremoveItem|replace|replaceChild|replaceData|replaceWith|reportValidity|\nrequestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|\nscrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|\nsetAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|\nsetCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|\nsetRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|\nslice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|\nsubmit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|\ntoDataURL|toggle|toString|values|write|writeln)\\b",
          "name": "support.function.dom.civet"
        },
        {
          "match": "[a-zA-Z_$][\\w$]*",
          "name": "entity.name.function.civet"
        },
        {
          "match": "\\d[\\w$]*",
          "name": "invalid.illegal.identifier.civet"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$)",
          "name": "constant.numeric.hex.civet"
        },
        {
          "match": "\\b(?<!\\$)0(b|B)[01][01_]*\\b(?!\\$)",
          "name": "constant.numeric.binary.civet"
        },
        {
          "match": "\\b(?<!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$)",
          "name": "constant.numeric.octal.civet"
        },
        {
          "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|       # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|       # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|            # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                # 1.1\n  (?:\\b[0-9][0-9_]*(?=\\.{2,3}))|                  # 1 followed by a slice\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                      # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                      # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                     # 1\n)(?!\\$)",
          "captures": {
            "0": {
              "name": "constant.numeric.decimal.civet"
            },
            "1": {
              "name": "punctuation.separator.decimal.period.civet"
            },
            "2": {
              "name": "punctuation.separator.decimal.period.civet"
            },
            "3": {
              "name": "punctuation.separator.decimal.period.civet"
            },
            "4": {
              "name": "punctuation.separator.decimal.period.civet"
            },
            "5": {
              "name": "punctuation.separator.decimal.period.civet"
            },
            "6": {
              "name": "punctuation.separator.decimal.period.civet"
            }
          }
        }
      ]
    },
    "objects": {
      "patterns": [
        {
          "match": "[A-Z][A-Z0-9_$]*(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))",
          "name": "constant.other.object.civet"
        },
        {
          "match": "[a-zA-Z_$][\\w$]*(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))",
          "name": "variable.other.object.civet"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "(?:([a-zA-Z$_][\\w$]*)?\\s+|(?<![\\w$]))(and=|or=)",
          "captures": {
            "1": {
              "name": "variable.assignment.civet"
            },
            "2": {
              "name": "keyword.operator.assignment.compound.civet"
            }
          }
        },
        {
          "match": "([a-zA-Z$_][\\w$]*)?\\s*(%=|\\+=|-=|\\*=|&&=|\\|\\|=|\\?=|(?<!\\()/=)",
          "captures": {
            "1": {
              "name": "variable.assignment.civet"
            },
            "2": {
              "name": "keyword.operator.assignment.compound.civet"
            }
          }
        },
        {
          "match": "([a-zA-Z$_][\\w$]*)?\\s*(&=|\\^=|<<=|>>=|>>>=|\\|=)",
          "captures": {
            "1": {
              "name": "variable.assignment.civet"
            },
            "2": {
              "name": "keyword.operator.assignment.compound.bitwise.civet"
            }
          }
        },
        {
          "match": "<<|>>>|>>",
          "name": "keyword.operator.bitwise.shift.civet"
        },
        {
          "match": "!=|<=|>=|==|===|<|>",
          "name": "keyword.operator.comparison.civet"
        },
        {
          "match": "&&|!|\\|\\|",
          "name": "keyword.operator.logical.civet"
        },
        {
          "match": "&|\\||\\^|~",
          "name": "keyword.operator.bitwise.civet"
        },
        {
          "match": "([a-zA-Z$_][\\w$]*)?\\s*(\\.=|:=|=|:(?!:))(?![>=])",
          "captures": {
            "1": {
              "name": "variable.assignment.civet"
            },
            "2": {
              "name": "keyword.operator.assignment.civet"
            }
          }
        },
        {
          "match": "--",
          "name": "keyword.operator.decrement.civet"
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.increment.civet"
        },
        {
          "match": "\\.\\.\\.",
          "name": "keyword.operator.splat.civet"
        },
        {
          "match": "\\?",
          "name": "keyword.operator.existential.civet"
        },
        {
          "match": "%|\\*|/|-|\\+",
          "name": "keyword.operator.civet"
        },
        {
          "match": "(?x)\n\\b(?<![\\.\\$])\n(?:\n  (and|or|not) # logical\n  |\n  (is|isnt) # comparison\n)\n(?!\\s*:)\\b",
          "captures": {
            "1": {
              "name": "keyword.operator.logical.civet"
            },
            "2": {
              "name": "keyword.operator.comparison.civet"
            }
          }
        }
      ]
    },
    "properties": {
      "patterns": [
        {
          "match": "(?:(\\.)|(::))\\s*([A-Z][A-Z0-9_$]*\\b\\$*)(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))",
          "captures": {
            "1": {
              "name": "punctuation.separator.property.period.civet"
            },
            "2": {
              "name": "keyword.operator.prototype.civet"
            },
            "3": {
              "name": "constant.other.object.property.civet"
            }
          }
        },
        {
          "match": "(?:(\\.)|(::))\\s*(\\$*[a-zA-Z_$][\\w$]*)(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))",
          "captures": {
            "1": {
              "name": "punctuation.separator.property.period.civet"
            },
            "2": {
              "name": "keyword.operator.prototype.civet"
            },
            "3": {
              "name": "variable.other.object.property.civet"
            }
          }
        },
        {
          "match": "(?:(\\.)|(::))\\s*([A-Z][A-Z0-9_$]*\\b\\$*)",
          "captures": {
            "1": {
              "name": "punctuation.separator.property.period.civet"
            },
            "2": {
              "name": "keyword.operator.prototype.civet"
            },
            "3": {
              "name": "constant.other.property.civet"
            }
          }
        },
        {
          "match": "(?:(\\.)|(::))\\s*(\\$*[a-zA-Z_$][\\w$]*)",
          "captures": {
            "1": {
              "name": "punctuation.separator.property.period.civet"
            },
            "2": {
              "name": "keyword.operator.prototype.civet"
            },
            "3": {
              "name": "variable.other.property.civet"
            }
          }
        },
        {
          "match": "(?:(\\.)|(::))\\s*([0-9][\\w$]*)",
          "captures": {
            "1": {
              "name": "punctuation.separator.property.period.civet"
            },
            "2": {
              "name": "keyword.operator.prototype.civet"
            },
            "3": {
              "name": "invalid.illegal.identifier.civet"
            }
          }
        }
      ]
    },
    "single_quoted_string": {
      "patterns": [
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.civet"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.civet"
            }
          },
          "name": "string.quoted.single.civet",
          "patterns": [
            {
              "captures": {
                "1": {
                  "name": "punctuation.definition.escape.backslash.civet"
                }
              },
              "match": "(\\\\)(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
              "name": "constant.character.escape.backslash.civet"
            }
          ]
        }
      ]
    },
    "regex-character-class": {
      "patterns": [
        {
          "match": "\\\\[wWsSdD]|\\.",
          "name": "constant.character.character-class.regexp"
        },
        {
          "match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})",
          "name": "constant.character.numeric.regexp"
        },
        {
          "match": "\\\\c[A-Z]",
          "name": "constant.character.control.regexp"
        },
        {
          "match": "\\\\.",
          "name": "constant.character.escape.backslash.regexp"
        }
      ]
    },
    "heregexp": {
      "patterns": [
        {
          "match": "\\\\[bB]|\\^|\\$",
          "name": "keyword.control.anchor.regexp"
        },
        {
          "match": "\\\\[1-9]\\d*",
          "name": "keyword.other.back-reference.regexp"
        },
        {
          "match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??",
          "name": "keyword.operator.quantifier.regexp"
        },
        {
          "match": "\\|",
          "name": "keyword.operator.or.regexp"
        },
        {
          "begin": "(\\()((\\?=)|(\\?!))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            },
            "3": {
              "name": "meta.assertion.look-ahead.regexp"
            },
            "4": {
              "name": "meta.assertion.negative-look-ahead.regexp"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "name": "meta.group.assertion.regexp",
          "patterns": [
            {
              "include": "#heregexp"
            }
          ]
        },
        {
          "begin": "\\((\\?:)?",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "name": "meta.group.regexp",
          "patterns": [
            {
              "include": "#heregexp"
            }
          ]
        },
        {
          "begin": "(\\[)(\\^)?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            },
            "2": {
              "name": "keyword.operator.negation.regexp"
            }
          },
          "end": "(\\])",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            }
          },
          "name": "constant.other.character-class.set.regexp",
          "patterns": [
            {
              "captures": {
                "1": {
                  "name": "constant.character.numeric.regexp"
                },
                "2": {
                  "name": "constant.character.control.regexp"
                },
                "3": {
                  "name": "constant.character.escape.backslash.regexp"
                },
                "4": {
                  "name": "constant.character.numeric.regexp"
                },
                "5": {
                  "name": "constant.character.control.regexp"
                },
                "6": {
                  "name": "constant.character.escape.backslash.regexp"
                }
              },
              "match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
              "name": "constant.other.character-class.range.regexp"
            },
            {
              "include": "#regex-character-class"
            }
          ]
        },
        {
          "include": "#regex-character-class"
        },
        {
          "include": "#interpolated_civet"
        },
        {
          "include": "#embedded_comment"
        }
      ]
    }
  }
}
