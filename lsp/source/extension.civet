import type { ExtensionContext } from 'vscode'
import { regenerateTextmate } from './regenerateTextmate.civet'

* as path from path
* as vscode from vscode
{ workspace } := vscode

{
  LanguageClient,
  LanguageClientOptions,
  ServerOptions,
  TransportKind
} from vscode-languageclient/node

let client: LanguageClient

export function activate(context: ExtensionContext)
  activateClient context
  activateCommands context

function activateClient(context: ExtensionContext)
  // The server is implemented in node
  serverModule := context.asAbsolutePath(
    path.join('dist', 'server.js')
  )
  // The debug options for the server
  // --inspect=6009: runs the server in Node's Inspector mode so VS Code can attach to the server for debugging
  debugOptions :=
    execArgv: ['--nolazy', '--inspect=6009']

  // If the extension is launched in debug mode then the debug server options are used
  // Otherwise the run options are used
  serverOptions: ServerOptions :=
    run:
      module: serverModule
      transport: TransportKind.ipc
    debug:
      module: serverModule
      transport: TransportKind.ipc
      options: debugOptions

  // Options to control the language client
  clientOptions: LanguageClientOptions :=
    // TODO: this is where we could add more based on plugins
    // Register the server for language files we care about
    documentSelector: [
      { scheme: 'file', language: 'civet' }
      { scheme: 'file', language: 'javascript' }
      { scheme: 'file', language: 'javascriptreact' }
      { scheme: 'file', language: 'typescript' }
      { scheme: 'file', language: 'typescriptreact' }
    ]

  // Create the language client and start the client.
  client = new LanguageClient
    'civetLanguageServer'
    'Civet Language Server'
    serverOptions
    clientOptions

  // Start the client. This will also launch the server
  client.start()

  // Watch for config changes → regenerate grammar then restart LS
  grammarWatcher := workspace.createFileSystemWatcher("**/{tsconfig,package,🐈,civetconfig,civet.config}.{json,yaml,yml,civet,js}")

  restartAndRegen := async =>
    // 1. Regenerate TextMate grammar from new config
    await regenerateTextmate()
    // 2. Restart language server so it picks up any new compile options
    await client?.stop()
    await client.start()

  grammarWatcher.onDidChange restartAndRegen
  grammarWatcher.onDidCreate restartAndRegen
  grammarWatcher.onDidDelete restartAndRegen

  // Keep watcher alive for the lifetime of the extension
  context.subscriptions.push grammarWatcher

function activateCommands(context: ExtensionContext)
  commandDisposable := vscode.commands.registerCommand "civet.action.restartServer", =>
    await client?.stop()
    await client.start()

  context.subscriptions.push commandDisposable

  context.subscriptions.push vscode.commands.registerCommand "civet.action.regenerateGrammar", =>
    regenerateTextmate()

export function deactivate()
  if (!client)
    return

  return client.stop()

export { regenerateTextmate } from './regenerateTextmate.civet'
