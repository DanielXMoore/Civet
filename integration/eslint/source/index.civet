Civet, { type CompileOptions } from '@danielx/civet'
{ remapPosition } from '@danielx/civet/ts-diagnostic'
type { ESLint, Linter } from 'eslint'

sourceMaps := new Map

export function civet(options: CompileOptions = {js: true}): ESLint.Plugin
  function preprocess(code: string, filename: string)
    { code: text, sourceMap } := Civet.compile code, {
      ...options
      filename
      sourceMap: true
      sync: true
    }
    sourceMaps.set filename, sourceMap
    [{ text, filename }]

  function postprocess(_messages: Linter.LintMessage[][], filename: string)
    // Length 1 corresponding to the return value of `preprocess`
    [messages] := _messages
    if sourceMap := sourceMaps.get filename
      sourceMapLines := sourceMap.data.lines
      for each message of messages
        if message.line?
          [message.line, message.column] = remap message.line, message.column
        if message.endLine?
          [message.endLine, message.endColumn] = remap message.endLine, message.endColumn

      function remap(line: number, column: number?)
        column ?= 1
        pos := remapPosition {
          line: line - 1
          character: column - 1
        }, sourceMapLines
        [
          pos.line + 1
          pos.character + 1
        ]
    else
      console.warn "eslint-plugin-civet: missing sourcemap for", filename
    messages

  {
    meta:
      name: "civet"
      version: civet.version
    processors:
      civet: {
        meta:
          name: "civet"
          version: civet.version
        preprocess
        postprocess
      }
    configs:
      recommended: {}
  }

export default civet()
