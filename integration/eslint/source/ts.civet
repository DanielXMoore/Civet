type { Linter } from 'eslint'
ts from "typescript-eslint"
{ civet: civetJS, type Options } from './index.civet'

export function civet(options: Options = {js: false})
  options.outputExtension ??= '.tsx'
  plugin := civetJS(options)

  function makeConfig<T extends Linter.FlatConfig | Linter.FlatConfig[]>(config: T): T
    if Array.isArray config
      for each c of config
        makeConfig c
    else
      config = {...config as Linter.FlatConfig}
      if config.rules?
        rules := { ...config.rules }
        for rule in plugin.configs.overrides.rules
          if rule in rules
            rules[rule] = plugin.configs.overrides.rules[rule]
        config.rules = { ...config.rules, ...plugin.configs!.overrides.rules }
      if config.files?
        config.files = [ ...config.files, "**/*.civet" ]
      config

  // Rename eslint recommended and all configs to jsRecommended and jsAll
  for config in plugin.configs
    continue if config is "base"
    plugin.configs[`js${config[0].toUpperCase()}${config[1..]}`] =
      plugin.configs[config]

  for config in ts.configs
    continue if config is "base"
    modified := makeConfig ts.configs[config as keyof typeof ts.configs]
    if Array.isArray modified
      plugin.configs![config] = [
        plugin.configs.base
        ...modified
      ]
    else
      plugin.configs![config] = [
        plugin.configs.base
        modified
      ]
  plugin.configs!.base = [
    plugin.configs.base
    makeConfig ts.configs.base
  ]
  plugin

export default civet()
