civet from '../index.js'
assert from 'node:assert'
{basename, dirname, normalize} from 'node:path'
File from 'vinyl'

function createFile(path: string, contents: string)
  base := dirname path
  new File {
    path
    base
    cwd: dirname base
    contents: Buffer.from contents
  }

function testOutput(newPath: string, expected: string, done)
  newPath = normalize newPath
  return (newFile) =>
    assert.equal newFile.path, newPath
    assert.equal String(newFile.contents), expected
    assert.equal newFile.relative, basename newPath
    done()

describe 'gulp-civet', =>
  it 'compiles a simple file', (done) =>
    civet()
    .on 'error', done
    .on 'data', (testOutput '/home/civet/test/file.civet.tsx', '''
      const hello = 'world'
    ''', done)
    .write createFile '/home/civet/test/file.civet', '''
      hello := 'world'
    '''

  it 'extension option changes output filename', (done) =>
    civet {extension: '.js', js: true}
    .on 'error', done
    .on 'data', (testOutput '/home/civet/test/file.js', '''
      const hello = 'world'
    ''', done)
    .write createFile '/home/civet/test/file.civet', '''
      hello := 'world'
    '''

  it 'emits errors correctly', (done) =>
    civet()
    .on 'error', ((err) => done())
    .on 'data', =>
      throw new Error 'no file should have been emitted!'
    .write createFile '/home/civet/test/file.civet', '''
      hello :::= 'world'
    '''
