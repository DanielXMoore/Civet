through = require 'through2'
replaceExt = require 'replace-ext'
PluginError = require 'plugin-error'

interface Options
  extension?: string
  inlineMap?: boolean
  js?: boolean
  // or any other Civet options

module.exports = (options?: Options) ->
  function transform(file, encoding: string, callback)
    if file.isNull()
      return callback null, file
    if file.isStream()
      return callback new PluginError 'gulp-civet', 'Streaming not supported'

    compileOptions := {
      inlineMap: Boolean file.sourceMap
      filename: file.path
      ...options
    }
    extension :=
      if compileOptions.extension?
        compileOptions.extension
      else if compileOptions.js
        ".civet.jsx"
      else
        ".civet.tsx"
    dest := replaceExt file.path, extension
    input := file.contents.toString encoding

    let compiled: string
    try
      compiled = await require('@danielx/civet').compile input, options
    catch err
      return callback new PluginError 'gulp-civet', err

    file.contents = Buffer.from compiled
    file.path = dest;
    callback null, file

  through.obj transform
